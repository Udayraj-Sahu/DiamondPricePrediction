{"version":3,"file":"static/js/964.356f122f.chunk.js","mappings":"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","sources":["../node_modules/react-intl/lib/src/components/useIntl.js","experiment-tracking/components/experiment-page/hooks/useAsyncDispatch.ts","experiment-tracking/components/experiment-page/contexts/GetExperimentsContext.tsx","common/static/permission-denied-lock.svg","experiment-tracking/components/PermissionDeniedView.js","experiment-tracking/components/experiment-page/components/ExperimentViewArtifactLocation.tsx","experiment-tracking/components/experiment-page/components/ExperimentViewDescriptions.tsx","experiment-tracking/components/experiment-page/hooks/useFetchExperiments.ts","experiment-tracking/components/experiment-page/components/ExperimentViewNotes.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewCopyTitle.tsx","shared/building_blocks/CopyButton.jsx","shared/building_blocks/CopyBox.jsx","experiment-tracking/components/modals/GetLinkModal.js","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderShareButton.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeader.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderCompare.tsx","experiment-tracking/types.ts","experiment-tracking/components/experiment-page/utils/experimentRuns.selector.ts","experiment-tracking/components/experiment-page/components/runs/cells/ColumnHeaderCell.tsx","experiment-tracking/components/experiment-page/components/runs/cells/DateCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ExperimentNameCellRenderer.tsx","common/components/TrimmedText.js","common/static/logged-model.svg","common/static/registered-model.svg","experiment-tracking/components/experiment-page/components/runs/cells/ModelsCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/SourceCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/VersionCellRenderer.tsx","experiment-tracking/utils/CsvUtils.ts","experiment-tracking/components/experiment-page/utils/experimentPage.common-utils.ts","experiment-tracking/components/experiment-page/components/runs/cells/RowActionsCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RowActionsHeaderCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RunNameCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/LoadMoreRowRenderer.tsx","experiment-tracking/components/experiment-page/utils/experimentPage.column-utils.ts","experiment-tracking/components/modals/DeleteRunModal.js","experiment-tracking/components/modals/RestoreRunModal.js","experiment-tracking/components/experiment-page/hooks/useExperimentIds.ts","experiment-tracking/components/experiment-page/utils/experimentPage.fetch-utils.ts","experiment-tracking/components/experiment-page/models/SearchExperimentRunsFacetsState.ts","experiment-tracking/components/experiment-page/utils/persistSearchFacets.serializers.ts","experiment-tracking/components/experiment-page/utils/persistSearchFacets.ts","experiment-tracking/components/experiment-page/contexts/GetExperimentRunsContext.tsx","experiment-tracking/components/experiment-page/hooks/useFetchExperimentRuns.ts","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunModals.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControlsActions.tsx","../node_modules/antd/es/badge/SingleNumber.js","../node_modules/antd/es/badge/ScrollNumber.js","../node_modules/antd/es/badge/utils.js","../node_modules/antd/es/badge/Ribbon.js","../node_modules/antd/es/badge/index.js","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRefreshButton.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsColumnSelector.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsModeSwitch.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsSortSelector.tsx","experiment-tracking/components/experiment-page/components/runs/RunsSearchTooltipContent.tsx","experiment-tracking/components/experiment-page/components/runs/RunsSearchAutoComplete.utils.tsx","experiment-tracking/components/experiment-page/components/runs/RunsSearchAutoComplete.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentViewLocalStore.ts","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControlsFilters.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControls.tsx","experiment-tracking/components/experiment-page/hooks/useRunSortOptions.ts","common/components/ag-grid/AgGridLoader.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsEmptyTable.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableAddColumnCTA.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableStatusBar.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTable.tsx","experiment-tracking/components/experiment-page/models/SearchExperimentRunsViewState.ts","experiment-tracking/components/experiment-page/utils/experimentPage.row-utils.ts","experiment-tracking/components/runs-compare/runs-compare.types.ts","common/static/chart-bar.svg","common/static/chart-contour.svg","common/static/chart-line.svg","common/static/chart-parallel.svg","common/static/chart-scatter.svg","experiment-tracking/components/runs-compare/RunsCompareAddChartMenu.tsx","experiment-tracking/components/runs-compare/hooks/useMutableHoverCallback.tsx","experiment-tracking/components/runs-compare/hooks/useCompareRunsTraceHighlight.ts","experiment-tracking/components/runs-compare/charts/CompareRunsMetricsBarPlot.tsx","experiment-tracking/components/runs-compare/hooks/useCompareRunsTooltip.tsx","experiment-tracking/components/runs-compare/cards/ChartCard.common.tsx","experiment-tracking/components/runs-compare/cards/RunsCompareBarChartCard.tsx","common/static/parallel-chart-placeholder.svg","experiment-tracking/components/runs-compare/charts/LazyParallelCoordinatesPlot.tsx","experiment-tracking/components/runs-compare/cards/RunsCompareParallelChartCard.tsx","experiment-tracking/components/runs-compare/charts/CompareRunsScatterPlot.tsx","experiment-tracking/components/runs-compare/cards/RunsCompareScatterChartCard.tsx","experiment-tracking/components/runs-compare/charts/CompareRunsContourPlot.tsx","experiment-tracking/components/runs-compare/cards/RunsCompareContourChartCard.tsx","experiment-tracking/components/runs-compare/charts/CompareRunsMetricsLinePlot.tsx","experiment-tracking/components/runs-compare/cards/RunsCompareLineChartCard.tsx","experiment-tracking/components/runs-compare/RunsCompareCharts.tsx","experiment-tracking/components/runs-compare/config/RunsCompareConfigure.common.tsx","experiment-tracking/components/runs-compare/config/RunsCompareConfigureBarChart.tsx","experiment-tracking/components/runs-compare/config/RunsCompareConfigureParallelChart.tsx","experiment-tracking/components/runs-compare/config/RunsCompareConfigureLineChart.tsx","experiment-tracking/components/runs-compare/hooks/useFetchCompareRunsMetricHistory.ts","experiment-tracking/components/runs-compare/config/RunsCompareConfigureLineChart.preview.tsx","experiment-tracking/components/runs-compare/config/RunsCompareConfigureParallelChart.preview.tsx","experiment-tracking/components/runs-compare/config/RunsCompareConfigureContourChart.tsx","experiment-tracking/components/runs-compare/config/RunsCompareConfigureScatterChart.tsx","experiment-tracking/components/runs-compare/RunsCompareTooltipBody.tsx","experiment-tracking/components/runs-compare/RunsCompareConfigureModal.tsx","experiment-tracking/components/runs-compare/config/RunsCompareConfigureBarChart.preview.tsx","experiment-tracking/components/runs-compare/config/RunsCompareConfigureContourChart.preview.tsx","experiment-tracking/components/runs-compare/config/RunsCompareConfigureScatterChart.preview.tsx","experiment-tracking/components/runs-compare/RunsCompare.tsx","experiment-tracking/components/runs-compare/hooks/useMultipleChartsMetricHistory.ts","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRuns.tsx","experiment-tracking/components/experiment-page/ExperimentView.tsx","experiment-tracking/components/experiment-page/hooks/useExperiments.ts","experiment-tracking/components/experiment-page/ExperimentPage.tsx","experiment-tracking/components/runs-compare/charts/CompareRunsCharts.common.ts"],"sourcesContent":["import * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n    var intl = React.useContext(Context);\n    invariantIntlContext(intl);\n    return intl;\n}\n","import { useDispatch } from 'react-redux';\nimport type { AnyAction } from 'redux';\n\n/**\n * Since we're using redux middlewares that promisify action dispatch\n * ('redux-promise-middleware'), we use this method as a sugar for useDispatch()\n * with correct typings.\n */\nexport const useAsyncDispatch = useDispatch as () => (action: AnyAction) => Promise<AnyAction>;\n","import { isEqual } from 'lodash';\nimport React, { createContext, useCallback, useMemo, useState } from 'react';\nimport { ErrorWrapper } from '../../../../common/utils/ErrorWrapper';\nimport RequestStateWrapper from '../../../../common/components/RequestStateWrapper';\nimport Utils from '../../../../common/utils/Utils';\n\nimport type {\n  getExperimentApi,\n  setCompareExperiments,\n  setExperimentTagApi,\n} from '../../../actions';\nimport { useAsyncDispatch } from '../hooks/useAsyncDispatch';\n\nexport interface GetExperimentsContextActions {\n  setExperimentTagApi: typeof setExperimentTagApi;\n  getExperimentApi: typeof getExperimentApi;\n  setCompareExperiments: typeof setCompareExperiments;\n}\n\nexport interface GetExperimentsContextType {\n  /**\n   * Function used to (re)fetch experiments using their IDs.\n   */\n  fetchExperiments: (experimentIds: string[]) => void;\n\n  /**\n   * Indicates if experiments are being loaded at the moment\n   */\n  isLoadingExperiment: boolean;\n\n  /**\n   * Contains error descriptor if fetching runs failed\n   */\n  requestError: ErrorWrapper | null;\n\n  /**\n   * All experiment-related actions creators\n   */\n  actions: GetExperimentsContextActions;\n}\n\n/**\n * Wrapper context that aggregates concrete redux actions necessary to fetch experiments.\n */\nexport const GetExperimentsContext = createContext<GetExperimentsContextType | null>(null);\n\n/**\n * Provider component for GetExperimentsContext.\n * Accepts concrete redux actions for searching experiments.\n */\nexport const GetExperimentsContextProvider = ({\n  children,\n  actions,\n}: React.PropsWithChildren<{\n  actions: GetExperimentsContextActions;\n}>) => {\n  const [fetchExperimentsRequestIds, setFetchExperimentsRequestIds] = useState<string[]>([]);\n  const [isLoadingExperiment, setIsLoadingExperiment] = useState(false);\n\n  const [requestError, setRequestError] = useState<any>(null);\n\n  const dispatch = useAsyncDispatch();\n\n  const fetchExperiments = useCallback(\n    (experimentIds: string[]) => {\n      const fetchFn = () => {\n        const newRequestIds = experimentIds.map((experimentId) => {\n          const requestAction = actions.getExperimentApi(experimentId);\n          dispatch(requestAction).catch((e) => {\n            Utils.logErrorAndNotifyUser(e);\n          });\n          return requestAction.meta.id;\n        });\n        setFetchExperimentsRequestIds((requestIds) =>\n          isEqual(newRequestIds, requestIds) ? requestIds : newRequestIds,\n        );\n      };\n\n      setRequestError(null);\n      fetchFn();\n    },\n    [actions, dispatch],\n  );\n\n  const contextValue = useMemo(\n    () => ({\n      fetchExperiments,\n      isLoadingExperiment,\n      requestError: requestError,\n      actions,\n    }),\n    [actions, fetchExperiments, isLoadingExperiment, requestError],\n  );\n\n  const renderFn = (_isLoading: false, _renderError: any, requests: any[]) => {\n    /**\n     * TODO:\n     * Defer setting this state because currently it might happen inside\n     * RequestStateWrapper's render function which causes React to act up.\n     * Either rebuild RequestStateWrapper or introduce some workaround.\n     */\n    setIsLoadingExperiment(\n      requests.some((r) => fetchExperimentsRequestIds.includes(r.id) && r.active),\n    );\n\n    if (!requestError) {\n      requests.forEach((request) => {\n        if (request.error) {\n          setRequestError(request.error);\n        }\n      });\n    }\n\n    return children;\n  };\n\n  return (\n    <GetExperimentsContext.Provider value={contextValue}>\n      <RequestStateWrapper\n        shouldOptimisticallyRender\n        // eslint-disable-next-line no-trailing-spaces\n        requestIds={fetchExperimentsRequestIds}\n      >\n        {renderFn}\n      </RequestStateWrapper>\n    </GetExperimentsContext.Provider>\n  );\n};\n","var _desc, _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPermissionDeniedLock(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"58px\",\n    height: \"75px\",\n    viewBox: \"0 0 58 75\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Privacy_Lock\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"EmptyState\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"ErrorPage-noPermission\",\n    transform: \"translate(-691.000000, -194.000000)\",\n    fill: \"#43C8EC\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Privacy_Lock\",\n    transform: \"translate(691.000000, 194.250000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.8,24.31 L45.8,17.16 C45.8,7.84295627 38.2470437,0.29 28.93,0.29 C19.6129563,0.29 12.06,7.84295627 12.06,17.16 L12.06,24.3 L0.14,24.3 L0.14,74.64 L57.71,74.64 L57.71,24.31 L45.8,24.31 Z M14.05,17.16 C14.05,8.94752577 20.7075258,2.29 28.92,2.29 C37.1324742,2.29 43.79,8.94752577 43.79,17.16 L43.79,24.3 L14.05,24.3 L14.05,17.16 Z M55.71,72.64 L2.14,72.64 L2.14,26.31 L55.71,26.31 L55.71,72.64 Z\",\n    id: \"Shape\",\n    fillRule: \"nonzero\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.93,37.33 C26.5550177,37.3567611 24.5749652,39.154747 24.319954,41.5161505 C24.0649429,43.8775541 25.6154871,46.0568139 27.93,46.59 L27.93,62.54 L29.93,62.54 L29.93,46.6 C32.2445129,46.0668139 33.7950571,43.8875541 33.540046,41.5261505 C33.2850348,39.164747 31.3049823,37.3667611 28.93,37.34 L28.93,37.33 Z\",\n    id: \"Path\"\n  }))))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPermissionDeniedLock);\nexport default __webpack_public_path__ + \"static/media/permission-denied-lock.16036747d57cd663d7df223781a447b2.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport permissionDeniedLock from '../../common/static/permission-denied-lock.svg';\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nconst defaultMessage = 'The current user does not have permission to view this page.';\n\nexport function PermissionDeniedView({ errorMessage }) {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div className='center'>\n      <img\n        style={{ height: 300, marginTop: 80 }}\n        src={permissionDeniedLock}\n        alt='permission denied'\n      />\n      <h1 style={{ paddingTop: 10 }}>Permission Denied</h1>\n      <h2 data-testid='error-message' css={{ color: theme.colors.textSecondary }}>\n        {errorMessage || defaultMessage}\n      </h2>\n    </div>\n  );\n}\n\nPermissionDeniedView.propTypes = {\n  errorMessage: PropTypes.string,\n};\n","import React from 'react';\n\nexport interface ExperimentViewArtifactLocationProps {\n  artifactLocation: string;\n}\n\nexport const ExperimentViewArtifactLocation = ({\n  artifactLocation,\n}: ExperimentViewArtifactLocationProps) => {\n  return <>{artifactLocation}</>;\n};\n","import { Typography } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentEntity } from '../../../types';\nimport { ExperimentViewArtifactLocation } from './ExperimentViewArtifactLocation';\n\nexport const ExperimentViewDescriptions = React.memo(\n  ({ experiment }: { experiment: ExperimentEntity }) => (\n    <div css={styles.container}>\n      <Typography.Text color='secondary'>\n        <FormattedMessage\n          defaultMessage='Experiment ID'\n          description='Label for displaying the current experiment in view'\n        />\n        : {experiment.experiment_id}\n      </Typography.Text>\n      <Typography.Text color='secondary'>\n        <FormattedMessage\n          defaultMessage='Artifact Location'\n          description='Label for displaying the experiment artifact location'\n        />\n        : <ExperimentViewArtifactLocation artifactLocation={experiment.artifact_location} />\n      </Typography.Text>\n    </div>\n  ),\n);\n\nconst styles = {\n  container: (theme: Theme) => ({\n    display: 'flex' as const,\n    gap: theme.spacing.lg,\n  }),\n};\n","import { useContext } from 'react';\n\nimport { GetExperimentsContext } from '../contexts/GetExperimentsContext';\n\nexport const useFetchExperiments = () => {\n  const getExperimentsContext = useContext(GetExperimentsContext);\n\n  if (!getExperimentsContext) {\n    throw new Error('Trying to use GetExperimentsContext actions outside of the context!');\n  }\n\n  return getExperimentsContext;\n};\n","import { Button } from '@databricks/design-system';\nimport React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { CollapsibleSection } from '../../../../common/components/CollapsibleSection';\nimport { EditableNote } from '../../../../common/components/EditableNote';\nimport { getExperimentTags } from '../../../reducers/Reducers';\nimport { ExperimentEntity, KeyValueEntity } from '../../../types';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { useAsyncDispatch } from '../hooks/useAsyncDispatch';\nimport { useFetchExperiments } from '../hooks/useFetchExperiments';\n\nconst extractNoteFromTags = (tags: Record<string, KeyValueEntity>) =>\n  Object.values(tags).find((t) => t.getKey() === NOTE_CONTENT_TAG)?.value || undefined;\n\nexport interface ExperimentViewNotesProps {\n  experiment: ExperimentEntity;\n}\n\n/**\n * ExperimentView part responsible for displaying/editing note.\n *\n * Consumes note from the redux store and dispatches\n * `setExperimentTagApi` redux action from the context.\n */\nexport const ExperimentViewNotes = React.memo(({ experiment }: ExperimentViewNotesProps) => {\n  const storedNote = useSelector((state) => {\n    const tags = getExperimentTags(experiment.experiment_id, state);\n    return tags ? extractNoteFromTags(tags) : '';\n  });\n\n  const [showNotesEditor, setShowNotesEditor] = useState(false);\n\n  const {\n    actions: { setExperimentTagApi },\n  } = useFetchExperiments();\n\n  const dispatch = useAsyncDispatch();\n\n  const handleSubmitEditNote = useCallback(\n    (updatedNote: any) => {\n      const action = setExperimentTagApi(experiment.experiment_id, NOTE_CONTENT_TAG, updatedNote);\n      dispatch(action).then(() => setShowNotesEditor(false));\n    },\n    [experiment.experiment_id, setExperimentTagApi, dispatch],\n  );\n\n  return (\n    <CollapsibleSection\n      title={\n        <span css={styles.collapsibleSectionHeader}>\n          <FormattedMessage\n            defaultMessage='Description'\n            description='Header for displaying notes for the experiment table'\n          />{' '}\n          {!showNotesEditor && (\n            <Button type='link' onClick={() => setShowNotesEditor(true)}>\n              <FormattedMessage\n                defaultMessage='Edit'\n                // eslint-disable-next-line max-len\n                description='Text for the edit button next to the description section title on the experiment view page'\n              />\n            </Button>\n          )}\n        </span>\n      }\n      forceOpen={showNotesEditor}\n      defaultCollapsed={!storedNote}\n      data-test-id='experiment-notes-section'\n    >\n      <EditableNote\n        defaultMarkdown={storedNote}\n        onSubmit={handleSubmitEditNote}\n        onCancel={() => setShowNotesEditor(false)}\n        showEditor={showNotesEditor}\n      />\n    </CollapsibleSection>\n  );\n});\n\nconst styles = {\n  collapsibleSectionHeader: {\n    height: '32px',\n    lineHeight: '32px',\n  },\n};\n","import { CopyIcon, Typography } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Experiment page header part responsible for copying\n * the title after clicking on the icon\n */\nexport const ExperimentViewCopyTitle = ({ experiment }: { experiment: ExperimentEntity }) => {\n  const intl = useIntl();\n\n  return (\n    <Typography.Text\n      size='xl'\n      dangerouslySetAntdProps={{\n        copyable: {\n          text: experiment.name,\n          icon: <CopyIcon />,\n          tooltips: [\n            intl.formatMessage({\n              defaultMessage: 'Copy path',\n              description: 'Copy tooltip to copy experiment path from experiment runs table header',\n            }),\n            intl.formatMessage({\n              defaultMessage: 'Path copied',\n              description:\n                'Tooltip displayed after experiment path was successfully copied to clipboard',\n            }),\n          ],\n        },\n      }}\n    />\n  );\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, Tooltip } from '@databricks/design-system';\n\nexport const CopyButton = ({ copyText }) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <Tooltip\n      title={\n        <FormattedMessage\n          defaultMessage='Copied'\n          description='Tooltip text shown when copy operation completes'\n        />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button type='primary' onClick={handleClick} onMouseLeave={handleMouseLeave}>\n        <FormattedMessage defaultMessage='Copy' description='Button text for copy button' />\n      </Button>\n    </Tooltip>\n  );\n};\n\nCopyButton.propTypes = {\n  copyText: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from '@databricks/design-system';\nimport { CopyButton } from './CopyButton';\n\nexport const CopyBox = ({ copyText }) => (\n  <div css={{ display: 'flex', gap: 4 }}>\n    <Input readOnly value={copyText} data-test-id='copy-box' />\n    <CopyButton copyText={copyText} />\n  </div>\n);\n\nCopyBox.propTypes = {\n  copyText: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { Modal } from '@databricks/design-system';\nimport { CopyBox } from '../../../shared/building_blocks/CopyBox';\n\nexport const GetLinkModal = ({ visible, onCancel, link }) => {\n  return (\n    <Modal\n      title={\n        <FormattedMessage defaultMessage='Get Link' description={'Title text for get-link modal'} />\n      }\n      visible={visible}\n      onCancel={onCancel}\n    >\n      <CopyBox copyText={link} />\n    </Modal>\n  );\n};\n\nGetLinkModal.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  link: PropTypes.string.isRequired,\n};\n","import { Button } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { GetLinkModal } from '../../../modals/GetLinkModal';\n\n/**\n * Experiment page header part responsible for displaying button\n * that displays modal for sharing the link\n */\nexport const ExperimentViewHeaderShareButton = () => {\n  const [showGetLinkModal, setShowGetLinkModal] = useState(false);\n\n  return (\n    <>\n      <GetLinkModal\n        link={window.top?.location.href || window.location.href}\n        visible={showGetLinkModal}\n        onCancel={() => setShowGetLinkModal(false)}\n      />\n      {/* TODO: ensure that E2E tests are working after refactor is complete */}\n      <Button type='primary' onClick={() => setShowGetLinkModal(true)} data-test-id='share-button'>\n        <FormattedMessage\n          defaultMessage='Share'\n          description='Text for share button on experiment view page header'\n        />\n      </Button>\n    </>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport { Theme } from '@emotion/react';\nimport { Button, Popover } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { PageHeader } from '../../../../../shared/building_blocks/PageHeader';\nimport { ExperimentViewCopyTitle } from './ExperimentViewCopyTitle';\nimport { ExperimentViewHeaderShareButton } from './ExperimentViewHeaderShareButton';\nimport { ExperimentEntity } from '../../../../types';\nimport { shouldUseNextRunsComparisonUI } from '../../../../../common/utils/FeatureUtils';\nimport { useExperimentPageFeedbackUrl } from '../../hooks/useExperimentPageFeedbackUrl';\n\n/**\n * Header for a single experiment page. Displays title, breadcrumbs and provides\n * controls for renaming, deleting and editing permissions.\n */\nexport const ExperimentViewHeader = React.memo(\n  ({ experiment }: { experiment: ExperimentEntity }) => {\n    // eslint-disable-next-line prefer-const\n    let breadcrumbs: React.ReactNode[] = [];\n\n    /**\n     * Extract the last part of the experiment name\n     */\n    const normalizedExperimentName = useMemo(\n      () => experiment.name.split('/').pop(),\n      [experiment.name],\n    );\n\n    const feedbackFormUrl = useExperimentPageFeedbackUrl();\n\n    /* eslint-disable prettier/prettier */\n    return (\n      <PageHeader\n        title={\n          <div css={styles.headerWrapper}>\n            {normalizedExperimentName} <ExperimentViewCopyTitle experiment={experiment} />{' '}\n            {Boolean(shouldUseNextRunsComparisonUI() && feedbackFormUrl) && (\n                <a href={feedbackFormUrl} target='_blank' rel='noreferrer'>\n                  <Button css={{ marginLeft: 16 }} type='link' size='small'>\n                    <FormattedMessage\n                      defaultMessage='Provide Feedback'\n                      description='Link to a survey for users to give feedback'\n                    />\n                  </Button>\n                </a>\n            )}\n          </div>\n        }\n        breadcrumbs={breadcrumbs}\n      >\n          <ExperimentViewHeaderShareButton />\n      </PageHeader>\n    );\n    /* eslint-enable prettier/prettier */\n  },\n);\n\nconst styles = {\n  sendFeedbackPopoverContent: {\n    display: 'flex',\n    maxWidth: 250,\n    flexDirection: 'column' as const,\n    alignItems: 'flex-end',\n  },\n  headerWrapper: (theme: Theme) => ({\n    display: 'inline-flex',\n    gap: theme.spacing.sm,\n    alignItems: 'center',\n  }),\n};\n","import React, { useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { PageHeader } from '../../../../../shared/building_blocks/PageHeader';\nimport { ExperimentViewHeaderShareButton } from './ExperimentViewHeaderShareButton';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Header for experiment compare page. Displays title and breadcrumbs.\n */\nexport const ExperimentViewHeaderCompare = React.memo(\n  ({ experiments }: { experiments: ExperimentEntity[] }) => {\n    const pageTitle = useMemo(\n      () => (\n        <FormattedMessage\n          defaultMessage='Displaying Runs from {numExperiments} Experiments'\n          description='Message shown when displaying runs from multiple experiments'\n          values={{\n            numExperiments: experiments.length,\n          }}\n        />\n      ),\n      [experiments.length],\n    );\n\n    // eslint-disable-next-line prefer-const\n    let breadcrumbs: React.ReactNode[] = [];\n\n    /* eslint-disable prettier/prettier */\n    return (\n      <PageHeader title={pageTitle} breadcrumbs={breadcrumbs}>\n        <ExperimentViewHeaderShareButton />\n      </PageHeader>\n    );\n    /* eslint-enable prettier/prettier */\n  },\n);\n","/**\n * Type definitions for models used in experiment tracking.\n * See 'src/experiment-tracking/sdk/MlflowMessages.js' for reference\n *\n * Note: this could be automatically generated in the future.\n */\n\nimport { SearchExperimentRunsFacetsState } from './components/experiment-page/models/SearchExperimentRunsFacetsState';\nimport { SearchExperimentRunsViewState } from './components/experiment-page/models/SearchExperimentRunsViewState';\n\n/**\n * Simple key/value model enhanced with immutable.js\n * getter methods\n */\nexport interface KeyValueEntity {\n  key: string;\n  value: string;\n\n  getKey(): string;\n  getValue(): string;\n}\n\n/**\n * An entity defining a single model entity\n */\nexport interface ModelInfoEntity {\n  name: string;\n  version: string;\n  creation_timestamp: number;\n  last_updated_timestamp: number;\n  user_id: string;\n  current_stage: string;\n  source: string;\n  run_id: string;\n  status: string;\n  permission_level: string;\n  email_subscription_status: string;\n}\n\nexport interface RunInfoEntity {\n  artifact_uri: string;\n  end_time: number;\n  experiment_id: string;\n  lifecycle_stage: string;\n  run_uuid: string;\n  run_name: string;\n  start_time: number;\n  status: string;\n\n  getArtifactUri(): string;\n  getEndTime(): string;\n  getExperimentId(): string;\n  getLifecycleStage(): string;\n  getRunUuid(): string;\n  getStartTime(): string;\n  getStatus(): string;\n}\n\nexport interface MetricEntity {\n  key: string;\n  step: number;\n  timestamp: number;\n  value: string | number;\n\n  getKey(): string;\n  getStep(): string;\n  getTimestamp(): string;\n  getValue(): string | number;\n}\n\nexport type MetricEntitiesByName = Record<string, MetricEntity>;\nexport type MetricHistoryByName = Record<string, MetricEntity[]>;\n\nexport interface ExperimentEntity {\n  allowed_actions: string[];\n  artifact_location: string;\n  creation_time: number;\n  experiment_id: string;\n  last_update_time: number;\n  lifecycle_stage: string;\n  name: string;\n  tags: KeyValueEntity[];\n\n  getAllowedActions(): string[];\n  getArtifactLocation(): string;\n  getCreationTime(): number;\n  getExperimentId(): string;\n  getLastUpdateTime(): number;\n  getLifecycleStage(): string;\n  getName(): string;\n  getTags(): KeyValueEntity[];\n}\n\nexport interface ExperimentStoreEntities {\n  /**\n   * Dictionary with experiment ID as key and entity object as a value\n   */\n  experimentsById: Record<string, ExperimentEntity>;\n\n  /**\n   * Dictionary with run UUID as key and run info object as a value\n   */\n  runInfosByUuid: Record<string, RunInfoEntity>;\n\n  /**\n   * Dictionary with run UUID as key and metric sub-dictionary as a value.\n   * Represents all metrics with history.\n   */\n  metricsByRunUuid: Record<string, MetricHistoryByName>;\n\n  /**\n   * Dictionary with run UUID as key and metric sub-dictionary as a value\n   * Represents latest metrics (e.g. fetched along run history).\n   */\n  latestMetricsByRunUuid: Record<string, MetricEntitiesByName>;\n\n  /**\n   * Dictionary with run UUID as key and metric sub-dictionary as a value\n   * Represents metrics with min value.\n   */\n  minMetricsByRunUuid: Record<string, MetricEntitiesByName>;\n\n  /**\n   * Dictionary with run UUID as key and metric sub-dictionary as a value\n   * Represents metrics with max value.\n   */\n  maxMetricsByRunUuid: Record<string, MetricEntitiesByName>;\n\n  /**\n   * Dictionary of parameters for runs. Run UUID is a first key,\n   * param name is the second one.\n   */\n  paramsByRunUuid: Record<string, Record<string, KeyValueEntity>>;\n\n  /**\n   * Dictionary of tags for runs. Run UUID serves is a first key,\n   * tag name is the second one.\n   */\n  tagsByRunUuid: Record<string, Record<string, KeyValueEntity>>;\n\n  /**\n   * Dictionary of tags for experiments. Experiment ID serves is a first key,\n   * tag name is the second one.\n   */\n  experimentTagsByExperimentId: Record<string, Record<string, KeyValueEntity>>;\n\n  /**\n   * Dictionary of models. Model name is the first key, model version is the second one.\n   * Model entity object is the value.\n   */\n  modelVersionsByModel: Record<string, Record<string, ModelInfoEntity>>;\n\n  /**\n   * Dictionary of models for runs. Run UUID is the key, used model entity object is the value.\n   */\n  modelVersionsByRunUuid: Record<string, ModelInfoEntity[]>;\n\n  /**\n   * List of all runs that match recently used filter. Runs that were fetched because they are\n   * pinned (not because they fit the filter) are excluded from this list.\n   */\n  runUuidsMatchingFilter: string[];\n}\n\nexport enum LIFECYCLE_FILTER {\n  ACTIVE = 'Active',\n  DELETED = 'Deleted',\n}\n\nexport enum MODEL_VERSION_FILTER {\n  WITH_MODEL_VERSIONS = 'With Model Versions',\n  WTIHOUT_MODEL_VERSIONS = 'Without Model Versions',\n  ALL_RUNS = 'All Runs',\n}\n\nexport type ExperimentCategorizedUncheckedKeys = {\n  attributes: string[];\n  metrics: string[];\n  params: string[];\n  tags: string[];\n};\n\n/**\n * Function used to update the filter set and fetch new set of runs.\n * First parameter is the subset of fields that the current sort/filter model will be merged with.\n * If the second parameter is set to true, it will force re-fetching even if there\n * are no sufficient changes to the model.\n */\nexport type UpdateExperimentSearchFacetsFn = (\n  newFilterModel:\n    | Partial<SearchExperimentRunsFacetsState>\n    | React.SetStateAction<SearchExperimentRunsFacetsState>,\n  updateOptions?: {\n    forceRefresh?: boolean;\n    preservePristine?: boolean;\n    replaceHistory?: boolean;\n  },\n) => void;\n\n/**\n * Function used to update the local (non-persistable) view state.\n * First parameter is the subset of fields that the current view state model will be merged with.\n */\nexport type UpdateExperimentViewStateFn = (\n  newPartialViewState: Partial<SearchExperimentRunsViewState>,\n) => void;\n","import {\n  ExperimentEntity,\n  ExperimentStoreEntities,\n  KeyValueEntity,\n  LIFECYCLE_FILTER,\n  ModelInfoEntity,\n  MODEL_VERSION_FILTER,\n  RunInfoEntity,\n} from '../../../types';\nimport { getLatestMetrics } from '../../../reducers/MetricReducer';\nimport { getExperimentTags, getParams, getRunInfo, getRunTags } from '../../../reducers/Reducers';\n\nexport type ExperimentRunsSelectorResult = {\n  /**\n   * Array of run infos\n   */\n  runInfos: RunInfoEntity[];\n\n  /**\n   * List of unique metric keys\n   */\n  runUuidsMatchingFilter: string[];\n\n  /**\n   * List of unique metric keys\n   */\n  metricKeyList: string[];\n\n  /**\n   * List of unique param keys\n   */\n  paramKeyList: string[];\n\n  /**\n   * List of metrics indexed by the respective runs.\n   * Example: metricsList[2] contains list of all\n   * metrics corresponding to the 3rd run in the run list\n   */\n  metricsList: KeyValueEntity[][];\n\n  /**\n   * List of metrics indexed by the respective runs.\n   * Example: paramsList[2] contains list of all\n   * params corresponding to the 3rd run in the run list\n   */\n  paramsList: KeyValueEntity[][];\n\n  /**\n   * List of tags indexed by the respective runs.\n   * Example: tagsList[2] contains dictionary of all\n   * tags corresponding to the 3rd run in the run list\n   */\n  tagsList: Record<string, KeyValueEntity>[];\n\n  /**\n   * Dictionary containing model information objects indexed by run uuid\n   */\n  modelVersionsByRunUuid: Record<string, ModelInfoEntity[]>;\n\n  /**\n   * Dictionary containing all tags assigned to a experiment\n   * (single experiment only)\n   */\n  experimentTags: Record<string, KeyValueEntity>;\n};\n\nexport type ExperimentRunsSelectorParams = {\n  experiments: ExperimentEntity[];\n  lifecycleFilter?: LIFECYCLE_FILTER;\n  modelVersionFilter?: MODEL_VERSION_FILTER;\n};\n\n/**\n * Extracts run infos filtered by lifecycle filter and model version filter\n */\nconst extractRunInfos = (\n  runUuids: string[],\n  state: { entities: ExperimentStoreEntities },\n  {\n    lifecycleFilter = LIFECYCLE_FILTER.ACTIVE,\n    modelVersionFilter = MODEL_VERSION_FILTER.ALL_RUNS,\n  }: ExperimentRunsSelectorParams,\n): RunInfoEntity[] => {\n  const { modelVersionsByRunUuid } = state.entities;\n\n  return (\n    runUuids\n      // Get the basic run info\n      .map((run_id) => getRunInfo(run_id, state))\n      // Filter out runs by given lifecycle filter\n      .filter((rInfo) => {\n        if (lifecycleFilter === LIFECYCLE_FILTER.ACTIVE) {\n          return rInfo.lifecycle_stage === 'active';\n        } else {\n          return rInfo.lifecycle_stage === 'deleted';\n        }\n      })\n      // Filter out runs by given model version filter\n      .filter((rInfo) => {\n        if (modelVersionFilter === MODEL_VERSION_FILTER.ALL_RUNS) {\n          return true;\n        } else if (modelVersionFilter === MODEL_VERSION_FILTER.WITH_MODEL_VERSIONS) {\n          return rInfo.run_uuid in modelVersionsByRunUuid;\n        } else if (modelVersionFilter === MODEL_VERSION_FILTER.WTIHOUT_MODEL_VERSIONS) {\n          return !(rInfo.run_uuid in modelVersionsByRunUuid);\n        } else {\n          console.warn('Invalid input to model version filter - defaulting to showing all runs.');\n          return true;\n        }\n      })\n  );\n};\n\nexport const experimentRunsSelector = (\n  state: { entities: ExperimentStoreEntities },\n  params: ExperimentRunsSelectorParams,\n): ExperimentRunsSelectorResult => {\n  const { experiments } = params;\n  const experimentIds = experiments.map((e) => e.experiment_id);\n  const comparingExperiments = experimentIds.length > 1;\n\n  /**\n   * Extract run UUIDs relevant to selected experiments\n   */\n  const runUuids = Object.values(state.entities.runInfosByUuid)\n    .filter(({ experiment_id }) => experimentIds.includes(experiment_id))\n    .map(({ run_uuid }) => run_uuid);\n\n  /**\n   * Extract model version and runs matching filter directly from the store\n   */\n  const { modelVersionsByRunUuid, runUuidsMatchingFilter } = state.entities;\n\n  /**\n   * Extract run infos\n   */\n  const runInfos = extractRunInfos(runUuids, state, params);\n\n  /**\n   * Set of unique metric keys\n   */\n  const metricKeysSet = new Set<string>();\n\n  /**\n   * Set of unique param keys\n   */\n  const paramKeysSet = new Set<string>();\n\n  /**\n   * Extracting lists of metrics by run index\n   */\n  const metricsList = runInfos.map((runInfo) => {\n    const metricsByRunUuid = getLatestMetrics(runInfo.run_uuid, state);\n    const metrics = Object.values(metricsByRunUuid || {}) as any[];\n    metrics.forEach((metric) => {\n      metricKeysSet.add(metric.key);\n    });\n    return metrics;\n  }) as KeyValueEntity[][];\n\n  /**\n   * Extracting lists of params by run index\n   */\n  const paramsList = runInfos.map((runInfo) => {\n    const paramValues = Object.values(getParams(runInfo.run_uuid, state)) as any[];\n    paramValues.forEach((param) => {\n      paramKeysSet.add(param.key);\n    });\n    return paramValues;\n  }) as KeyValueEntity[][];\n\n  /**\n   * Extracting dictionaries of tags by run index\n   */\n  const tagsList = runInfos.map((runInfo) => getRunTags(runInfo.run_uuid, state)) as Record<\n    string,\n    KeyValueEntity\n  >[];\n\n  const firstExperimentId = experimentIds[0];\n\n  /**\n   * If there is only one experiment, extract experiment tags as well\n   */\n  const experimentTags = (\n    comparingExperiments ? {} : getExperimentTags(firstExperimentId, state)\n  ) as Record<string, KeyValueEntity>;\n\n  return {\n    modelVersionsByRunUuid,\n    experimentTags,\n    runInfos,\n    paramsList,\n    tagsList,\n    metricsList,\n    runUuidsMatchingFilter,\n    metricKeyList: Array.from(metricKeysSet.values()).sort(),\n    paramKeyList: Array.from(paramKeysSet.values()).sort(),\n  };\n};\n","import { SortAscendingIcon, SortDescendingIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React from 'react';\n\nexport interface ColumnHeaderCellProps {\n  enableSorting: boolean;\n  displayName: string;\n  canonicalSortKey: string;\n  orderByAsc: boolean;\n  orderByKey: string;\n  onSortBy: (sortKey: string, newOrder: boolean) => void;\n  getClassName: (sortKey: string) => string;\n}\n\nexport class ColumnHeaderCell extends React.Component<ColumnHeaderCellProps> {\n  handleSortBy() {\n    const { canonicalSortKey, orderByAsc, orderByKey } = this.props;\n    let newOrderByAsc = !orderByAsc;\n\n    // If the new sortKey is not equal to the previous sortKey, reset the orderByAsc\n    if (canonicalSortKey !== orderByKey) {\n      newOrderByAsc = false;\n    }\n\n    this.props.onSortBy(canonicalSortKey, newOrderByAsc);\n  }\n\n  render() {\n    const {\n      enableSorting,\n      canonicalSortKey,\n      displayName,\n      getClassName = () => '',\n      orderByKey,\n      orderByAsc,\n    } = this.props;\n\n    return (\n      // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/interactive-supports-focus\n      <div\n        role='columnheader'\n        css={styles.headerLabelWrapper(enableSorting)}\n        className={getClassName(canonicalSortKey)}\n        onClick={enableSorting ? () => this.handleSortBy() : undefined}\n      >\n        <span data-test-id={`sort-header-${displayName}`}>{displayName}</span>\n        {enableSorting && canonicalSortKey === orderByKey ? (\n          orderByAsc ? (\n            <SortAscendingIcon />\n          ) : (\n            <SortDescendingIcon />\n          )\n        ) : null}\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  headerLabelWrapper: (sortable: boolean) => (theme: Theme) => ({\n    height: '100%',\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: '0 12px',\n    svg: {\n      color: theme.colors.textSecondary,\n    },\n    '&:hover': {\n      color: sortable ? theme.colors.actionTertiaryTextHover : 'unset',\n      svg: {\n        color: theme.colors.actionTertiaryTextHover,\n      },\n    },\n  }),\n\n  headerSortIcon: {\n    marginRight: 4,\n  },\n};\n","import { CheckCircleIcon, ClockIcon, XCircleIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowDateAndNestInfo } from '../../../utils/experimentPage.row-types';\n\nconst ErrorIcon = () => (\n  <XCircleIcon css={(theme) => ({ color: theme.colors.textValidationDanger })} />\n);\n\nconst FinishedIcon = () => (\n  <CheckCircleIcon css={(theme) => ({ color: theme.colors.textValidationSuccess })} />\n);\n\nconst getRunStatusIcon = (status: string) => {\n  switch (status) {\n    case 'FAILED':\n    case 'KILLED':\n      return <ErrorIcon />;\n    case 'FINISHED':\n      return <FinishedIcon />;\n    case 'SCHEDULED':\n      return <ClockIcon />; // This one is the same color as the link\n    default:\n      return null;\n  }\n};\n\nexport interface DateCellRendererProps {\n  value: RunRowDateAndNestInfo;\n}\n\nexport const DateCellRenderer = React.memo(\n  ({ value: { startTime, referenceTime, runStatus } }: DateCellRendererProps) => {\n    return (\n      <span css={styles.cellWrapper} title={Utils.formatTimestamp(startTime)}>\n        {getRunStatusIcon(runStatus)}\n        {Utils.timeSinceStr(startTime, referenceTime)}\n      </span>\n    );\n  },\n);\n\nconst styles = {\n  cellWrapper: (theme: Theme) => ({\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing.sm,\n    svg: {\n      width: 14,\n      height: 14,\n    },\n  }),\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Routes from '../../../../../routes';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\n\nexport interface ExperimentNameCellRendererProps {\n  value: {\n    name: string;\n    basename: string;\n  };\n  data: RunRowType;\n}\n\nexport const ExperimentNameCellRenderer = React.memo(\n  ({ data, value }: ExperimentNameCellRendererProps) => (\n    <Link to={Routes.getExperimentPageRoute(data.experimentId)} title={value.name}>\n      {value.basename}\n    </Link>\n  ),\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@databricks/design-system';\n\nexport const TrimmedText = ({ text, maxSize, className, allowShowMore = false }) => {\n  if (text.length <= maxSize) {\n    return <span className={className}>{text}</span>;\n  }\n  const trimmedText = `${text.substr(0, maxSize)}...`;\n  // Reported during ESLint upgrade\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [showMore, setShowMore] = useState(false);\n  return (\n    <span className={className}>\n      {showMore ? text : trimmedText}\n      {allowShowMore && (\n        <Button\n          type='link'\n          onClick={() => setShowMore(!showMore)}\n          size='small'\n          css={styles.expandButton}\n          data-test-id='trimmed-text-button'\n        >\n          {showMore ? 'collapse' : 'expand'}\n        </Button>\n      )}\n    </span>\n  );\n};\n\nconst styles = {\n  expandButton: {\n    display: 'inline-block',\n  },\n};\n\nTrimmedText.propTypes = {\n  text: PropTypes.string.isRequired,\n  maxSize: PropTypes.number.isRequired,\n  className: PropTypes.string.isRequired,\n  allowShowMore: PropTypes.bool,\n};\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLoggedModel(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 12,\n    height: 14,\n    viewBox: \"0 0 12 14\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M7.7265 0.726585C7.47317 0.473252 7.13317 0.333252 6.77984 0.333252H1.99984C1.2665 0.333252 0.666504 0.933252 0.666504 1.66659V12.3333C0.666504 13.0666 1.25984 13.6666 1.99317 13.6666H9.99984C10.7332 13.6666 11.3332 13.0666 11.3332 12.3333V4.88658C11.3332 4.53325 11.1932 4.19325 10.9398 3.94659L7.7265 0.726585ZM6.66648 4.33333V1.33333L10.3331 5H7.33315C6.96648 5 6.66648 4.7 6.66648 4.33333ZM5.99982 6.33333C5.99982 6.64213 5.92984 6.93457 5.80487 7.19568L7.13747 8.52828C7.39858 8.40331 7.69103 8.33333 7.99982 8.33333C9.10439 8.33333 9.99982 9.22876 9.99982 10.3333C9.99982 11.4379 9.10439 12.3333 7.99982 12.3333C6.89525 12.3333 5.99982 11.4379 5.99982 10.3333C5.99982 10.0246 6.06977 9.7322 6.1947 9.47113L4.86202 8.13845C4.60095 8.26338 4.30855 8.33333 3.99982 8.33333C2.89525 8.33333 1.99982 7.4379 1.99982 6.33333C1.99982 5.22876 2.89525 4.33333 3.99982 4.33333C5.10439 4.33333 5.99982 5.22876 5.99982 6.33333ZM3.99982 7.00008C4.36801 7.00008 4.66648 6.7016 4.66648 6.33342C4.66648 5.96523 4.36801 5.66675 3.99982 5.66675C3.63163 5.66675 3.33315 5.96523 3.33315 6.33342C3.33315 6.7016 3.63163 7.00008 3.99982 7.00008ZM8.66648 10.3334C8.66648 10.7016 8.36801 11.0001 7.99982 11.0001C7.63163 11.0001 7.33315 10.7016 7.33315 10.3334C7.33315 9.96522 7.63163 9.66675 7.99982 9.66675C8.36801 9.66675 8.66648 9.96522 8.66648 10.3334Z\",\n    fill: \"#6B6B6B\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLoggedModel);\nexport default __webpack_public_path__ + \"static/media/logged-model.dd9b21ff4fb07f3cadeada8046a2693b.svg\";\nexport { ForwardRef as ReactComponent };","var _circle, _circle2, _circle3, _circle4, _line, _line2, _line3, _line4, _line5;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgRegisteredModel(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 14,\n    height: 14,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 9,\n    cy: 20,\n    r: 2,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 4,\n    cy: 7,\n    r: 2,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 20,\n    cy: 4,\n    r: 2,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _circle4 || (_circle4 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 19,\n    cy: 15,\n    r: 2,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 8.05132,\n    y1: 18.3162,\n    x2: 5.05132,\n    y2: 9.31623,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _line2 || (_line2 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 5.77514,\n    y1: 7.02561,\n    x2: 18.7751,\n    y2: 4.02561,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _line3 || (_line3 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 19.0101,\n    y1: 12.8586,\n    x2: 20.01,\n    y2: 5.85858,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _line4 || (_line4 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 11.5528,\n    y1: 19.1056,\n    x2: 17.5528,\n    y2: 16.1056,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _line5 || (_line5 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 17.5528,\n    y1: 13.8944,\n    x2: 5.55279,\n    y2: 7.89443,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgRegisteredModel);\nexport default __webpack_public_path__ + \"static/media/registered-model.24429a4f6158e57b01b3928e2605aa25.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport { TrimmedText } from '../../../../../../common/components/TrimmedText';\nimport loggedModelSvg from '../../../../../../common/static/logged-model.svg';\nimport registeredModelSvg from '../../../../../../common/static/registered-model.svg';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { getModelVersionPageRoute } from '../../../../../../model-registry/routes';\nimport Routes from '../../../../../routes';\nimport { RunRowModelsInfo } from '../../../utils/experimentPage.row-types';\n\nconst EMPTY_CELL_PLACEHOLDER = '-';\n\nexport interface ModelsCellRendererProps {\n  value: RunRowModelsInfo;\n}\n\nexport const ModelsCellRenderer = React.memo((props: ModelsCellRendererProps) => {\n  const { registeredModels, loggedModels, experimentId, runUuid } = props.value;\n  const models = Utils.mergeLoggedAndRegisteredModels(loggedModels, registeredModels);\n\n  if (models && models.length) {\n    const modelToRender = models[0];\n    let modelDiv;\n    if (modelToRender.registeredModelName) {\n      const { registeredModelName, registeredModelVersion } = modelToRender;\n      modelDiv = (\n        <>\n          <img\n            data-test-id='registered-model-icon'\n            alt=''\n            title='Registered Model'\n            src={registeredModelSvg}\n          />\n          <a\n            href={Utils.getIframeCorrectedRoute(\n              getModelVersionPageRoute(registeredModelName, registeredModelVersion),\n            )}\n            className='registered-model-link'\n            target='_blank'\n            rel='noreferrer'\n          >\n            <TrimmedText text={registeredModelName} maxSize={10} className={'model-name'} />\n            {`/${registeredModelVersion}`}\n          </a>\n        </>\n      );\n    } else if (modelToRender.flavors) {\n      const loggedModelFlavorText = modelToRender.flavors ? modelToRender.flavors[0] : 'Model';\n      const loggedModelLink = Utils.getIframeCorrectedRoute(\n        `${Routes.getRunPageRoute(experimentId, runUuid)}/artifactPath/${\n          modelToRender.artifactPath\n        }`,\n      );\n      modelDiv = (\n        <>\n          <img data-test-id='logged-model-icon' alt='' title='Logged Model' src={loggedModelSvg} />\n          {/* Reported during ESLint upgrade */}\n          {/* eslint-disable-next-line react/jsx-no-target-blank */}\n          <a href={loggedModelLink} target='_blank' className='logged-model-link'>\n            {loggedModelFlavorText}\n          </a>\n        </>\n      );\n    }\n\n    return (\n      <div className='logged-model-cell' css={styles.imageWrapper}>\n        {modelDiv}\n        {loggedModels.length > 1 ? `, ${loggedModels.length - 1} more` : ''}\n      </div>\n    );\n  }\n  return <>{EMPTY_CELL_PLACEHOLDER}</>;\n});\n\nconst styles = {\n  imageWrapper: {\n    img: {\n      height: '15px',\n      position: 'relative' as const,\n      marginRight: '4px',\n    },\n  },\n};\n","import React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\n\nexport const SourceCellRenderer = React.memo(({ value }: { value: RunRowType['tags'] }) => {\n  const sourceType = Utils.renderSource(value, undefined, undefined);\n  return sourceType ? (\n    <>\n      {Utils.renderSourceTypeIcon(value)}\n      {sourceType}\n    </>\n  ) : (\n    <>-</>\n  );\n});\n","import React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowVersionInfo } from '../../../utils/experimentPage.row-types';\n\nexport const VersionCellRenderer = React.memo(\n  ({\n    value: {\n      // Run row version object parameters\n      version,\n      name,\n      type,\n    },\n  }: {\n    value: RunRowVersionInfo;\n  }) =>\n    Utils.renderSourceVersion(\n      // Using function from utils to render the source link\n      version,\n      name,\n      type,\n    ) || <>-</>,\n);\n","import Utils from '../../common/utils/Utils';\nimport { KeyValueEntity, RunInfoEntity } from '../types';\n\nconst { formatTimestamp, getDuration, getRunNameFromTags, getSourceType, getSourceName, getUser } =\n  Utils;\n\n/**\n * Turn a list of params/metrics to a map of metric key to metric.\n */\nconst toMap = (params: KeyValueEntity[]) =>\n  params.reduce(\n    (result, entity) => ({ ...result, [entity.key]: entity }),\n    {} as Record<string, KeyValueEntity>,\n  );\n\n/**\n * Format a string for insertion into a CSV file.\n */\nconst csvEscape = (str: string) => {\n  if (str === undefined) {\n    return '';\n  }\n  if (/[,\"\\r\\n]/.test(str)) {\n    return '\"' + str.replace(/\"/g, '\"\"') + '\"';\n  }\n  return str;\n};\n\n/**\n * Convert a table to a CSV string.\n *\n * @param columns Names of columns\n * @param data Array of rows, each of which are an array of field values\n */\nconst tableToCsv = (columns: any /* TODO */, data: any /* TODO */) => {\n  let csv = '';\n  let i;\n\n  for (i = 0; i < columns.length; i++) {\n    csv += csvEscape(columns[i]);\n    if (i < columns.length - 1) {\n      csv += ',';\n    }\n  }\n  csv += '\\n';\n\n  for (i = 0; i < data.length; i++) {\n    for (let j = 0; j < data[i].length; j++) {\n      csv += csvEscape(data[i][j]);\n      if (j < data[i].length - 1) {\n        csv += ',';\n      }\n    }\n    csv += '\\n';\n  }\n\n  return csv;\n};\n\n/**\n * Convert an array of run infos to a CSV string, extracting the params and metrics in the\n * provided lists.\n */\nexport const runInfosToCsv = (params: {\n  runInfos: RunInfoEntity[];\n  paramKeyList: string[];\n  metricKeyList: string[];\n  tagKeyList: string[];\n  paramsList: KeyValueEntity[][];\n  metricsList: KeyValueEntity[][];\n  tagsList: Record<string, KeyValueEntity>[];\n}) => {\n  const { runInfos, paramKeyList, metricKeyList, tagKeyList, paramsList, metricsList, tagsList } =\n    params;\n\n  const columns = [\n    'Start Time',\n    'Duration',\n    'Run ID',\n    'Name',\n    'Source Type',\n    'Source Name',\n    'User',\n    'Status',\n    ...paramKeyList,\n    ...metricKeyList,\n    ...tagKeyList,\n  ];\n\n  const data = runInfos.map((runInfo, index) => {\n    const row = [\n      formatTimestamp(runInfo.start_time),\n      getDuration(runInfo.start_time, runInfo.end_time) || '',\n      runInfo.run_uuid,\n      runInfo.run_name || getRunNameFromTags(tagsList[index]), // add run name to csv export row\n      getSourceType(tagsList[index]),\n      getSourceName(tagsList[index]),\n      getUser(runInfo, tagsList[index]),\n      runInfo.status,\n    ];\n    const paramsMap = toMap(paramsList[index]);\n    const metricsMap = toMap(metricsList[index]);\n    const tagsMap = tagsList[index];\n\n    paramKeyList.forEach((paramKey) => {\n      if (paramsMap[paramKey]) {\n        row.push(paramsMap[paramKey].value);\n      } else {\n        row.push('');\n      }\n    });\n    metricKeyList.forEach((metricKey) => {\n      if (metricsMap[metricKey]) {\n        row.push(metricsMap[metricKey].value);\n      } else {\n        row.push('');\n      }\n    });\n    tagKeyList.forEach((tagKey) => {\n      if (tagsMap[tagKey]) {\n        row.push(tagsMap[tagKey].value);\n      } else {\n        row.push('');\n      }\n    });\n    return row;\n  });\n\n  return tableToCsv(columns, data);\n};\n","import { IntlShape } from 'react-intl';\nimport { saveAs } from 'file-saver';\nimport { ExperimentEntity } from '../../../types';\nimport { ExperimentRunsSelectorResult } from './experimentRuns.selector';\nimport { runInfosToCsv } from '../../../utils/CsvUtils';\n\nexport const EXPERIMENT_FIELD_PREFIX_PARAM = '$$$param$$$';\nexport const EXPERIMENT_FIELD_PREFIX_METRIC = '$$$metric$$$';\nexport const EXPERIMENT_FIELD_PREFIX_TAG = '$$$tag$$$';\nexport const EXPERIMENT_PARENT_ID_TAG = 'mlflow.parentRunId';\nexport const EXPERIMENT_LOG_MODEL_HISTORY_TAG = 'mlflow.log-model.history';\n\nexport enum RUNS_VISIBILITY_MODE {\n  'SHOWALL' = 'SHOWALL',\n  'HIDEALL' = 'HIDEALL',\n}\n\nconst MLFLOW_NOTEBOOK_TYPE = 'NOTEBOOK';\nconst MLFLOW_EXPERIMENT_TYPE = 'MLFLOW_EXPERIMENT';\n\nconst EXPERIMENT_TYPE_TAG = 'mlflow.experimentType';\n\n/**\n * Function that gets the experiment type for a given experiment object\n */\nexport const getExperimentType = (experiment: ExperimentEntity) => {\n  const experimentType = experiment.tags.find((tag) => tag.key === EXPERIMENT_TYPE_TAG);\n  if (experimentType) {\n    return experimentType.value;\n  }\n  return null;\n};\n\nconst hasExperimentType = (experiment: ExperimentEntity, type: string) =>\n  getExperimentType(experiment) === type;\n\n/**\n * Function returns true if the experiment is of default (\"MLFLOW_EXPERIMENT\") type\n */\nexport const isExperimentTypeDefault = (experiment: ExperimentEntity) =>\n  hasExperimentType(experiment, MLFLOW_EXPERIMENT_TYPE);\n\n/**\n * Function returns true if the experiment is of notebook type\n */\nexport const isExperimentTypeNotebook = (experiment: ExperimentEntity) =>\n  hasExperimentType(experiment, MLFLOW_NOTEBOOK_TYPE);\n\n/**\n * Function that checks if experiment's allowed actions include\n * modification. TODO: fix typo in the const name.\n */\nexport const canModifyExperiment = (experiment: ExperimentEntity) =>\n  experiment.allowed_actions.includes('MODIFIY_PERMISSION');\n\n/**\n * Function used for downloading run data in CSV form.\n */\nexport const downloadRunsCsv = (\n  runsData: ExperimentRunsSelectorResult,\n  filteredTagKeys: string[],\n  filteredParamKeys: string[],\n  filteredMetricKeys: string[],\n) => {\n  const { runInfos, paramsList, metricsList, tagsList } = runsData;\n\n  const csv = runInfosToCsv({\n    runInfos,\n    paramKeyList: filteredParamKeys,\n    metricKeyList: filteredMetricKeys,\n    tagKeyList: filteredTagKeys,\n    paramsList,\n    metricsList,\n    tagsList,\n  });\n  const blob = new Blob([csv], { type: 'application/csv;charset=utf-8' });\n  saveAs(blob, 'runs.csv');\n};\n\n/**\n * Function used for preparing values for \"created\" (start time) runs filter.\n */\nexport const getStartTimeColumnDisplayName = (intl: IntlShape) => ({\n  ALL: intl.formatMessage({\n    defaultMessage: 'All time',\n    description: 'Option for the start select dropdown to render all runs',\n  }),\n  LAST_HOUR: intl.formatMessage({\n    defaultMessage: 'Last hour',\n    description: 'Option for the start select dropdown to filter runs from the last hour',\n  }),\n  LAST_24_HOURS: intl.formatMessage({\n    defaultMessage: 'Last 24 hours',\n    description: 'Option for the start select dropdown to filter runs from the last 24 hours',\n  }),\n  LAST_7_DAYS: intl.formatMessage({\n    defaultMessage: 'Last 7 days',\n    description: 'Option for the start select dropdown to filter runs from the last 7 days',\n  }),\n  LAST_30_DAYS: intl.formatMessage({\n    defaultMessage: 'Last 30 days',\n    description: 'Option for the start select dropdown to filter runs from the last 30 days',\n  }),\n  LAST_YEAR: intl.formatMessage({\n    defaultMessage: 'Last year',\n    description: 'Option for the start select dropdown to filter runs since the last 1 year',\n  }),\n});\n\n/**\n * Creates qualified entity name given a key type and name, wrapping in backticks\n * or quotes as needed and where appropriate\n */\nexport const getQualifiedEntityName = (keyType: string, keyName: string) => {\n  let replace = '';\n  if (keyName.includes('\"') || keyName.includes(' ') || keyName.includes('.')) {\n    replace = '`';\n  }\n  if (keyName.includes('`')) {\n    replace = '\"';\n  }\n  return `${keyType}.${replace}${keyName}${replace}`;\n};\n","import {\n  PinIcon,\n  PinFillIcon,\n  Tooltip,\n  VisibleIcon,\n  VisibleOffIcon,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { shouldUseNextRunsComparisonUI } from '../../../../../../common/utils/FeatureUtils';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\n\n// Mouse enter/leave delays passed to tooltips are set to 0 so swift toggling/pinning runs is not hampered\nconst MOUSE_DELAYS = { mouseEnterDelay: 0, mouseLeaveDelay: 0 };\n\nexport const RowActionsCellRenderer = React.memo(\n  (props: {\n    data: RunRowType;\n    value: { pinned: boolean; hidden: boolean };\n    onTogglePin: (runUuid: string) => void;\n    onToggleVisibility: (runUuid: string) => void;\n  }) => {\n    const { pinned, hidden } = props.value;\n    return (\n      <div css={styles.actionsContainer}>\n        {/* Hide/show icon is part of compare runs UI */}\n        {shouldUseNextRunsComparisonUI() && (\n          <Tooltip\n            dangerouslySetAntdProps={MOUSE_DELAYS}\n            placement='right'\n            title={\n              hidden ? (\n                <FormattedMessage\n                  defaultMessage='Unhide run'\n                  description='A tooltip for the visibility icon button in the runs table next to the hidden run'\n                />\n              ) : (\n                <FormattedMessage\n                  defaultMessage='Hide run'\n                  description='A tooltip for the visibility icon button in the runs table next to the visible run'\n                />\n              )\n            }\n          >\n            <label css={styles.actionCheckbox} className='is-visibility-toggle'>\n              <input\n                type='checkbox'\n                checked={!hidden}\n                onChange={() => {\n                  props.onToggleVisibility(props.data.runUuid);\n                }}\n              />\n              {!hidden ? <VisibleIcon /> : <VisibleOffIcon />}\n            </label>\n          </Tooltip>\n        )}\n        {props.data.pinnable && (\n          <Tooltip\n            dangerouslySetAntdProps={MOUSE_DELAYS}\n            placement='right'\n            title={\n              pinned ? (\n                <FormattedMessage\n                  defaultMessage='Unpin run'\n                  description='A tooltip for the pin icon button in the runs table next to the pinned run'\n                />\n              ) : (\n                <FormattedMessage\n                  defaultMessage='Pin run'\n                  description='A tooltip for the pin icon button in the runs table next to the not pinned run'\n                />\n              )\n            }\n          >\n            <label\n              css={styles.actionCheckbox}\n              className='is-pin-toggle'\n              data-testid='column-pin-toggle'\n            >\n              <input\n                type='checkbox'\n                checked={pinned}\n                onChange={() => {\n                  props.onTogglePin(props.data.runUuid);\n                }}\n              />\n              {pinned ? <PinFillIcon /> : <PinIcon />}\n            </label>\n          </Tooltip>\n        )}\n      </div>\n    );\n  },\n  (prevProps, nextProps) =>\n    prevProps.value.hidden === nextProps.value.hidden &&\n    prevProps.value.pinned === nextProps.value.pinned,\n);\n\nconst styles = {\n  actionsContainer: () => ({\n    display: 'flex',\n    gap: 18, // In design there's 20 px of gutter, it's minus 2 px due to pin icon's internal padding\n  }),\n  actionCheckbox: (theme: Theme) => ({\n    input: { width: 0, appearance: 'none' as const },\n    cursor: 'pointer',\n    display: 'flex',\n    svg: {\n      width: 14,\n      height: 14,\n      cursor: 'pointer',\n    },\n    // Styling for the pin button - it's transparent when unpinned and not hovered\n    '&.is-pin-toggle svg': {\n      color: 'transparent',\n      '.ag-row:hover &': {\n        color: theme.colors.grey600,\n      },\n    },\n    // Styling for the show/hide button - it uses different color for active/inactive\n    '&.is-visibility-toggle svg': {\n      color: theme.colors.grey400,\n      '.ag-row:hover &': {\n        color: theme.colors.grey600,\n      },\n    },\n    '& input:checked + span svg': {\n      color: theme.colors.grey600,\n    },\n  }),\n};\n","import { DropdownMenu, VisibleIcon, VisibleOffIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { RUNS_VISIBILITY_MODE } from '../../../utils/experimentPage.common-utils';\n\n/**\n * A component used to render \"eye\" icon in the table header used to hide/show all runs\n */\nexport const RowActionsHeaderCellRenderer = React.memo(\n  (props: { onToggleVisibility: (runUuidOrToggle: string) => void }) => (\n    <DropdownMenu.Root modal={false}>\n      <DropdownMenu.Trigger asChild>\n        <button\n          css={styles.actionButton}\n          data-testid='experiment-view-runs-visibility-column-header'\n        >\n          <VisibleIcon />\n        </button>\n      </DropdownMenu.Trigger>\n\n      <DropdownMenu.Content>\n        <DropdownMenu.Item\n          onClick={() => props.onToggleVisibility(RUNS_VISIBILITY_MODE.HIDEALL)}\n          data-testid='experiment-view-runs-visibility-hide-all'\n        >\n          <DropdownMenu.IconWrapper>\n            <VisibleOffIcon />\n          </DropdownMenu.IconWrapper>\n          <FormattedMessage\n            defaultMessage='Hide all runs'\n            description='Menu option for hiding all runs in the experiment view runs compare mode'\n          />\n        </DropdownMenu.Item>\n        <DropdownMenu.Item\n          onClick={() => props.onToggleVisibility(RUNS_VISIBILITY_MODE.SHOWALL)}\n          data-testid='experiment-view-runs-visibility-show-all'\n        >\n          <DropdownMenu.IconWrapper>\n            <VisibleIcon />\n          </DropdownMenu.IconWrapper>\n          <FormattedMessage\n            defaultMessage='Show all runs'\n            description='Menu option for revealing all hidden runs in the experiment view runs compare mode'\n          />\n        </DropdownMenu.Item>\n      </DropdownMenu.Content>\n\n      {/*  */}\n    </DropdownMenu.Root>\n  ),\n);\n\nconst styles = {\n  actionButton: (theme: Theme) => ({\n    background: 'transparent',\n    border: 'none',\n    cursor: 'pointer',\n    padding: '8px',\n    // When visibility icon is next to the ag-grid checkbox, remove the bonus padding\n    '.ag-checkbox:not(.ag-hidden) + &': { padding: '0 1px' },\n    svg: {\n      width: 14,\n      height: 14,\n      cursor: 'pointer',\n      color: theme.colors.grey600,\n    },\n  }),\n};\n","import { ICellRendererParams } from '@ag-grid-community/core';\nimport { Button, MinusBoxIcon, PlusSquareIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { shouldUseNextRunsComparisonUI } from '../../../../../../common/utils/FeatureUtils';\nimport Routes from '../../../../../routes';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\n\nexport interface RunNameCellRendererProps extends ICellRendererParams {\n  data: RunRowType;\n  onExpand: (runUuid: string, childrenIds?: string[]) => void;\n}\n\nexport const RunNameCellRenderer = React.memo(\n  ({\n    onExpand,\n    data: { runName, experimentId, runUuid, runDateAndNestInfo, color },\n  }: RunNameCellRendererProps) => {\n    const { hasExpander, expanderOpen, childrenIds, level } = runDateAndNestInfo || {};\n\n    const renderingAsParent = !isNaN(level) && hasExpander;\n    const shouldDisplayRunColors = shouldUseNextRunsComparisonUI();\n\n    return (\n      <div css={styles.cellWrapper}>\n        <div css={styles.expanderWrapper}>\n          <div css={styles.nestLevel(level)}>\n            {renderingAsParent && (\n              <Button\n                css={styles.expanderButton}\n                size='small'\n                onClick={() => {\n                  onExpand(runUuid, childrenIds);\n                }}\n                key={'Expander-' + runUuid}\n                type='link'\n                icon={expanderOpen ? <MinusBoxIcon /> : <PlusSquareIcon />}\n              />\n            )}\n          </div>\n        </div>\n        <Link to={Routes.getRunPageRoute(experimentId, runUuid)} css={styles.runLink}>\n          {shouldDisplayRunColors && (\n            <div\n              css={styles.colorPill}\n              data-testid='experiment-view-table-run-color'\n              style={{ backgroundColor: color }}\n            />\n          )}\n          <span css={styles.runName}>{runName}</span>\n        </Link>\n      </div>\n    );\n  },\n);\n\nconst styles = {\n  link: (theme: Theme) => ({\n    display: 'inline-block',\n    minWidth: theme.typography.fontSizeBase,\n    minHeight: theme.typography.fontSizeBase,\n  }),\n  cellWrapper: {\n    display: 'flex',\n  },\n  expanderButton: {\n    svg: {\n      width: 12,\n      height: 12,\n    },\n  },\n  runLink: {\n    overflow: 'hidden',\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n  },\n  runName: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n  expanderWrapper: {\n    display: 'none',\n    '.ag-grid-expanders-visible &': {\n      display: 'block',\n    },\n  },\n  colorPill: {\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n    flexShrink: 0,\n    // Straighten it up on retina-like screens\n    '@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)': {\n      marginBottom: 1,\n    },\n  },\n  nestLevel: (level: number) => (theme: Theme) => ({\n    display: 'flex',\n    justifyContent: 'flex-end',\n    width: (level + 1) * theme.spacing.lg,\n    height: theme.spacing.lg,\n  }),\n};\n","import type { ICellRendererParams } from '@ag-grid-community/core';\nimport { Button } from '@databricks/design-system';\nimport { uniqueId } from 'lodash';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport const createLoadMoreRow = () => ({\n  runUuid: uniqueId('load_more'),\n  isLoadMoreRow: true,\n});\n\n/**\n * A cell renderer for special type of full width rows housing \"Load more\"\n * button displayed at the bottom of the grid\n */\nexport const LoadMoreRowRenderer = React.memo(\n  ({ loadMoreRunsFunc }: ICellRendererParams & { loadMoreRunsFunc: () => void }) => (\n    <div css={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 32 }}>\n      <Button type='primary' onClick={loadMoreRunsFunc} size='small'>\n        <FormattedMessage\n          defaultMessage='Load more'\n          description='Load more button text to load more experiment runs'\n        />\n      </Button>\n    </div>\n  ),\n);\n","import type { ColDef, ColumnApi, IsFullWidthRowParams } from '@ag-grid-community/core';\nimport { Spinner } from '@databricks/design-system';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { isEqual } from 'lodash';\nimport Utils from '../../../../common/utils/Utils';\nimport {\n  ATTRIBUTE_COLUMN_LABELS,\n  ATTRIBUTE_COLUMN_SORT_KEY,\n  COLUMN_TYPES,\n} from '../../../constants';\nimport { ColumnHeaderCell } from '../components/runs/cells/ColumnHeaderCell';\nimport { DateCellRenderer } from '../components/runs/cells/DateCellRenderer';\nimport { ExperimentNameCellRenderer } from '../components/runs/cells/ExperimentNameCellRenderer';\nimport { ModelsCellRenderer } from '../components/runs/cells/ModelsCellRenderer';\nimport { SourceCellRenderer } from '../components/runs/cells/SourceCellRenderer';\nimport { VersionCellRenderer } from '../components/runs/cells/VersionCellRenderer';\nimport type { SearchExperimentRunsFacetsState } from '../models/SearchExperimentRunsFacetsState';\nimport {\n  EXPERIMENT_FIELD_PREFIX_METRIC,\n  EXPERIMENT_FIELD_PREFIX_PARAM,\n  EXPERIMENT_FIELD_PREFIX_TAG,\n  getQualifiedEntityName,\n} from './experimentPage.common-utils';\nimport { RunRowType } from './experimentPage.row-types';\nimport { RowActionsCellRenderer } from '../components/runs/cells/RowActionsCellRenderer';\nimport { RowActionsHeaderCellRenderer } from '../components/runs/cells/RowActionsHeaderCellRenderer';\nimport { RunNameCellRenderer } from '../components/runs/cells/RunNameCellRenderer';\nimport { LoadMoreRowRenderer } from '../components/runs/cells/LoadMoreRowRenderer';\nimport { shouldUseNextRunsComparisonUI } from '../../../../common/utils/FeatureUtils';\n\n/**\n * Calculates width for \"run name\" column.\n */\nconst getRunNameColumnWidth = () => {\n  if (shouldUseNextRunsComparisonUI()) {\n    return 310;\n  }\n  return 260;\n};\n\n/**\n * Calculates width for \"actions\" column. \"compactMode\" should be set to true\n * for compare runs mode when checkboxes are hidden.\n */\nconst getActionsColumnWidth = (compactMode?: boolean) => {\n  if (shouldUseNextRunsComparisonUI()) {\n    // 70px when checkboxes are hidden, 104px otherwise\n    return compactMode ? 70 : 104;\n  }\n  return 70;\n};\n\n/**\n * Creates canonical sort key name for metrics and params in form\n * of \"keyType.`keyName`\", e.g. \"params.`paramName`\"\n */\nexport const makeCanonicalSortKey = (keyType: string, keyName: string) =>\n  keyType + '.`' + keyName + '`';\n\n/**\n * Creates canonical sort key name for metrics and params\n */\nexport const isCanonicalSortKeyOfType = (canonicalKey: string, keyType: string) =>\n  canonicalKey.startsWith(keyType);\n\n/**\n * Extracts param/metric/tag name from the canonical key\n */\nexport const extractCanonicalSortKey = (canonicalKey: string, keyType: string) =>\n  canonicalKey.substring(keyType.length + 2).slice(0, -1);\n\n/*\n * Functions used to generate grid field names for params, metrics and prefixes\n */\nconst createParamFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_PARAM}-${key}`;\nconst createMetricFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_METRIC}-${key}`;\nconst createTagFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_TAG}-${key}`;\n\n/**\n * Functions returns all framework components to be used by agGrid\n */\nexport const getFrameworkComponents = () => ({\n  agColumnHeader: ColumnHeaderCell,\n  loadingOverlayComponent: Spinner,\n\n  /**\n   * We're saving cell renderer component references, otherwise\n   * agGrid will unnecessarily flash cells' content (e.g. when changing sort order)\n   */\n  LoadMoreRowRenderer,\n  SourceCellRenderer,\n  ModelsCellRenderer,\n  VersionCellRenderer,\n  DateCellRenderer,\n  ExperimentNameCellRenderer,\n  RowActionsCellRenderer,\n  RowActionsHeaderCellRenderer,\n  RunNameCellRenderer,\n});\n\n/**\n * Certain columns are described as run attributes (opposed to metrics, params etc.), however\n * they actually source their data from the run tags. This objects maps tag names to column identifiers.\n */\nexport const TAGS_TO_COLUMNS_MAP = {\n  [ATTRIBUTE_COLUMN_SORT_KEY.USER]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'User'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Run Name'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.SOURCE]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Source'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.VERSION]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Version'),\n};\n\n/**\n * Function returns unique row ID to be used in runs table\n */\nexport const getRowId = ({ data }: { data: RunRowType }) => data.runUuid;\n\n/**\n * Determines if a data row houses \"load more\" button\n */\nexport const getRowIsLoadMore = ({ rowNode }: IsFullWidthRowParams) => rowNode.data.isLoadMoreRow;\n\n/**\n * Parameters used by `useRunsColumnDefinitions()` hook\n */\nexport interface UseRunsColumnDefinitionsParams {\n  searchFacetsState: SearchExperimentRunsFacetsState;\n  onSortBy: (newOrderByKey: string, newOrderByAsc: boolean) => void;\n  onExpand: (parentUuid: string, childrenIds: string[]) => void;\n  onTogglePin: (runUuid: string) => void;\n  onToggleVisibility: (runUuidOrToggle: string) => void;\n  compareExperiments: boolean;\n  metricKeyList: string[];\n  paramKeyList: string[];\n  tagKeyList: string[];\n  columnApi?: ColumnApi;\n  isComparingRuns?: boolean;\n}\n\n/**\n * List of all attribute columns that can be shown/hidden by user\n * - when displaying a single experiment (ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT)\n * - when comparing experiments (ADJUSTABLE_ATTRIBUTE_COLUMNS)\n */\nexport const ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT = [\n  ATTRIBUTE_COLUMN_LABELS.USER,\n  ATTRIBUTE_COLUMN_LABELS.SOURCE,\n  ATTRIBUTE_COLUMN_LABELS.VERSION,\n  ATTRIBUTE_COLUMN_LABELS.MODELS,\n];\nexport const ADJUSTABLE_ATTRIBUTE_COLUMNS = [\n  ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME,\n  ...ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT,\n];\n\n/**\n * This internal hook passes through the list of all metric/param/tag keys.\n * The lists are memoized internally so if somehow a particular param/metric/tag key is not present\n * in the new runs set (e.g. due to reverse sorting), the relevant column will be still displayed.\n * This prevents weirdly disappearing columns on exotic run sets.\n */\nconst useCumulativeColumnKeys = ({\n  paramKeyList,\n  metricKeyList,\n  tagKeyList,\n}: Pick<UseRunsColumnDefinitionsParams, 'tagKeyList' | 'metricKeyList' | 'paramKeyList'>) => {\n  const cachedMetricKeys = useRef<Set<string>>(new Set());\n  const cachedParamKeys = useRef<Set<string>>(new Set());\n  const cachedTagKeys = useRef<Set<string>>(new Set());\n\n  const paramKeys = useMemo(() => {\n    paramKeyList.forEach((key) => cachedParamKeys.current.add(key));\n    return Array.from(cachedParamKeys.current);\n  }, [paramKeyList]);\n\n  const metricKeys = useMemo(() => {\n    metricKeyList.forEach((key) => cachedMetricKeys.current.add(key));\n    return Array.from(cachedMetricKeys.current);\n  }, [metricKeyList]);\n\n  const tagKeys = useMemo(() => {\n    tagKeyList.forEach((key) => cachedTagKeys.current.add(key));\n    return Array.from(cachedTagKeys.current);\n  }, [tagKeyList]);\n\n  const cumulativeColumns = useMemo(\n    () => ({\n      paramKeys,\n      metricKeys,\n      tagKeys,\n    }),\n    [metricKeys, paramKeys, tagKeys],\n  );\n\n  return cumulativeColumns;\n};\n\n/**\n * This hook creates a agGrid-compatible column set definition basing on currently\n * used sort-filter model and provided list of metrics, params and tags.\n *\n * Internally, it reacts to changes to `selectedColumns` and hides/shows relevant columns\n * if necessary.\n *\n * @param params see UseRunsColumnDefinitionsParams\n */\nexport const useRunsColumnDefinitions = ({\n  searchFacetsState,\n  onSortBy,\n  compareExperiments,\n  onTogglePin,\n  onToggleVisibility,\n  onExpand,\n  paramKeyList,\n  metricKeyList,\n  tagKeyList,\n  columnApi,\n  isComparingRuns,\n}: UseRunsColumnDefinitionsParams) => {\n  const { orderByAsc, orderByKey, selectedColumns } = searchFacetsState;\n\n  const cumulativeColumns = useCumulativeColumnKeys({\n    metricKeyList,\n    tagKeyList,\n    paramKeyList,\n  });\n\n  const columnSet = useMemo(() => {\n    const commonSortOrderProps = { orderByKey, orderByAsc, onSortBy };\n\n    const getOrderedByClassName = (key: string) =>\n      key === orderByKey ? 'is-ordered-by' : undefined;\n\n    const getHeaderClassName = (key: string) => getOrderedByClassName(key);\n    const getCellClassName = ({ colDef }: { colDef: ColDef }) =>\n      getOrderedByClassName(colDef.headerComponentParams.canonicalSortKey);\n\n    const columns: ColDefWithChildren[] = [];\n\n    // Checkbox selection column\n    columns.push({\n      valueGetter: ({ data: { pinned, hidden } }) => ({ pinned, hidden }),\n      checkboxSelection: !isComparingRuns,\n      headerComponent: shouldUseNextRunsComparisonUI() ? 'RowActionsHeaderCellRenderer' : undefined,\n      headerComponentParams: { onToggleVisibility },\n      headerCheckboxSelection: !isComparingRuns,\n      headerName: '',\n      cellClass: 'is-checkbox-cell',\n      cellRenderer: 'RowActionsCellRenderer',\n      cellRendererParams: { onTogglePin, onToggleVisibility },\n      pinned: 'left',\n      minWidth: getActionsColumnWidth(isComparingRuns),\n      width: getActionsColumnWidth(isComparingRuns),\n      maxWidth: getActionsColumnWidth(isComparingRuns),\n      resizable: false,\n    });\n\n    // Run name column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.RUN_NAME,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME],\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME,\n      pinned: 'left',\n      sortable: true,\n      field: 'runDateAndNestInfo',\n      cellRenderer: 'RunNameCellRenderer',\n      cellRendererParams: { onExpand },\n      equals: (dateInfo1, dateInfo2) => isEqual(dateInfo1, dateInfo2),\n      headerComponentParams: {\n        ...commonSortOrderProps,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME,\n        getClassName: getHeaderClassName,\n      },\n      cellClass: getCellClassName,\n      initialWidth: getRunNameColumnWidth(),\n      resizable: !isComparingRuns,\n    });\n\n    // If we are only comparing runs, that's it - we cut off the list after the run name column.\n    // This behavior might be revisited and changed later.\n    if (isComparingRuns) {\n      return columns;\n    }\n\n    // Date and expander selection column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DATE,\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n      pinned: 'left',\n      sortable: true,\n      field: 'runDateAndNestInfo',\n      cellRenderer: 'DateCellRenderer',\n      cellRendererParams: { onExpand },\n      equals: (dateInfo1, dateInfo2) => isEqual(dateInfo1, dateInfo2),\n      headerComponentParams: {\n        ...commonSortOrderProps,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n        getClassName: getHeaderClassName,\n      },\n      cellClass: getCellClassName,\n      initialWidth: 150,\n    });\n\n    // Duration column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DURATION,\n      field: 'duration',\n      initialWidth: 80,\n      cellClass: getCellClassName,\n    });\n\n    // Experiment name column\n    if (compareExperiments) {\n      columns.push({\n        headerName: ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME,\n        colId: makeCanonicalSortKey(\n          COLUMN_TYPES.ATTRIBUTES,\n          ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME,\n        ),\n        field: 'experimentName',\n        cellRenderer: 'ExperimentNameCellRenderer',\n        equals: (experimentName1, experimentName2) => isEqual(experimentName1, experimentName2),\n        initialWidth: 140,\n        cellClass: getCellClassName,\n        initialHide: true,\n      });\n    }\n\n    // User column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.USER,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.USER],\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.USER,\n      field: 'user',\n      sortable: true,\n      headerComponentParams: {\n        ...commonSortOrderProps,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.USER,\n        getClassName: getHeaderClassName,\n      },\n      cellClass: getCellClassName,\n      initialHide: true,\n    });\n\n    // Source column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.SOURCE,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.SOURCE],\n      field: 'tags',\n      cellRenderer: 'SourceCellRenderer',\n      equals: (tags1, tags2) => Utils.getSourceName(tags1) === Utils.getSourceName(tags2),\n      sortable: true,\n      headerComponentParams: {\n        ...commonSortOrderProps,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.SOURCE,\n        getClassName: getHeaderClassName,\n      },\n      cellClass: getCellClassName,\n      initialHide: true,\n    });\n\n    // Version column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.VERSION,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.VERSION],\n      field: 'version',\n      cellRenderer: 'VersionCellRenderer',\n      equals: (version1, version2) => isEqual(version1, version2),\n      sortable: true,\n      headerComponentParams: {\n        ...commonSortOrderProps,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.VERSION,\n        getClassName: getHeaderClassName,\n      },\n      cellClass: getCellClassName,\n      initialHide: true,\n    });\n\n    // Models column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.MODELS,\n      colId: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.MODELS),\n      field: 'models',\n      cellRenderer: 'ModelsCellRenderer',\n      initialWidth: 200,\n      equals: (models1, models2) => isEqual(models1, models2),\n      initialHide: true,\n    });\n\n    const { metricKeys, paramKeys, tagKeys } = cumulativeColumns;\n\n    // Metrics columns\n    if (metricKeys.length) {\n      columns.push({\n        headerName: 'Metrics',\n        colId: COLUMN_TYPES.METRICS,\n        children: metricKeys.map((metricKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.METRICS, metricKey);\n          return {\n            headerName: metricKey,\n            colId: canonicalSortKey,\n            headerTooltip: getQualifiedEntityName(COLUMN_TYPES.METRICS, metricKey),\n            field: createMetricFieldName(metricKey),\n            tooltipField: createMetricFieldName(metricKey),\n            initialWidth: 100,\n            initialHide: true,\n            sortable: true,\n            headerComponentParams: {\n              ...commonSortOrderProps,\n              canonicalSortKey,\n              getClassName: getHeaderClassName,\n            },\n            cellClass: getCellClassName,\n          };\n        }),\n      });\n    }\n\n    // Parameter columns\n    if (paramKeys.length) {\n      columns.push({\n        headerName: 'Parameters',\n        colId: COLUMN_TYPES.PARAMS,\n        children: paramKeys.map((paramKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.PARAMS, paramKey);\n          return {\n            colId: canonicalSortKey,\n            headerName: paramKey,\n            headerTooltip: getQualifiedEntityName(COLUMN_TYPES.PARAMS, paramKey),\n            field: createParamFieldName(paramKey),\n            tooltipField: createParamFieldName(paramKey),\n            initialHide: true,\n            initialWidth: 100,\n            sortable: true,\n            headerComponentParams: {\n              ...commonSortOrderProps,\n              canonicalSortKey,\n              getClassName: getHeaderClassName,\n            },\n            cellClass: getCellClassName,\n          };\n        }),\n      });\n    }\n\n    // Tags columns\n    if (tagKeys.length) {\n      columns.push({\n        headerName: 'Tags',\n        colId: COLUMN_TYPES.TAGS,\n        children: tagKeys.map((tagKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.TAGS, tagKey);\n          return {\n            colId: canonicalSortKey,\n            headerName: tagKey,\n            initialHide: true,\n            initialWidth: 100,\n            headerTooltip: getQualifiedEntityName(COLUMN_TYPES.TAGS, tagKey),\n            field: createTagFieldName(tagKey),\n            tooltipField: createTagFieldName(tagKey),\n          };\n        }),\n      });\n    }\n\n    return columns;\n  }, [\n    orderByKey,\n    orderByAsc,\n    onSortBy,\n    onTogglePin,\n    onToggleVisibility,\n    onExpand,\n    compareExperiments,\n    cumulativeColumns,\n    isComparingRuns,\n  ]);\n\n  const canonicalSortKeys = useMemo(\n    () => [\n      ...ADJUSTABLE_ATTRIBUTE_COLUMNS.map((key) =>\n        makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, key),\n      ),\n      ...cumulativeColumns.paramKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.PARAMS, key)),\n      ...cumulativeColumns.metricKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.METRICS, key)),\n      ...cumulativeColumns.tagKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.TAGS, key)),\n    ],\n    [cumulativeColumns],\n  );\n\n  useEffect(() => {\n    if (!columnApi || isComparingRuns) {\n      return;\n    }\n    for (const canonicalKey of canonicalSortKeys) {\n      const visible = selectedColumns.includes(canonicalKey);\n      columnApi.setColumnVisible(canonicalKey, visible);\n    }\n  }, [selectedColumns, columnApi, canonicalSortKeys, isComparingRuns]);\n\n  return columnSet;\n};\n\ntype ColDefWithChildren = ColDef & {\n  children?: ColDef[];\n};\n\nexport const EXPERIMENTS_DEFAULT_COLUMN_SETUP = {\n  initialWidth: 100,\n  autoSizePadding: 0,\n  headerComponentParams: { menuIcon: 'fa-bars' },\n  resizable: true,\n  filter: true,\n  suppressMenu: true,\n  suppressMovable: true,\n};\n","import React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport PropTypes from 'prop-types';\nimport { deleteRunApi, openErrorModal } from '../../actions';\nimport { connect } from 'react-redux';\nimport Utils from '../../../common/utils/Utils';\n\nexport class DeleteRunModalImpl extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    selectedRunIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n    openErrorModal: PropTypes.func.isRequired,\n    deleteRunApi: PropTypes.func.isRequired,\n  };\n\n  handleSubmit() {\n    const deletePromises = [];\n    this.props.selectedRunIds.forEach((runId) => {\n      deletePromises.push(this.props.deleteRunApi(runId));\n    });\n    return Promise.all(deletePromises).catch(() => {\n      this.props.openErrorModal('While deleting an experiment run, an error occurred.');\n    });\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Delete Experiment ${Utils.pluralize('Run', number)}`}\n        helpText={\n          <div>\n            <p>\n              <b>\n                {number} experiment {Utils.pluralize('run', number)} will be deleted.\n              </b>\n            </p>\n            {process.env.SHOW_GDPR_PURGING_MESSAGES === 'true' ? (\n              <p>\n                Deleted runs are restorable for 30 days, after which they are purged along with\n                associated metrics, params, tags, and artifacts.\n              </p>\n            ) : (\n              ''\n            )}\n          </div>\n        }\n        confirmButtonText={'Delete'}\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteRunApi,\n  openErrorModal,\n};\n\nexport default connect(null, mapDispatchToProps)(DeleteRunModalImpl);\n","import React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { openErrorModal, restoreRunApi } from '../../actions';\nimport Utils from '../../../common/utils/Utils';\n\nexport class RestoreRunModalImpl extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    selectedRunIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n    openErrorModal: PropTypes.func.isRequired,\n    restoreRunApi: PropTypes.func.isRequired,\n  };\n\n  handleSubmit() {\n    const restorePromises = [];\n    this.props.selectedRunIds.forEach((runId) => {\n      restorePromises.push(this.props.restoreRunApi(runId));\n    });\n    return Promise.all(restorePromises).catch((e) => {\n      const errorMessage = 'While restoring an experiment run, an error occurred.';\n      this.props.openErrorModal(errorMessage);\n    });\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Restore Experiment ${Utils.pluralize('Run', number)}`}\n        helpText={`${number} experiment ${Utils.pluralize('run', number)} will be restored.`}\n        confirmButtonText={'Restore'}\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  restoreRunApi,\n  openErrorModal,\n};\n\nexport default connect(null, mapDispatchToProps)(RestoreRunModalImpl);\n","import qs from 'qs';\nimport { useMemo } from 'react';\nimport { useLocation, useRouteMatch } from 'react-router';\nimport Utils from '../../../../common/utils/Utils';\n\nexport type UseExperimentIdsResult = string[];\n\n/**\n * Hook that returns requested experiment IDs basing on the URL.\n * It extracts ids basing on either route match (in case of a single experiment)\n * or query params (in case of comparing experiments.).\n *\n * @returns array of strings with experiment IDs\n */\n\nexport const useExperimentIds = (): UseExperimentIdsResult => {\n  const match = useRouteMatch<{ experimentId?: string }>();\n  const location = useLocation();\n\n  const normalizedLocationSearch = useMemo(\n    () => decodeURIComponent(location.search),\n    [location.search],\n  );\n\n  /**\n   * Memoized string containing experiment IDs for comparison (\"?experiments=...\")\n   */\n  const compareExperimentIdsQueryParam = useMemo(() => {\n    const queryParams = qs.parse(normalizedLocationSearch.substring(1));\n    if (queryParams['experiments']) {\n      const experimentIdsRaw = queryParams['experiments'];\n      return experimentIdsRaw?.toString() || '';\n    }\n\n    return '';\n  }, [normalizedLocationSearch]);\n\n  return useMemo(() => {\n    // Case #1: single experiment\n    if (match.params?.experimentId) {\n      return [match.params?.experimentId];\n    }\n\n    // Case #2: multiple (compare) experiments\n    if (compareExperimentIdsQueryParam) {\n      try {\n        return JSON.parse(compareExperimentIdsQueryParam);\n      } catch {\n        // Apparently URL is malformed\n        Utils.logErrorAndNotifyUser(\n          `Could not parse experiment query parameter ${compareExperimentIdsQueryParam}`,\n        );\n        return '';\n      }\n    }\n\n    return [];\n  }, [compareExperimentIdsQueryParam, match.params?.experimentId]);\n};\n","import { chunk, isEqual } from 'lodash';\nimport { AnyAction } from 'redux';\nimport { searchModelVersionsApi } from '../../../../model-registry/actions';\nimport { MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER } from '../../../../model-registry/constants';\nimport { ATTRIBUTE_COLUMN_SORT_KEY } from '../../../constants';\nimport { ViewType } from '../../../sdk/MlflowEnums';\nimport { KeyValueEntity, LIFECYCLE_FILTER } from '../../../types';\nimport { SearchExperimentRunsFacetsState } from '../models/SearchExperimentRunsFacetsState';\nimport { EXPERIMENT_LOG_MODEL_HISTORY_TAG } from './experimentPage.common-utils';\n\nconst START_TIME_COLUMN_OFFSET = {\n  ALL: null,\n  LAST_HOUR: 1 * 60 * 60 * 1000,\n  LAST_24_HOURS: 24 * 60 * 60 * 1000,\n  LAST_7_DAYS: 7 * 24 * 60 * 60 * 1000,\n  LAST_30_DAYS: 30 * 24 * 60 * 60 * 1000,\n  LAST_YEAR: 12 * 30 * 24 * 60 * 60 * 1000,\n};\n\n/**\n * This function checks if the sort+model state update has\n * been updated enough and if the change should invoke re-fetching\n * the runs from the back-end. This enables differentiation between\n * front-end and back-end filtering.\n */\nexport const shouldRefetchRuns = (\n  currentSearchFacetsState: SearchExperimentRunsFacetsState,\n  newSearchFacetsState: SearchExperimentRunsFacetsState,\n) =>\n  !isEqual(currentSearchFacetsState.searchFilter, newSearchFacetsState.searchFilter) ||\n  !isEqual(currentSearchFacetsState.orderByAsc, newSearchFacetsState.orderByAsc) ||\n  !isEqual(currentSearchFacetsState.orderByKey, newSearchFacetsState.orderByKey) ||\n  !isEqual(currentSearchFacetsState.lifecycleFilter, newSearchFacetsState.lifecycleFilter) ||\n  !isEqual(currentSearchFacetsState.startTime, newSearchFacetsState.startTime);\n\n/**\n * Creates \"order by\" SQL expression\n */\nconst createOrderByExpression = ({ orderByKey, orderByAsc }: SearchExperimentRunsFacetsState) => {\n  if (orderByKey) {\n    return orderByAsc ? [orderByKey + ' ASC'] : [orderByKey + ' DESC'];\n  }\n  return [];\n};\n\n/**\n * Creates SQL expression for filtering by run start time\n */\nconst createStartTimeExpression = (\n  { startTime }: SearchExperimentRunsFacetsState,\n  referenceTime: number,\n) => {\n  const offset = START_TIME_COLUMN_OFFSET[startTime as keyof typeof START_TIME_COLUMN_OFFSET];\n  if (!startTime || !offset || startTime === 'ALL') {\n    return null;\n  }\n  const startTimeOffset = referenceTime - offset;\n\n  return `attributes.start_time >= ${startTimeOffset}`;\n};\n\n/**\n * Combines search filter and start time SQL expressions\n */\nconst createFilterExpression = (\n  { searchFilter }: SearchExperimentRunsFacetsState,\n  startTimeExpression: string | null,\n) => {\n  if (searchFilter && startTimeExpression) {\n    return `${searchFilter} and ${startTimeExpression}`;\n  } else if (!searchFilter && startTimeExpression) {\n    return startTimeExpression;\n  } else {\n    return searchFilter || undefined;\n  }\n};\n\n/**\n * If this function returns true, the ExperimentView should nest children underneath their parents\n * and fetch all root level parents of visible runs. If this function returns false, the views will\n * not nest children or fetch any additional parents. Will always return true if the orderByKey is\n * 'attributes.start_time'\n */\nconst shouldNestChildrenAndFetchParents = ({\n  orderByKey,\n  searchFilter,\n}: SearchExperimentRunsFacetsState) =>\n  (!orderByKey && !searchFilter) || orderByKey === ATTRIBUTE_COLUMN_SORT_KEY.DATE;\n\n/**\n *\n * Function creates API-compatible query object basing on the given criteria.\n * @param experimentIds IDs of experiments to be queries for runs\n * @param searchFacetsState the sort/filter model to use\n * @param referenceTime reference time to calculate startTime filter\n * @param pageToken next page token if fetching the next page\n */\nexport const createSearchRunsParams = (\n  experimentIds: (number | string)[],\n  searchFacetsState: SearchExperimentRunsFacetsState,\n  referenceTime: number,\n  pageToken?: string,\n) => {\n  const runViewType =\n    searchFacetsState.lifecycleFilter === LIFECYCLE_FILTER.ACTIVE\n      ? ViewType.ACTIVE_ONLY\n      : ViewType.DELETED_ONLY;\n\n  const { runsPinned = undefined } = searchFacetsState;\n\n  const orderBy = createOrderByExpression(searchFacetsState);\n  const startTimeExpression = createStartTimeExpression(searchFacetsState, referenceTime);\n  const filter = createFilterExpression(searchFacetsState, startTimeExpression);\n  const shouldFetchParents = shouldNestChildrenAndFetchParents(searchFacetsState);\n\n  return {\n    // Experiment IDs\n    experimentIds,\n\n    // Filters and sort options\n    filter,\n    runViewType,\n    orderBy,\n    shouldFetchParents,\n\n    // Next page token for loading more runs\n    pageToken,\n    runsPinned,\n  };\n};\n\n/**\n * Function checks if given runs set contain info about log model history and if true,\n * fetches model versions for them\n *\n * @param runsPayload runs payload returned from the searchRuns API\n * @param actionCreator redux-thunk action creator that for search model versions action\n * @param dispatch redux-compatible dispatch function\n */\nexport const fetchModelVersionsForRuns = (\n  runsPayload: {\n    info: {\n      run_id: string;\n    };\n    data: {\n      tags: KeyValueEntity[];\n    };\n  }[],\n  actionCreator: typeof searchModelVersionsApi,\n  dispatch: (action: AnyAction) => Promise<AnyAction>,\n) => {\n  const runsWithLogModelHistory = runsPayload.filter((run) =>\n    run.data.tags.some((t) => t.key === EXPERIMENT_LOG_MODEL_HISTORY_TAG),\n  );\n\n  chunk(runsWithLogModelHistory, MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER).forEach((runsChunk) => {\n    const action = actionCreator({ run_id: runsChunk.map((run) => run.info.run_id) });\n    dispatch(action);\n  });\n};\n","import {\n  ATTRIBUTE_COLUMN_LABELS,\n  COLUMN_TYPES,\n  DEFAULT_LIFECYCLE_FILTER,\n  DEFAULT_MODEL_VERSION_FILTER,\n  DEFAULT_ORDER_BY_ASC,\n  DEFAULT_ORDER_BY_KEY,\n  DEFAULT_START_TIME,\n} from '../../../constants';\nimport { SerializedRunsCompareCardConfigCard } from '../../runs-compare/runs-compare.types';\nimport { makeCanonicalSortKey } from '../utils/experimentPage.column-utils';\n\nconst DEFAULT_SELECTED_COLUMNS = [\n  // \"Source\" and \"Model\" columns are visible by default\n  makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.SOURCE),\n  makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.MODELS),\n];\n\n/**\n * Function consumes a search state facets object and returns one\n * with cleared filter-related fields while leaving\n * selected columns, chart state etc.\n */\nexport const clearSearchExperimentsFacetsFilters = (\n  currentSearchFacetsState: SearchExperimentRunsFacetsState,\n) => {\n  const { lifecycleFilter, modelVersionFilter, searchFilter, startTime, orderByAsc, orderByKey } =\n    new SearchExperimentRunsFacetsState();\n  return {\n    ...currentSearchFacetsState,\n    lifecycleFilter,\n    modelVersionFilter,\n    searchFilter,\n    startTime,\n    orderByAsc,\n    orderByKey,\n  };\n};\n\n/**\n * Function consumes a search state facets object and returns `true`\n * if at least one filter-related facet is not-default meaning that runs\n * are currently filtered.\n */\nexport const isSearchFacetsFilterUsed = (\n  currentSearchFacetsState: SearchExperimentRunsFacetsState,\n) => {\n  const { lifecycleFilter, modelVersionFilter, searchFilter, startTime } = currentSearchFacetsState;\n  return Boolean(\n    lifecycleFilter !== DEFAULT_LIFECYCLE_FILTER ||\n      modelVersionFilter !== DEFAULT_MODEL_VERSION_FILTER ||\n      searchFilter ||\n      startTime !== DEFAULT_START_TIME,\n  );\n};\n\n/**\n * Defines persistable model representing sort and filter values\n * used by runs table and controls\n */\nexport class SearchExperimentRunsFacetsState {\n  /**\n   * SQL-like query string used to filter runs, e.g. \"params.alpha = '0.5'\"\n   */\n  searchFilter = '';\n\n  /**\n   * Canonical order_by key like \"params.`alpha`\". May be null to indicate the table\n   * should use the natural row ordering provided by the server.\n   */\n  orderByKey = DEFAULT_ORDER_BY_KEY;\n\n  /**\n   * Whether the order imposed by orderByKey should be ascending or descending.\n   */\n  orderByAsc = DEFAULT_ORDER_BY_ASC;\n\n  /**\n   * Filter key to show results based on start time\n   */\n  startTime = DEFAULT_START_TIME;\n\n  /**\n   * Lifecycle filter of runs to display\n   */\n  lifecycleFilter = DEFAULT_LIFECYCLE_FILTER;\n\n  /**\n   * Filter of model versions to display\n   */\n  modelVersionFilter = DEFAULT_MODEL_VERSION_FILTER;\n\n  /**\n   * Currently selected columns\n   */\n  selectedColumns: string[] = [...DEFAULT_SELECTED_COLUMNS];\n\n  /**\n   * Object mapping run UUIDs (strings) to booleans, where a boolean value of true indicates that\n   * a run has been expanded (its child runs are visible).\n   */\n  runsExpanded: Record<string, boolean> = {};\n\n  /**\n   * List of pinned row UUIDs\n   */\n  runsPinned: string[] = [];\n\n  /**\n   * List of hidden row UUIDs\n   */\n  runsHidden: string[] = [];\n\n  /**\n   * Is in compare runs mode\n   */\n  isComparingRuns = false;\n\n  /**\n   * Currently configured charts for comparing runs, if any.\n   */\n  compareRunCharts?: SerializedRunsCompareCardConfigCard[];\n}\n","import { SearchExperimentRunsFacetsState } from '../models/SearchExperimentRunsFacetsState';\n\ntype PersistSearchSerializeFunctions<Serialized = any, Unserialized = any> = {\n  serializeLocalStorage?(input: Unserialized): Serialized;\n  serializeQueryString?(input: Unserialized): Serialized;\n  deserializeLocalStorage?(input: Serialized): Unserialized;\n  deserializeQueryString?(input: Serialized): Unserialized;\n};\n\n/**\n * All known field serialization and deserialization mechanisms used in search facets state persisting mechanism.\n */\nconst persistSearchStateFieldSerializers: Record<string, PersistSearchSerializeFunctions> = {\n  /**\n   * Array of visible configured charts are serialized into base64-encoded JSON when put into query string\n   */\n  compareRunCharts: {\n    serializeQueryString(input: SearchExperimentRunsFacetsState['compareRunCharts']) {\n      return btoa(JSON.stringify(input));\n    },\n    deserializeQueryString(input: string): SearchExperimentRunsFacetsState['compareRunCharts'] {\n      try {\n        // Process the URL defensively against intended and unintended malformation\n        const parsedResult = JSON.parse(atob(input));\n        if (!Array.isArray(parsedResult)) {\n          return undefined;\n        }\n        return parsedResult;\n      } catch {\n        return undefined;\n      }\n    },\n  },\n  /**\n   * For \"isComparingRuns\", we will always save \"false\" value to local storage so users will\n   * get back to default view after visiting the view once more\n   */\n  isComparingRuns: {\n    serializeLocalStorage() {\n      return false;\n    },\n  },\n};\n\ntype StateKey = keyof Partial<SearchExperimentRunsFacetsState>;\n\n/**\n * Consumes an object with persistable search facets and transforms relevant fields\n * with the registered serialization functions specific to query string.\n * Example scenario: serializing an array of visible configured charts into base64-encoded JSON.\n */\nexport const serializeFieldsToQueryString = (input: Partial<SearchExperimentRunsFacetsState>) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const serializeFn = persistSearchStateFieldSerializers[field]?.serializeQueryString;\n    if (serializeFn) {\n      resultObject[field] = serializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with search facets extracted from query string and transforms relevant fields\n * with the registered deserialization functions. Example scenario: deserializing an array of\n * visible configured charts from base64-encoded JSON.\n */\nexport const deserializeFieldsFromQueryString = (\n  input: Partial<SearchExperimentRunsFacetsState> | Record<string, any>,\n) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const deserializeFn = persistSearchStateFieldSerializers[field]?.deserializeQueryString;\n    if (deserializeFn) {\n      resultObject[field] = deserializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with persistable search facets and transforms relevant fields\n * with the registered serialization functions specific to local storage.\n * Example scenario: serializing an array of visible configured charts into base64-encoded JSON.\n */\nexport const serializeFieldsToLocalStorage = (input: Partial<SearchExperimentRunsFacetsState>) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const serializeFn = persistSearchStateFieldSerializers[field]?.serializeLocalStorage;\n    if (serializeFn) {\n      resultObject[field] = serializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with search facets extracted from local storage and transforms relevant fields\n * with the registered deserialization functions. Example scenario: deserializing an array of\n * visible configured charts from base64-encoded JSON.\n */\nexport const deserializeFieldsFromLocalStorage = (\n  input: Partial<SearchExperimentRunsFacetsState> | Record<string, any>,\n) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const deserializeFn = persistSearchStateFieldSerializers[field]?.deserializeLocalStorage;\n    if (deserializeFn) {\n      resultObject[field] = deserializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n","import { isArray, isObject } from 'lodash';\nimport QueryString, { IParseOptions } from 'qs';\nimport { shouldUseNextRunsComparisonUI } from '../../../../common/utils/FeatureUtils';\nimport LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\nimport Utils from '../../../../common/utils/Utils';\n\nimport { SearchExperimentRunsFacetsState } from '../models/SearchExperimentRunsFacetsState';\nimport {\n  deserializeFieldsFromLocalStorage,\n  deserializeFieldsFromQueryString,\n  serializeFieldsToLocalStorage,\n  serializeFieldsToQueryString,\n} from './persistSearchFacets.serializers';\n\n// Let's enable serialization/deserialization mechanism basing on the same feature flag\n// as next-gen runs comparison UI since the features are related\nconst shouldUseStateSerializer = () => shouldUseNextRunsComparisonUI();\n\nconst KNOWN_STATE_KEYS = Object.keys(new SearchExperimentRunsFacetsState());\n\n/**\n * Function used by QueryString.parse(), implements better handling of booleans and undefined values\n */\nconst urlParserDecoder: IParseOptions['decoder'] = (str, defaultDecoder, _, type) => {\n  if (type === 'value') {\n    if (str === 'true') {\n      return true;\n    } else if (str === 'false') {\n      return false;\n    } else if (str === undefined) {\n      return '';\n    }\n  }\n  return defaultDecoder(str);\n};\n\n/**\n * Function used for merging two facets search states.\n */\nconst mergeFacetsStates = (\n  base: SearchExperimentRunsFacetsState,\n  object: Partial<SearchExperimentRunsFacetsState>,\n): SearchExperimentRunsFacetsState =>\n  Object.assign(new SearchExperimentRunsFacetsState(), {\n    ...base,\n    ...object,\n  });\n\n/**\n * Performs basic checks on partial facets state model. Returns false if\n * fields expected to be objects or arrays are not what they are supposed to be.\n */\nfunction validateFacetsState(model: Partial<SearchExperimentRunsFacetsState>) {\n  if (model.runsExpanded && !isObject(model.runsExpanded)) {\n    return false;\n  }\n\n  if (model.selectedColumns && !isArray(model.selectedColumns)) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Persists current facets state in local storage.\n */\nfunction persistLocalStorage(data: Partial<SearchExperimentRunsFacetsState>, idKey: string) {\n  // TODO: decide if we want to use LocalStorageUtils store or fall back to direct use of localStorage\n  const localStorageInstance = LocalStorageUtils.getStoreForComponent('ExperimentPage', idKey);\n  const sortFilterModelToSave = shouldUseStateSerializer()\n    ? serializeFieldsToLocalStorage(data)\n    : data;\n  localStorageInstance.saveComponentState(sortFilterModelToSave);\n}\n\n/**\n * Creates the URL query string representing the current search facets state.\n */\nfunction createPersistedQueryString(\n  sortFilterModelToSave: Partial<SearchExperimentRunsFacetsState> & { experiments?: any },\n) {\n  const serializedSortFilterModelToSave = shouldUseStateSerializer()\n    ? serializeFieldsToQueryString(sortFilterModelToSave)\n    : sortFilterModelToSave;\n\n  return QueryString.stringify(serializedSortFilterModelToSave, {\n    addQueryPrefix: true,\n    arrayFormat: 'comma',\n    encodeValuesOnly: true,\n  });\n}\n\n/**\n * Consumes object containing all fields parsed from search query and\n * separates those relevant to the search state from the rest.\n */\nfunction extractExperimentSearchFacetsState<\n  // Template for partial state type\n  PartialState extends Partial<SearchExperimentRunsFacetsState>,\n  // Template for partial state + the rest type\n  URLObject extends PartialState,\n>(rawURLSearchData: URLObject) {\n  const stateData: PartialState = {} as PartialState;\n  const restData: Omit<URLObject, keyof PartialState> = {} as Omit<URLObject, keyof PartialState>;\n\n  for (const field in rawURLSearchData) {\n    if (rawURLSearchData.hasOwnProperty(field)) {\n      const isKnownField = KNOWN_STATE_KEYS.includes(field);\n      Object.assign(isKnownField ? stateData : restData, { [field]: rawURLSearchData[field] });\n    }\n  }\n  return { stateData, restData };\n}\n\n/**\n * Persists current facets state in local storage and returns query string to be persisted in the URL.\n */\nexport function persistExperimentSearchFacetsState(\n  sortFilterModelToSave: SearchExperimentRunsFacetsState,\n  idKey: string,\n  currentLocationSearch = '',\n) {\n  const currentParameters = QueryString.parse(currentLocationSearch, {\n    ignoreQueryPrefix: true,\n    comma: true,\n    arrayLimit: 500,\n    decoder: urlParserDecoder,\n  });\n  // Extract current query params and re-persist relevant ones.\n  // In this case, it's only \"experiments\" field used for comparison.\n  const { experiments } = currentParameters;\n  persistLocalStorage(sortFilterModelToSave, idKey);\n  return createPersistedQueryString({ experiments, ...sortFilterModelToSave });\n}\n\n/**\n * Restores facets state from local storage and URL query string.\n *\n * @param location extracted e.g. from useLocation\n * @param idKey unique key for the storage\n * @param persistCombinedToLocalStorage if true, the combined state will be re-persisted to local storage\n */\nexport function restoreExperimentSearchFacetsState(locationSearch: string, idKey: string) {\n  // Step 1: prepare base value\n  let baseState = new SearchExperimentRunsFacetsState();\n\n  // Step 2: extract current state from local storage\n  try {\n    // TODO: decide if we want to use LocalStorageUtils store or fall back to direct use of localStorage\n    const localStorageInstance = LocalStorageUtils.getStoreForComponent('ExperimentPage', idKey);\n    const rawLocalStorageValue = localStorageInstance.loadComponentState();\n    if (validateFacetsState(rawLocalStorageValue)) {\n      const localStorageValue = shouldUseStateSerializer()\n        ? deserializeFieldsFromLocalStorage(rawLocalStorageValue)\n        : rawLocalStorageValue;\n      // Merge it with the base state only if it's valid\n      baseState = mergeFacetsStates(baseState, localStorageValue);\n    }\n  } catch {\n    Utils.logErrorAndNotifyUser(\n      `Error: malformed persisted search state for experiment(s) ${idKey}`,\n    );\n  }\n\n  // Preliminarily decode the search query, despite QueryString.parse doing the same.\n  // In certain scenarios the search values can arrive double-encoded\n  // (e.g. after being redirected from the login page) so by doing this, we ensure\n  // that the values will be properly decoded at the end.\n  const normalizedLocationSearch = decodeURIComponent(locationSearch);\n\n  // Step 3: extract data from URL...\n  const rawUrlData = QueryString.parse(normalizedLocationSearch, {\n    ignoreQueryPrefix: true,\n    comma: true,\n    arrayLimit: 500,\n    decoder: urlParserDecoder,\n  });\n  const { restData, stateData } = extractExperimentSearchFacetsState(rawUrlData);\n\n  const transformedStateData = shouldUseStateSerializer()\n    ? deserializeFieldsFromQueryString(stateData)\n    : stateData;\n\n  // If the is at least one relevant query params in URL, take URL into consideration.\n  const isURLStateEmpty = Object.keys(transformedStateData).length < 1;\n  if (!isURLStateEmpty) {\n    // We need merge specified fields from the URL query to the empty state.\n    // In certain scenarios, parts of the state (e.g. empty arrays) are not being persisted in the URL\n    // and we need to regenerate them.\n    const urlState = Object.assign(new SearchExperimentRunsFacetsState(), transformedStateData);\n    baseState = mergeFacetsStates(baseState, urlState);\n  }\n\n  // Step 4: persist combined state again\n  persistLocalStorage(baseState, idKey);\n\n  // Make it impossible to use comparing runs mode if flag is disabled\n  if (!shouldUseNextRunsComparisonUI()) {\n    baseState.isComparingRuns = false;\n  }\n\n  return {\n    state: baseState,\n    queryString: createPersistedQueryString({ ...restData, ...baseState }),\n  };\n}\n","import { isFunction } from 'lodash';\nimport React, { createContext, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport RequestStateWrapper from '../../../../common/components/RequestStateWrapper';\nimport { loadMoreRunsApi, searchRunsApi, searchRunsPayload } from '../../../actions';\nimport { useExperimentIds } from '../hooks/useExperimentIds';\nimport { SearchExperimentRunsFacetsState } from '../models/SearchExperimentRunsFacetsState';\nimport Utils from '../../../../common/utils/Utils';\nimport { searchModelVersionsApi } from '../../../../model-registry/actions';\nimport { UpdateExperimentSearchFacetsFn } from '../../../types';\nimport { useAsyncDispatch } from '../hooks/useAsyncDispatch';\nimport {\n  createSearchRunsParams,\n  fetchModelVersionsForRuns,\n  shouldRefetchRuns,\n} from '../utils/experimentPage.fetch-utils';\nimport {\n  persistExperimentSearchFacetsState,\n  restoreExperimentSearchFacetsState,\n} from '../utils/persistSearchFacets';\nimport { ErrorWrapper } from '../../../../common/utils/ErrorWrapper';\n\nexport interface GetExperimentRunsContextActions {\n  searchRunsApi: typeof searchRunsApi;\n  loadMoreRunsApi: typeof loadMoreRunsApi;\n  searchRunsPayload: typeof searchRunsPayload;\n  searchModelVersionsApi: typeof searchModelVersionsApi;\n}\n\nexport interface GetExperimentRunsContextType {\n  /**\n   * Represents the currently used filter/sort model\n   */\n  searchFacetsState: SearchExperimentRunsFacetsState;\n\n  /**\n   * Indicates if runs are being loaded at the moment\n   */\n  isLoadingRuns: boolean;\n\n  /**\n   * Function used to (re)fetch runs with the currently used filter set.\n   * Use scenarios: initial fetch, refreshing the list.\n   */\n  fetchExperimentRuns: () => void;\n\n  /**\n   * Function used to update the filter set and fetch new set of runs.\n   * First parameter is the subset of fields that the current sort/filter model will be merged with.\n   * If the second parameter is set to true, it will force re-fetching even if there\n   * are no sufficient changes to the model.\n   */\n  updateSearchFacets: UpdateExperimentSearchFacetsFn;\n\n  /**\n   * Function used to load more runs (if available) using currently used filters\n   */\n  loadMoreRuns: () => void;\n\n  /**\n   * Contains error descriptor if fetching runs failed\n   */\n  requestError: ErrorWrapper | null;\n\n  /**\n   * All run-related actions creators\n   */\n  actions: GetExperimentRunsContextActions;\n\n  /**\n   * True if there are more paginated runs available\n   */\n  moreRunsAvailable: boolean;\n\n  /**\n   * Returns true if user has not changed sort/filter model and is using the default one\n   */\n  isPristine: () => boolean;\n}\n\n/**\n * Wrapper context that serves two purposes:\n * - aggregates concrete redux actions necessary to perform experiments run search\n * - holds currently used state with sort and filter options, also is responsible for persisting it\n */\nexport const GetExperimentRunsContext = createContext<GetExperimentRunsContextType | null>(null);\n\n/**\n * Provider component for SearchExperimentRunsContext.\n * Accepts concrete redux actions for searching runs.\n */\nexport const GetExperimentRunsContextProvider = ({\n  children,\n  actions,\n}: React.PropsWithChildren<{\n  actions: GetExperimentRunsContextActions;\n}>) => {\n  const history = useHistory();\n  const experimentIds = useExperimentIds();\n  const dispatch = useAsyncDispatch();\n\n  const [searchRunsRequestId, setSearchRunsRequestId] = useState<string>('');\n  const [isLoadingRuns, setIsLoadingRuns] = useState(false);\n  const [moreRunsAvailable, setMoreRunsAvailable] = useState(false);\n  const [requestError, setRequestError] = useState<any>(null);\n\n  const experimentIdsHash = useMemo(() => JSON.stringify(experimentIds.sort()), [experimentIds]);\n\n  const [searchFacetsState, setSearchFacetsState] = useState<SearchExperimentRunsFacetsState>(\n    () => {\n      // useState() initialization function that restores current search facets state\n      const { queryString, state } = restoreExperimentSearchFacetsState(\n        history.location.search,\n        experimentIdsHash,\n      );\n\n      // If resulting query string differs from the current one, replace it.\n      if (history.location.search !== queryString) {\n        history.replace(`${history.location.pathname}${queryString}`);\n      }\n      return state;\n    },\n  );\n\n  // Let's save the immediate array of active requests so\n  // it will be checked against later on\n  const activeRequests = useRef<{ active: boolean; id: string }[]>([]);\n\n  // Next page token is not a stateful field and can be mutable.\n  const nextPageToken = useRef<string>('');\n\n  // Indicates reference time for fetching subsuquent pages which\n  // requires us to keep the same startTime parameter value.\n  // Not a stateful field.\n  const referenceTime = useRef<string>('');\n\n  // Indicates if user has explicitly changed the sort/filter state\n  const isPristineFlag = useRef(true);\n  // Immutable method that returns value from the mutable flag\n  const isPristine = useCallback(() => isPristineFlag.current, []);\n\n  const internalFetchExperimentRuns = useCallback(\n    (\n      requestSearchFacetsState: SearchExperimentRunsFacetsState,\n      requestExperimentIds: string[],\n      requestReferenceTime = Date.now(),\n      requestNextPageToken?: string,\n    ) => {\n      const loadMore = Boolean(requestNextPageToken);\n      if (!loadMore) {\n        referenceTime.current = requestReferenceTime;\n      }\n\n      const actionToUse = loadMore ? actions.loadMoreRunsApi : actions.searchRunsApi;\n\n      const action = actionToUse(\n        createSearchRunsParams(\n          requestExperimentIds,\n          requestSearchFacetsState,\n          requestReferenceTime,\n          requestNextPageToken || undefined,\n        ),\n      );\n\n      // Immediately set loading runs flag, don't wait for RequestStateWrapper\n      // otherwise it will result in the unnecessary rerender\n      setIsLoadingRuns(true);\n      dispatch(action)\n        .then((data) => {\n          const { value } = data;\n          nextPageToken.current = value.next_page_token;\n          setMoreRunsAvailable(Boolean(value.next_page_token));\n          fetchModelVersionsForRuns(value.runs || [], actions.searchModelVersionsApi, dispatch);\n\n          // If this request is the current one (meaning found in the active requests list), set loading flag to false\n          if (\n            activeRequests.current.some(\n              (activeRequest) => activeRequest.id === action.meta.id && !activeRequest.active,\n            )\n          ) {\n            setIsLoadingRuns(false);\n          }\n        })\n        .catch((e) => {\n          Utils.logErrorAndNotifyUser(e, 0);\n          setIsLoadingRuns(false);\n        });\n\n      setSearchRunsRequestId(action.meta.id);\n    },\n    [dispatch, actions],\n  );\n\n  const loadMoreRuns = useCallback(() => {\n    internalFetchExperimentRuns(\n      searchFacetsState,\n      experimentIds,\n      referenceTime.current || undefined,\n      nextPageToken.current || undefined,\n    );\n  }, [internalFetchExperimentRuns, searchFacetsState, experimentIds]);\n\n  /**\n   * Fetches fresh batch of runs using current sort model\n   */\n  const fetchExperimentRuns = useCallback(() => {\n    internalFetchExperimentRuns(searchFacetsState, experimentIds);\n  }, [experimentIds, internalFetchExperimentRuns, searchFacetsState]);\n\n  const persistState = useCallback(\n    (sortFilterModelToSave: SearchExperimentRunsFacetsState, replaceHistory: boolean) => {\n      const newQueryString = persistExperimentSearchFacetsState(\n        sortFilterModelToSave,\n        experimentIdsHash,\n        history.location.search,\n      );\n      if (history.location.search !== newQueryString) {\n        const newPath = `${history.location.pathname}${newQueryString}`;\n        if (replaceHistory) {\n          history.replace(newPath);\n        } else {\n          history.push(newPath);\n        }\n      }\n    },\n    [history, experimentIdsHash],\n  );\n\n  /**\n   * Updates current search facets model and invokes re-fetching runs if necessary.\n   * Persists new search state in storage and URL.\n   *\n   * @param newFilterModel A search facets model to replace the current one. It can\n   *                       be provided in the form of the partial object that will be merged\n   *                       with the current one or the setter function having the current model\n   *                       provided as a parameter and returning the merged model, similarly to the\n   *                       React's `setState()` pattern.\n   * @param updateOptions  Additional update options provided:\n   *                       - `forceRefresh` - if set to `true`, will force re-fetching runs\n   *                         regardless of the resulting search facets model.\n   *                       - `preservePristine` - if set to `true`, will not change internal \"pristine\"\n   *                         flag used to detect if user have tampered with the search model.\n   *\n   * @examples\n   * ```\n   * // Simple use, updates search filter\n   * updateSearchFacets({\n   *   searchFilter: 'attributes.start_time > 1000',\n   * });\n   *\n   * // Setter function variant, updates selected columns\n   * updateSearchFacets((currentModel) => ({\n   *   ...currentModel,\n   *   selectedColumns: [...currentModel.selectedColumns, 'someColumn'],\n   * }));\n   *\n   * // Using function to force re-fetch while retaining pristine flag\n   * const forceRefreshModel = updateSearchFacets({}, {\n   *   forceRefresh: true,\n   *   preservePristine: true,\n   * });\n   * ```\n   */\n  const updateSearchFacets = useCallback<UpdateExperimentSearchFacetsFn>(\n    (newFilterModel, updateOptions = {}) => {\n      const {\n        forceRefresh = false,\n        preservePristine = false,\n        replaceHistory = false,\n      } = updateOptions;\n      // While dispatching new state, append new filter model\n      // and fetch new runs using it\n      setSearchFacetsState((oldModel) => {\n        const newModel = isFunction(newFilterModel)\n          ? newFilterModel(oldModel)\n          : { ...oldModel, ...newFilterModel };\n        if (forceRefresh || shouldRefetchRuns(oldModel, newModel)) {\n          internalFetchExperimentRuns(newModel, experimentIds);\n        }\n        persistState(newModel, replaceHistory);\n        return newModel;\n      });\n      // Update the flag which indicates that the user have performed\n      // a search with changed sort/filter model\n      if (!preservePristine) {\n        isPristineFlag.current = false;\n      }\n    },\n    [experimentIds, internalFetchExperimentRuns, persistState],\n  );\n\n  /**\n   * Dynamically restore searchFacets state on history navigation.\n   * Note: MLFlow running in iFrame won't get proper history pop updates\n   * from overrarching router, meaning that history.listen() won't work at all. In this case,\n   * the page will get reloaded and useState()'s initialization function will restore the state instead.\n   */\n  useEffect(() => {\n    return history.listen((location, action) => {\n      if (action === 'POP') {\n        const { state } = restoreExperimentSearchFacetsState(location.search, experimentIdsHash);\n        updateSearchFacets(state);\n      }\n    });\n  }, [history, experimentIdsHash, updateSearchFacets]);\n\n  const contextValue = useMemo(\n    () => ({\n      actions,\n      searchFacetsState,\n      fetchExperimentRuns,\n      updateSearchFacets,\n      loadMoreRuns,\n      requestError,\n      isLoadingRuns,\n      moreRunsAvailable,\n      isPristine,\n    }),\n    [\n      actions,\n      searchFacetsState,\n      fetchExperimentRuns,\n      loadMoreRuns,\n      requestError,\n      isLoadingRuns,\n      updateSearchFacets,\n      moreRunsAvailable,\n      isPristine,\n    ],\n  );\n\n  const renderFn = (_isLoading: false, _renderError: any, requests: any[]) => {\n    // Retain the current version of requests array\n    activeRequests.current = requests;\n\n    requests.forEach((request) => {\n      setRequestError(request.error);\n    });\n    return children;\n  };\n\n  return (\n    <GetExperimentRunsContext.Provider value={contextValue}>\n      <RequestStateWrapper\n        shouldOptimisticallyRender\n        // eslint-disable-next-line no-trailing-spaces\n        requestIds={searchRunsRequestId ? [searchRunsRequestId] : []}\n      >\n        {renderFn}\n      </RequestStateWrapper>\n    </GetExperimentRunsContext.Provider>\n  );\n};\n","import { useContext } from 'react';\n\nimport { GetExperimentRunsContext } from '../contexts/GetExperimentRunsContext';\n\nexport const useFetchExperimentRuns = () => {\n  const getExperimentRunsContextValue = useContext(GetExperimentRunsContext);\n\n  if (!getExperimentRunsContextValue) {\n    throw new Error('Trying to use SearchExperimentRunsContext actions outside of the context!');\n  }\n\n  return getExperimentRunsContextValue;\n};\n","import { useCallback } from 'react';\nimport DeleteRunModal from '../../../modals/DeleteRunModal';\nimport { RenameRunModal } from '../../../modals/RenameRunModal';\nimport RestoreRunModal from '../../../modals/RestoreRunModal';\nimport { useFetchExperimentRuns } from '../../hooks/useFetchExperimentRuns';\n\nexport interface ExperimentViewModalsProps {\n  showDeleteRunModal: boolean;\n  showRestoreRunModal: boolean;\n  showRenameRunModal: boolean;\n  runsSelected: Record<string, boolean>;\n  onCloseDeleteRunModal: () => void;\n  onCloseRestoreRunModal: () => void;\n  onCloseRenameRunModal: () => void;\n  renamedRunName: string;\n}\n\n/**\n * A component that contains modals required for the run\n * management, i.e. delete and restore actions.\n */\nexport const ExperimentViewRunModals = ({\n  showDeleteRunModal,\n  showRestoreRunModal,\n  showRenameRunModal,\n  runsSelected,\n  onCloseDeleteRunModal,\n  onCloseRestoreRunModal,\n  onCloseRenameRunModal,\n  renamedRunName,\n}: ExperimentViewModalsProps) => {\n  const { updateSearchFacets } = useFetchExperimentRuns();\n\n  const selectedRunIds = Object.entries(runsSelected)\n    .filter(([, selected]) => selected)\n    .map(([key]) => key);\n\n  /**\n   * Function used to refresh the list after renaming the run\n   */\n  const refreshRuns = useCallback(\n    () =>\n      updateSearchFacets(\n        {},\n        {\n          forceRefresh: true,\n          preservePristine: true,\n        },\n      ),\n    [updateSearchFacets],\n  );\n\n  return (\n    <>\n      <DeleteRunModal\n        isOpen={showDeleteRunModal}\n        onClose={onCloseDeleteRunModal}\n        selectedRunIds={selectedRunIds}\n      />\n      <RestoreRunModal\n        isOpen={showRestoreRunModal}\n        onClose={onCloseRestoreRunModal}\n        selectedRunIds={selectedRunIds}\n      />\n      <RenameRunModal\n        runUuid={selectedRunIds[0]}\n        onClose={onCloseRenameRunModal}\n        runName={renamedRunName}\n        isOpen={showRenameRunModal}\n        onSuccess={() => refreshRuns()}\n      />\n    </>\n  );\n};\n","import { Button, Option, Select, Tooltip } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport { LIFECYCLE_FILTER } from '../../../../constants';\nimport Routes from '../../../../routes';\nimport { UpdateExperimentSearchFacetsFn } from '../../../../types';\nimport { SearchExperimentRunsFacetsState } from '../../models/SearchExperimentRunsFacetsState';\nimport { SearchExperimentRunsViewState } from '../../models/SearchExperimentRunsViewState';\nimport { getStartTimeColumnDisplayName } from '../../utils/experimentPage.common-utils';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunModals } from './ExperimentViewRunModals';\n\nexport type ExperimentViewRunsControlsActionsProps = {\n  viewState: SearchExperimentRunsViewState;\n\n  searchFacetsState: SearchExperimentRunsFacetsState;\n  updateSearchFacets: UpdateExperimentSearchFacetsFn;\n  runsData: ExperimentRunsSelectorResult;\n};\n\nconst CompareRunsButtonWrapper: React.FC = ({ children }) => <>{children}</>;\n\nexport const ExperimentViewRunsControlsActions = React.memo(\n  ({\n    viewState,\n    runsData,\n    searchFacetsState,\n    updateSearchFacets,\n  }: ExperimentViewRunsControlsActionsProps) => {\n    const { runsSelected } = viewState;\n    const { runInfos } = runsData;\n    const { lifecycleFilter, startTime } = searchFacetsState;\n\n    const history = useHistory();\n    const intl = useIntl();\n\n    // List of labels for \"start time\" filter\n    const startTimeColumnLabels = useMemo(() => getStartTimeColumnDisplayName(intl), [intl]);\n\n    const [showDeleteRunModal, setShowDeleteRunModal] = useState(false);\n    const [showRestoreRunModal, setShowRestoreRunModal] = useState(false);\n    const [showRenameRunModal, setShowRenameRunModal] = useState(false);\n    const [renamedRunName, setRenamedRunName] = useState('');\n\n    const renameButtonClicked = useCallback(() => {\n      const runsSelectedList = Object.keys(runsSelected);\n      const selectedRun = runInfos.find((info) => info.run_uuid === runsSelectedList[0]);\n      if (selectedRun) {\n        setRenamedRunName(selectedRun.run_name);\n        setShowRenameRunModal(true);\n      }\n    }, [runInfos, runsSelected]);\n\n    const compareButtonClicked = useCallback(() => {\n      const runsSelectedList = Object.keys(runsSelected);\n      const experimentIds = runInfos\n        .filter(({ run_uuid }: any) => runsSelectedList.includes(run_uuid))\n        .map(({ experiment_id }: any) => experiment_id);\n      history.push(\n        Routes.getCompareRunPageRoute(runsSelectedList, [...new Set(experimentIds)].sort()),\n      );\n    }, [history, runInfos, runsSelected]);\n\n    const onDeleteRun = useCallback(() => setShowDeleteRunModal(true), []);\n    const onRestoreRun = useCallback(() => setShowRestoreRunModal(true), []);\n    const onCloseDeleteRunModal = useCallback(() => setShowDeleteRunModal(false), []);\n    const onCloseRestoreRunModal = useCallback(() => setShowRestoreRunModal(false), []);\n    const onCloseRenameRunModal = useCallback(() => setShowRenameRunModal(false), []);\n\n    const selectedRunsCount = Object.values(viewState.runsSelected).filter(Boolean).length;\n    const canRestoreRuns = selectedRunsCount > 0;\n    const canRenameRuns = selectedRunsCount === 1;\n    const canCompareRuns = selectedRunsCount > 1;\n    const showActionButtons = canCompareRuns || canRenameRuns || canRestoreRuns;\n\n    const currentLifecycleFilterLabel = (\n      <>\n        <FormattedMessage\n          defaultMessage='State:'\n          description='Filtering label to filter experiments based on state of active or deleted'\n        />{' '}\n        {lifecycleFilter}\n      </>\n    );\n\n    const currentStartTimeFilterLabel = (\n      <>\n        <FormattedMessage\n          defaultMessage='Time created'\n          description='Label for the start time select dropdown for experiment runs view'\n        />\n        : {startTimeColumnLabels[startTime as keyof typeof startTimeColumnLabels]}\n      </>\n    );\n\n    return (\n      <div css={styles.controlBar}>\n        <ExperimentViewRunModals\n          runsSelected={runsSelected}\n          onCloseRenameRunModal={onCloseRenameRunModal}\n          onCloseDeleteRunModal={onCloseDeleteRunModal}\n          onCloseRestoreRunModal={onCloseRestoreRunModal}\n          showDeleteRunModal={showDeleteRunModal}\n          showRestoreRunModal={showRestoreRunModal}\n          showRenameRunModal={showRenameRunModal}\n          renamedRunName={renamedRunName}\n        />\n\n        {!showActionButtons && (\n          <>\n            <Select\n              className='start-time-select'\n              value={{ value: startTime, label: currentStartTimeFilterLabel }}\n              labelInValue\n              onChange={({ value: newStartTime }) => {\n                updateSearchFacets({ startTime: newStartTime });\n              }}\n              data-test-id='start-time-select-dropdown'\n              // Temporarily we're disabling virtualized list to maintain\n              // backwards compatiblity. Functional unit tests rely heavily\n              // on non-virtualized values.\n              dangerouslySetAntdProps={{ virtual: false } as any}\n            >\n              {Object.keys(startTimeColumnLabels).map((startTimeKey) => (\n                <Option\n                  key={startTimeKey}\n                  title={startTimeColumnLabels[startTimeKey as keyof typeof startTimeColumnLabels]}\n                  data-test-id={`start-time-select-${startTimeKey}`}\n                  value={startTimeKey}\n                >\n                  {startTimeColumnLabels[startTimeKey as keyof typeof startTimeColumnLabels]}\n                </Option>\n              ))}\n            </Select>\n\n            <Select\n              value={{ value: lifecycleFilter, label: currentLifecycleFilterLabel }}\n              labelInValue\n              data-testid='lifecycle-filter'\n              onChange={({ value }) => updateSearchFacets({ lifecycleFilter: value })}\n            >\n              <Select.Option data-testid='active-runs-menu-item' value={LIFECYCLE_FILTER.ACTIVE}>\n                <FormattedMessage\n                  defaultMessage='Active'\n                  description='Linked model dropdown option to show active experiment runs'\n                />\n              </Select.Option>\n              <Select.Option data-testid='deleted-runs-menu-item' value={LIFECYCLE_FILTER.DELETED}>\n                <FormattedMessage\n                  defaultMessage='Deleted'\n                  description='Linked model dropdown option to show deleted experiment runs'\n                />\n              </Select.Option>\n            </Select>\n          </>\n        )}\n\n        {showActionButtons && (\n          <>\n            <Button\n              data-testid='run-rename-button'\n              onClick={renameButtonClicked}\n              disabled={!canRenameRuns}\n            >\n              <FormattedMessage\n                defaultMessage='Rename'\n                description='Label for the rename run button above the experiment runs table'\n              />\n            </Button>\n            {lifecycleFilter === LIFECYCLE_FILTER.ACTIVE ? (\n              <Button\n                data-testid='runs-delete-button'\n                disabled={!canRestoreRuns}\n                onClick={onDeleteRun}\n                danger\n              >\n                <FormattedMessage\n                  defaultMessage='Delete'\n                  // eslint-disable-next-line max-len\n                  description='String for the delete button to delete a particular experiment run'\n                />\n              </Button>\n            ) : null}\n            {lifecycleFilter === LIFECYCLE_FILTER.DELETED ? (\n              <Button\n                data-testid='runs-restore-button'\n                disabled={!canRestoreRuns}\n                onClick={onRestoreRun}\n              >\n                <FormattedMessage\n                  defaultMessage='Restore'\n                  // eslint-disable-next-line max-len\n                  description='String for the restore button to undo the experiments that were deleted'\n                />\n              </Button>\n            ) : null}\n            <div css={styles.buttonSeparator} />\n            <CompareRunsButtonWrapper>\n              <Button\n                data-testid='runs-compare-button'\n                disabled={!canCompareRuns}\n                onClick={compareButtonClicked}\n              >\n                <FormattedMessage\n                  defaultMessage='Compare'\n                  // eslint-disable-next-line max-len\n                  description='String for the compare button to compare experiment runs to find an ideal model'\n                />\n              </Button>\n            </CompareRunsButtonWrapper>\n          </>\n        )}\n      </div>\n    );\n  },\n);\n\nconst styles = {\n  groupSeparator: () => ({ flex: 1 }),\n  buttonSeparator: (theme: Theme) => ({\n    borderLeft: `1px solid ${theme.colors.border}`,\n    marginLeft: theme.spacing.xs,\n    marginRight: theme.spacing.xs,\n    height: '100%',\n  }),\n  controlBar: (theme: Theme) => ({\n    display: 'flex',\n    gap: theme.spacing.sm,\n    alignItems: 'center',\n    paddingTop: theme.spacing.sm,\n    borderTop: `1px solid ${theme.colors.border}`,\n  }),\n};\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nfunction UnitNumber(_ref) {\n  var prefixCls = _ref.prefixCls,\n      value = _ref.value,\n      current = _ref.current,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? 0 : _ref$offset;\n  var style;\n\n  if (offset) {\n    style = {\n      position: 'absolute',\n      top: \"\".concat(offset, \"00%\"),\n      left: 0\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: style,\n    className: classNames(\"\".concat(prefixCls, \"-only-unit\"), {\n      current: current\n    })\n  }, value);\n}\n\nfunction getOffset(start, end, unit) {\n  var index = start;\n  var offset = 0;\n\n  while ((index + 10) % 10 !== end) {\n    index += unit;\n    offset += unit;\n  }\n\n  return offset;\n}\n\nexport default function SingleNumber(props) {\n  var prefixCls = props.prefixCls,\n      originCount = props.count,\n      originValue = props.value;\n  var value = Number(originValue);\n  var count = Math.abs(originCount);\n\n  var _React$useState = React.useState(value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      prevValue = _React$useState2[0],\n      setPrevValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(count),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      prevCount = _React$useState4[0],\n      setPrevCount = _React$useState4[1]; // ============================= Events =============================\n\n\n  var onTransitionEnd = function onTransitionEnd() {\n    setPrevValue(value);\n    setPrevCount(count);\n  }; // Fallback if transition event not support\n\n\n  React.useEffect(function () {\n    var timeout = setTimeout(function () {\n      onTransitionEnd();\n    }, 1000);\n    return function () {\n      clearTimeout(timeout);\n    };\n  }, [value]); // ============================= Render =============================\n  // Render unit list\n\n  var unitNodes;\n  var offsetStyle;\n\n  if (prevValue === value || Number.isNaN(value) || Number.isNaN(prevValue)) {\n    // Nothing to change\n    unitNodes = [/*#__PURE__*/React.createElement(UnitNumber, _extends({}, props, {\n      key: value,\n      current: true\n    }))];\n    offsetStyle = {\n      transition: 'none'\n    };\n  } else {\n    unitNodes = []; // Fill basic number units\n\n    var end = value + 10;\n    var unitNumberList = [];\n\n    for (var index = value; index <= end; index += 1) {\n      unitNumberList.push(index);\n    } // Fill with number unit nodes\n\n\n    var prevIndex = unitNumberList.findIndex(function (n) {\n      return n % 10 === prevValue;\n    });\n    unitNodes = unitNumberList.map(function (n, index) {\n      var singleUnit = n % 10;\n      return /*#__PURE__*/React.createElement(UnitNumber, _extends({}, props, {\n        key: n,\n        value: singleUnit,\n        offset: index - prevIndex,\n        current: index === prevIndex\n      }));\n    }); // Calculate container offset value\n\n    var unit = prevCount < count ? 1 : -1;\n    offsetStyle = {\n      transform: \"translateY(\".concat(-getOffset(prevValue, value, unit), \"00%)\")\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-only\"),\n    style: offsetStyle,\n    onTransitionEnd: onTransitionEnd\n  }, unitNodes);\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport { cloneElement } from '../_util/reactNode';\nimport SingleNumber from './SingleNumber';\n\nvar ScrollNumber = function ScrollNumber(_a) {\n  var customizePrefixCls = _a.prefixCls,\n      count = _a.count,\n      className = _a.className,\n      motionClassName = _a.motionClassName,\n      style = _a.style,\n      title = _a.title,\n      show = _a.show,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'sup' : _a$component,\n      children = _a.children,\n      restProps = __rest(_a, [\"prefixCls\", \"count\", \"className\", \"motionClassName\", \"style\", \"title\", \"show\", \"component\", \"children\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls;\n\n  var prefixCls = getPrefixCls('scroll-number', customizePrefixCls); // ============================ Render ============================\n\n  var newProps = _extends(_extends({}, restProps), {\n    'data-show': show,\n    style: style,\n    className: classNames(prefixCls, className, motionClassName),\n    title: title\n  }); // Only integer need motion\n\n\n  var numberNodes = count;\n\n  if (count && Number(count) % 1 === 0) {\n    var numberList = String(count).split('');\n    numberNodes = numberList.map(function (num, i) {\n      return /*#__PURE__*/React.createElement(SingleNumber, {\n        prefixCls: prefixCls,\n        count: Number(count),\n        value: num // eslint-disable-next-line react/no-array-index-key\n        ,\n        key: numberList.length - i\n      });\n    });\n  } // allow specify the border\n  // mock border-color by box-shadow for compatible with old usage:\n  // <Badge count={4} style={{ backgroundColor: '#fff', color: '#999', borderColor: '#d9d9d9' }} />\n\n\n  if (style && style.borderColor) {\n    newProps.style = _extends(_extends({}, style), {\n      boxShadow: \"0 0 0 1px \".concat(style.borderColor, \" inset\")\n    });\n  }\n\n  if (children) {\n    return cloneElement(children, function (oriProps) {\n      return {\n        className: classNames(\"\".concat(prefixCls, \"-custom-component\"), oriProps === null || oriProps === void 0 ? void 0 : oriProps.className, motionClassName)\n      };\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(component, newProps, numberNodes);\n};\n\nexport default ScrollNumber;","import { PresetColorTypes } from '../_util/colors'; // eslint-disable-next-line import/prefer-default-export\n\nexport function isPresetColor(color) {\n  return PresetColorTypes.indexOf(color) !== -1;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport { isPresetColor } from './utils';\n\nvar Ribbon = function Ribbon(_ref) {\n  var _classNames;\n\n  var className = _ref.className,\n      customizePrefixCls = _ref.prefixCls,\n      style = _ref.style,\n      color = _ref.color,\n      children = _ref.children,\n      text = _ref.text,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? 'end' : _ref$placement;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var prefixCls = getPrefixCls('ribbon', customizePrefixCls);\n  var colorInPreset = isPresetColor(color);\n  var ribbonCls = classNames(prefixCls, \"\".concat(prefixCls, \"-placement-\").concat(placement), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-color-\").concat(color), colorInPreset), _classNames), className);\n  var colorStyle = {};\n  var cornerColorStyle = {};\n\n  if (color && !colorInPreset) {\n    colorStyle.background = color;\n    cornerColorStyle.color = color;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-wrapper\")\n  }, children, /*#__PURE__*/React.createElement(\"div\", {\n    className: ribbonCls,\n    style: _extends(_extends({}, colorStyle), style)\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-text\")\n  }, text), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-corner\"),\n    style: cornerColorStyle\n  })));\n};\n\nexport default Ribbon;","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useMemo, useRef } from 'react';\nimport CSSMotion from 'rc-motion';\nimport classNames from 'classnames';\nimport ScrollNumber from './ScrollNumber';\nimport Ribbon from './Ribbon';\nimport { ConfigContext } from '../config-provider';\nimport { cloneElement } from '../_util/reactNode';\nimport { isPresetColor } from './utils';\n\nvar Badge = function Badge(_a) {\n  var _classNames, _classNames2;\n\n  var customizePrefixCls = _a.prefixCls,\n      customizeScrollNumberPrefixCls = _a.scrollNumberPrefixCls,\n      children = _a.children,\n      status = _a.status,\n      text = _a.text,\n      color = _a.color,\n      _a$count = _a.count,\n      count = _a$count === void 0 ? null : _a$count,\n      _a$overflowCount = _a.overflowCount,\n      overflowCount = _a$overflowCount === void 0 ? 99 : _a$overflowCount,\n      _a$dot = _a.dot,\n      dot = _a$dot === void 0 ? false : _a$dot,\n      _a$size = _a.size,\n      size = _a$size === void 0 ? 'default' : _a$size,\n      title = _a.title,\n      offset = _a.offset,\n      style = _a.style,\n      className = _a.className,\n      _a$showZero = _a.showZero,\n      showZero = _a$showZero === void 0 ? false : _a$showZero,\n      restProps = __rest(_a, [\"prefixCls\", \"scrollNumberPrefixCls\", \"children\", \"status\", \"text\", \"color\", \"count\", \"overflowCount\", \"dot\", \"size\", \"title\", \"offset\", \"style\", \"className\", \"showZero\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var prefixCls = getPrefixCls('badge', customizePrefixCls); // ================================ Misc ================================\n\n  var numberedDisplayCount = count > overflowCount ? \"\".concat(overflowCount, \"+\") : count;\n  var hasStatus = status !== null && status !== undefined || color !== null && color !== undefined;\n  var isZero = numberedDisplayCount === '0' || numberedDisplayCount === 0;\n  var showAsDot = dot && !isZero || hasStatus;\n  var mergedCount = showAsDot ? '' : numberedDisplayCount;\n  var isHidden = useMemo(function () {\n    var isEmpty = mergedCount === null || mergedCount === undefined || mergedCount === '';\n    return (isEmpty || isZero && !showZero) && !showAsDot;\n  }, [mergedCount, isZero, showZero, showAsDot]); // Count should be cache in case hidden change it\n\n  var countRef = useRef(count);\n\n  if (!isHidden) {\n    countRef.current = count;\n  }\n\n  var livingCount = countRef.current; // We need cache count since remove motion should not change count display\n\n  var displayCountRef = useRef(mergedCount);\n\n  if (!isHidden) {\n    displayCountRef.current = mergedCount;\n  }\n\n  var displayCount = displayCountRef.current; // We will cache the dot status to avoid shaking on leaved motion\n\n  var isDotRef = useRef(showAsDot);\n\n  if (!isHidden) {\n    isDotRef.current = showAsDot;\n  } // =============================== Styles ===============================\n\n\n  var mergedStyle = useMemo(function () {\n    if (!offset) {\n      return _extends({}, style);\n    }\n\n    var offsetStyle = {\n      marginTop: offset[1]\n    };\n\n    if (direction === 'rtl') {\n      offsetStyle.left = parseInt(offset[0], 10);\n    } else {\n      offsetStyle.right = -parseInt(offset[0], 10);\n    }\n\n    return _extends(_extends({}, offsetStyle), style);\n  }, [direction, offset, style]); // =============================== Render ===============================\n  // >>> Title\n\n  var titleNode = title !== null && title !== void 0 ? title : typeof livingCount === 'string' || typeof livingCount === 'number' ? livingCount : undefined; // >>> Status Text\n\n  var statusTextNode = isHidden || !text ? null : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-status-text\")\n  }, text); // >>> Display Component\n\n  var displayNode = !livingCount || _typeof(livingCount) !== 'object' ? undefined : cloneElement(livingCount, function (oriProps) {\n    return {\n      style: _extends(_extends({}, mergedStyle), oriProps.style)\n    };\n  }); // Shared styles\n\n  var statusCls = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-status-dot\"), hasStatus), _defineProperty(_classNames, \"\".concat(prefixCls, \"-status-\").concat(status), !!status), _defineProperty(_classNames, \"\".concat(prefixCls, \"-status-\").concat(color), isPresetColor(color)), _classNames));\n  var statusStyle = {};\n\n  if (color && !isPresetColor(color)) {\n    statusStyle.background = color;\n  }\n\n  var badgeClassName = classNames(prefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-status\"), hasStatus), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-not-a-wrapper\"), !children), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames2), className); // <Badge status=\"success\" />\n\n  if (!children && hasStatus) {\n    var statusTextColor = mergedStyle.color;\n    return /*#__PURE__*/React.createElement(\"span\", _extends({}, restProps, {\n      className: badgeClassName,\n      style: mergedStyle\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: statusCls,\n      style: statusStyle\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: statusTextColor\n      },\n      className: \"\".concat(prefixCls, \"-status-text\")\n    }, text));\n  } // <Badge status=\"success\" count={<Icon type=\"xxx\" />}></Badge>\n\n\n  return /*#__PURE__*/React.createElement(\"span\", _extends({}, restProps, {\n    className: badgeClassName\n  }), children, /*#__PURE__*/React.createElement(CSSMotion, {\n    visible: !isHidden,\n    motionName: \"\".concat(prefixCls, \"-zoom\"),\n    motionAppear: false\n  }, function (_ref) {\n    var _classNames3;\n\n    var motionClassName = _ref.className;\n    var scrollNumberPrefixCls = getPrefixCls('scroll-number', customizeScrollNumberPrefixCls);\n    var isDot = isDotRef.current;\n    var scrollNumberCls = classNames((_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-dot\"), isDot), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-count\"), !isDot), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-count-sm\"), size === 'small'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-multiple-words\"), !isDot && displayCount && displayCount.toString().length > 1), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-status-\").concat(status), !!status), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-status-\").concat(color), isPresetColor(color)), _classNames3));\n\n    var scrollNumberStyle = _extends({}, mergedStyle);\n\n    if (color && !isPresetColor(color)) {\n      scrollNumberStyle = scrollNumberStyle || {};\n      scrollNumberStyle.background = color;\n    }\n\n    return /*#__PURE__*/React.createElement(ScrollNumber, {\n      prefixCls: scrollNumberPrefixCls,\n      show: !isHidden,\n      motionClassName: motionClassName,\n      className: scrollNumberCls,\n      count: displayCount,\n      title: titleNode,\n      style: scrollNumberStyle,\n      key: \"scrollNumber\"\n    }, displayNode);\n  }), statusTextNode);\n};\n\nBadge.Ribbon = Ribbon;\nexport default Badge;","import { Button, SyncIcon } from '@databricks/design-system';\nimport React, { useCallback, useEffect, useState } from 'react';\n// TODO: de-antd-ify Badge as soon as it appears in the design system\nimport { Theme } from '@emotion/react';\nimport { Badge } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { MAX_DETECT_NEW_RUNS_RESULTS, POLL_INTERVAL } from '../../../../constants';\nimport { ExperimentStoreEntities } from '../../../../types';\nimport { useExperimentIds } from '../../hooks/useExperimentIds';\nimport { useFetchExperimentRuns } from '../../hooks/useFetchExperimentRuns';\n\nexport interface ExperimentViewRefreshButtonProps {\n  runInfos: ExperimentStoreEntities['runInfosByUuid'];\n}\n\n/**\n * A component that displays \"refresh runs\" button with the relevant number\n * of the new runs and handles the refresh action.\n */\nexport const ExperimentViewRefreshButtonImpl = React.memo(\n  ({ runInfos }: React.PropsWithChildren<ExperimentViewRefreshButtonProps>) => {\n    const {\n      actions: { searchRunsPayload },\n      updateSearchFacets,\n    } = useFetchExperimentRuns();\n\n    const experimentIds = useExperimentIds();\n\n    // Keeps the time of the last runs fetch\n    const [lastFetchTime, setLastFetchTime] = useState(0);\n\n    // Keeps the number of available new runs\n    const [newRunsCount, setNewRunsCount] = useState(0);\n\n    // Refreshes the runs\n    const refreshRuns = useCallback(\n      () =>\n        updateSearchFacets(\n          {},\n          {\n            forceRefresh: true,\n            preservePristine: true,\n          },\n        ),\n      [updateSearchFacets],\n    );\n\n    // We're resetting number of new runs and the fetch date\n    // every time when the runs payload has changed\n    useEffect(() => {\n      setNewRunsCount(0);\n      setLastFetchTime(() => Date.now());\n    }, [runInfos]);\n\n    useEffect(\n      () => {\n        if (!lastFetchTime) {\n          return undefined;\n        }\n        const interval = setInterval(() => {\n          // Let's query for new runs that have started after a certain time\n          const searchPayloadData: any = {\n            experimentIds,\n            filter: `attributes.start_time > ${lastFetchTime}`,\n            // We're not interested in more than 26 new runs\n            maxResults: MAX_DETECT_NEW_RUNS_RESULTS,\n          };\n          searchRunsPayload(searchPayloadData).then((result) => {\n            const newRuns = result.runs?.length || 0;\n            setNewRunsCount(newRuns);\n          });\n        }, POLL_INTERVAL);\n        return () => clearInterval(interval);\n      },\n      // We're resetting the interval each time the reference time or experiment IDs have changed\n      [lastFetchTime, searchRunsPayload, experimentIds],\n    );\n\n    return (\n      <Badge\n        count={newRunsCount}\n        offset={[-5, 5]}\n        css={styles.pill}\n        overflowCount={MAX_DETECT_NEW_RUNS_RESULTS - 1}\n      >\n        <Button onClick={refreshRuns} data-testid='runs-refresh-button' icon={<SyncIcon />}>\n          <FormattedMessage\n            defaultMessage='Refresh'\n            description='refresh button text to refresh the experiment runs'\n          />\n        </Button>\n      </Badge>\n    );\n  },\n);\n\nconst styles = {\n  pill: (theme: Theme) => ({ sup: { backgroundColor: theme.colors.lime, zIndex: 1 } }),\n};\n\n/**\n * The only thing that we're interested in the store is the current set of runInfos.\n * We're going to monitor it so we will know when new runs are fetched.\n */\nconst mapStateToProps = (state: { entities: ExperimentStoreEntities }) => {\n  return { runInfos: state.entities.runInfosByUuid };\n};\n\nexport const ExperimentViewRefreshButton = connect(mapStateToProps, undefined, undefined, {\n  // We're interested only in \"entities\" sub-tree so we won't\n  // re-render on other state changes (e.g. API request IDs)\n  areStatesEqual: (nextState, prevState) =>\n    nextState.entities.runInfosByUuid === prevState.entities.runInfosByUuid,\n})(ExperimentViewRefreshButtonImpl);\n","import {\n  Button,\n  ChevronDownIcon,\n  Dropdown,\n  Input,\n  ListIcon,\n  SearchIcon,\n  Tree,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Utils from '../../../../../common/utils/Utils';\nimport { ATTRIBUTE_COLUMN_LABELS, COLUMN_TYPES } from '../../../../constants';\nimport { UpdateExperimentSearchFacetsFn } from '../../../../types';\nimport { useExperimentIds } from '../../hooks/useExperimentIds';\nimport { useFetchExperimentRuns } from '../../hooks/useFetchExperimentRuns';\nimport { SearchExperimentRunsFacetsState } from '../../models/SearchExperimentRunsFacetsState';\nimport {\n  extractCanonicalSortKey,\n  isCanonicalSortKeyOfType,\n  makeCanonicalSortKey,\n} from '../../utils/experimentPage.column-utils';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\n\n/**\n * We need to recreate antd's tree check callback signature since it's not importable\n */\ntype AntdTreeCheckCallback = { node: { key: string | number; checked: boolean } };\n\n/**\n * Function localizing antd tree inside a DOM element. Used to focusing by keyboard.\n */\nconst locateAntdTree = (parent: HTMLElement | null): HTMLElement | null =>\n  parent?.querySelector('[role=\"tree\"] input') || null;\n\nconst GROUP_KEY = 'GROUP';\n\nconst GROUP_KEY_ATTRIBUTES = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.ATTRIBUTES);\nconst GROUP_KEY_PARAMS = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.PARAMS);\nconst GROUP_KEY_METRICS = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.METRICS);\nconst GROUP_KEY_TAGS = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.TAGS);\n\nconst ATTRIBUTE_COLUMNS = [\n  ATTRIBUTE_COLUMN_LABELS.USER,\n  ATTRIBUTE_COLUMN_LABELS.SOURCE,\n  ATTRIBUTE_COLUMN_LABELS.VERSION,\n  ATTRIBUTE_COLUMN_LABELS.MODELS,\n];\nconst ATTRIBUTE_COLUMNS_COMPARE = [ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME, ...ATTRIBUTE_COLUMNS];\n\n/**\n * Function filters list of string by a given query string.\n */\nconst findMatching = (values: string[], filterQuery: string) =>\n  values.filter((v) => v.toLowerCase().includes(filterQuery.toLowerCase()));\n\n/**\n * Function dissects given string and wraps the\n * searched query with <strong>...</strong> if found. Used for highlighting search.\n */\nconst createHighlightedNode = (value: string, filterQuery: string) => {\n  if (!filterQuery) {\n    return value;\n  }\n  const index = value.toLowerCase().indexOf(filterQuery.toLowerCase());\n  const beforeStr = value.substring(0, index);\n  const matchStr = value.substring(index, index + filterQuery.length);\n  const afterStr = value.substring(index + filterQuery.length);\n\n  return index > -1 ? (\n    <span>\n      {beforeStr}\n      <strong>{matchStr}</strong>\n      {afterStr}\n    </span>\n  ) : (\n    value\n  );\n};\nexport interface ExperimentViewRunsColumnSelectorProps {\n  runsData: ExperimentRunsSelectorResult;\n  columnSelectorVisible: boolean;\n  onChangeColumnSelectorVisible: (value: boolean) => void;\n}\n\n/**\n * A component displaying the searchable column list - implementation.\n */\nexport const ExperimentViewRunsColumnSelectorImpl = React.memo(\n  ({\n    runsData,\n    columnSelectorVisible,\n    onChangeColumnSelectorVisible,\n    updateSearchFacets,\n    selectedColumns,\n  }: ExperimentViewRunsColumnSelectorProps & {\n    updateSearchFacets: UpdateExperimentSearchFacetsFn;\n    selectedColumns: SearchExperimentRunsFacetsState['selectedColumns'];\n  }) => {\n    const experimentIds = useExperimentIds();\n    const [filter, setFilter] = useState('');\n\n    const searchInputRef = useRef<any>(null);\n    const scrollableContainerRef = useRef<HTMLDivElement>(null);\n    const buttonRef = useRef<HTMLButtonElement>(null);\n\n    // Extract all attribute columns\n    const attributeColumnNames = useMemo(\n      () => (experimentIds.length > 1 ? ATTRIBUTE_COLUMNS_COMPARE : ATTRIBUTE_COLUMNS),\n      [experimentIds.length],\n    );\n\n    const setCheckedColumns = useCallback(\n      (updateFn: (existingCheckedColumns: string[]) => string[]) =>\n        updateSearchFacets((facets) => {\n          const newColumns = updateFn(facets.selectedColumns);\n          const uniqueNewColumns = Array.from(new Set(newColumns));\n          return { ...facets, selectedColumns: uniqueNewColumns };\n        }),\n      [updateSearchFacets],\n    );\n\n    // Extract unique list of tags\n    const tagsKeyList = useMemo(() => Utils.getVisibleTagKeyList(runsData.tagsList), [runsData]);\n\n    // Extract canonical key names for attributes, params, metrics and tags.\n    const canonicalKeyNames = useMemo(\n      () => ({\n        [COLUMN_TYPES.ATTRIBUTES]: attributeColumnNames.map((key) =>\n          makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, key),\n        ),\n        [COLUMN_TYPES.PARAMS]: runsData.paramKeyList.map((key) =>\n          makeCanonicalSortKey(COLUMN_TYPES.PARAMS, key),\n        ),\n        [COLUMN_TYPES.METRICS]: runsData.metricKeyList.map((key) =>\n          makeCanonicalSortKey(COLUMN_TYPES.METRICS, key),\n        ),\n        [COLUMN_TYPES.TAGS]: tagsKeyList.map((key) => makeCanonicalSortKey(COLUMN_TYPES.TAGS, key)),\n      }),\n      [runsData, attributeColumnNames, tagsKeyList],\n    );\n\n    // This memoized value holds the tree structure generated from\n    // attributes, params, metrics and tags. Displays only filtered values.\n    const treeData = useMemo(() => {\n      const result = [];\n\n      const filteredAttributes = findMatching(attributeColumnNames, filter);\n      const filteredParams = findMatching(runsData.paramKeyList, filter);\n      const filteredMetrics = findMatching(runsData.metricKeyList, filter);\n      const filteredTags = findMatching(tagsKeyList, filter);\n\n      if (filteredAttributes.length) {\n        result.push({\n          key: GROUP_KEY_ATTRIBUTES,\n          title: `Attributes`,\n          children: filteredAttributes.map((attributeKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, attributeKey),\n            title: createHighlightedNode(attributeKey, filter),\n          })),\n        });\n      }\n      if (filteredMetrics.length) {\n        result.push({\n          key: GROUP_KEY_METRICS,\n          title: `Metrics (${filteredMetrics.length})`,\n          children: filteredMetrics.map((metricKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.METRICS, metricKey),\n            title: createHighlightedNode(metricKey, filter),\n          })),\n        });\n      }\n      if (filteredParams.length) {\n        result.push({\n          key: GROUP_KEY_PARAMS,\n          title: `Parameters (${filteredParams.length})`,\n          children: filteredParams.map((paramKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.PARAMS, paramKey),\n            title: createHighlightedNode(paramKey, filter),\n          })),\n        });\n      }\n      if (filteredTags.length) {\n        result.push({\n          key: GROUP_KEY_TAGS,\n          title: `Tags (${filteredTags.length})`,\n          children: filteredTags.map((tagKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.TAGS, tagKey),\n            title: tagKey,\n          })),\n        });\n      }\n\n      return result;\n    }, [attributeColumnNames, filter, runsData, tagsKeyList]);\n\n    // This callback toggles entire group of keys\n    const toggleGroup = useCallback(\n      (isChecked: boolean, keyList: string[]) => {\n        if (!isChecked) {\n          setCheckedColumns((checked) => [...checked, ...keyList]);\n        } else {\n          setCheckedColumns((checked) => checked.filter((k) => !keyList.includes(k)));\n        }\n      },\n      [setCheckedColumns],\n    );\n\n    // This callback is intended to select/deselect a single key\n    const toggleSingleKey = useCallback(\n      (key: string, isChecked: boolean) => {\n        if (!isChecked) {\n          setCheckedColumns((checked) => [...checked, key]);\n        } else {\n          setCheckedColumns((checked) => checked.filter((k) => k !== key));\n        }\n      },\n      [setCheckedColumns],\n    );\n\n    useEffect(() => {\n      if (columnSelectorVisible) {\n        setFilter('');\n\n        // Let's wait for the next execution frame, then:\n        // - restore the dropdown menu scroll position\n        // - focus the search input\n        // - bring the dropdown into the viewport using scrollIntoView()\n        requestAnimationFrame(() => {\n          scrollableContainerRef?.current?.scrollTo(0, 0);\n          searchInputRef.current?.focus({ preventScroll: true });\n\n          if (buttonRef.current) {\n            buttonRef.current.scrollIntoView({ block: 'nearest', behavior: 'smooth' });\n          }\n        });\n      }\n    }, [columnSelectorVisible]);\n\n    const onCheck = useCallback(\n      // We need to recreate antd's tree check callback signature\n      (_: any, { node: { key, checked } }: AntdTreeCheckCallback) => {\n        if (isCanonicalSortKeyOfType(key.toString(), GROUP_KEY)) {\n          const columnType = extractCanonicalSortKey(key.toString(), GROUP_KEY);\n          const canonicalKeysForGroup = canonicalKeyNames[columnType];\n          if (canonicalKeysForGroup) {\n            toggleGroup(checked, findMatching(canonicalKeysForGroup, filter));\n          }\n        } else {\n          toggleSingleKey(key.toString(), checked);\n        }\n      },\n      [canonicalKeyNames, toggleGroup, toggleSingleKey, filter],\n    );\n\n    // This callback moves focus to tree element if down arrow has been pressed\n    // when inside search input area.\n    const searchInputKeyDown = useCallback<React.KeyboardEventHandler<HTMLInputElement>>((e) => {\n      if (e.key === 'ArrowDown') {\n        const treeElement = locateAntdTree(scrollableContainerRef.current);\n\n        if (treeElement) {\n          treeElement.focus();\n        }\n      }\n    }, []);\n\n    // A JSX block containing the dropdown\n    const dropdownContent = (\n      <div css={styles.dropdown}>\n        <div css={(theme) => ({ padding: theme.spacing.md })}>\n          <Input\n            value={filter}\n            prefix={<SearchIcon />}\n            placeholder='Search columns'\n            allowClear\n            ref={searchInputRef}\n            onChange={(e) => {\n              setFilter(e.target.value);\n            }}\n            onKeyDown={searchInputKeyDown}\n          />\n        </div>\n        <div ref={scrollableContainerRef} css={styles.scrollableContainer}>\n          <Tree\n            data-testid='column-selector-tree'\n            mode='checkable'\n            dangerouslySetAntdProps={{\n              checkedKeys: selectedColumns,\n              onCheck,\n            }}\n            defaultExpandedKeys={[\n              GROUP_KEY_ATTRIBUTES,\n              GROUP_KEY_PARAMS,\n              GROUP_KEY_METRICS,\n              GROUP_KEY_TAGS,\n            ]}\n            treeData={treeData}\n          />\n        </div>\n      </div>\n    );\n\n    return (\n      <Dropdown\n        overlay={dropdownContent}\n        placement='bottomRight'\n        trigger={['click']}\n        visible={columnSelectorVisible}\n        onVisibleChange={onChangeColumnSelectorVisible}\n      >\n        <Button\n          ref={buttonRef}\n          style={{ display: 'flex', alignItems: 'center' }}\n          data-testid='column-selection-dropdown'\n          icon={<ListIcon />}\n        >\n          <FormattedMessage\n            defaultMessage='Columns'\n            description='Dropdown text to display columns names that could to be rendered for the experiment runs table'\n          />{' '}\n          <ChevronDownIcon />\n        </Button>\n      </Dropdown>\n    );\n  },\n);\n\n/**\n * A component displaying the searchable column list.\n * This is a thin layer wrapping the implementation to optimize search state rerenders.\n */\nexport const ExperimentViewRunsColumnSelector = (props: ExperimentViewRunsColumnSelectorProps) => {\n  const { updateSearchFacets, searchFacetsState } = useFetchExperimentRuns();\n  return (\n    <ExperimentViewRunsColumnSelectorImpl\n      {...props}\n      selectedColumns={searchFacetsState.selectedColumns}\n      updateSearchFacets={updateSearchFacets}\n    />\n  );\n};\n\nconst styles = {\n  dropdown: (theme: Theme) => ({\n    backgroundColor: theme.colors.white,\n    width: 400,\n    border: `1px solid`,\n    borderColor: theme.colors.border,\n  }),\n  scrollableContainer: (theme: Theme) => ({\n    // Maximum height of 15 elements times 32 pixels as defined in\n    // design-system/src/design-system/Tree/Tree.tsx\n    maxHeight: 15 * 32,\n    overflowY: 'scroll' as const,\n    overflowX: 'hidden' as const,\n    paddingBottom: theme.spacing.md,\n    'span[title]': {\n      whiteSpace: 'nowrap' as const,\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n    },\n  }),\n};\n","import {\n  BarChartIcon,\n  ListBorderIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface ExperimentViewRunsModeSwitchProps {\n  isComparingRuns: boolean;\n  setIsComparingRuns: (isComparingRuns: boolean) => void;\n}\n\n/**\n * Allows switching between \"list\" and \"compare runs\" modes of experiment view\n */\nexport const ExperimentViewRunsModeSwitch = ({\n  isComparingRuns,\n  setIsComparingRuns,\n}: ExperimentViewRunsModeSwitchProps) => {\n  return (\n    <SegmentedControlGroup\n      value={isComparingRuns ? 'COMPARE' : 'LIST'}\n      onChange={({ target: { value } }) => {\n        setIsComparingRuns(value === 'COMPARE');\n      }}\n    >\n      <SegmentedControlButton value='LIST' data-testid='experiment-runs-mode-switch-list'>\n        <ListBorderIcon />{' '}\n        <FormattedMessage\n          defaultMessage='Table view'\n          description='A button enabling table mode on the experiment page'\n        />\n      </SegmentedControlButton>\n      <SegmentedControlButton value='COMPARE' data-testid='experiment-runs-mode-switch-compare'>\n        <BarChartIcon />{' '}\n        <FormattedMessage\n          defaultMessage='Chart view'\n          description='A button enabling compare runs (chart) mode on the experiment page'\n        />\n      </SegmentedControlButton>\n    </SegmentedControlGroup>\n  );\n};\n","import {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  Option,\n  Select,\n  SortAscendingIcon,\n  SortDescendingIcon,\n} from '@databricks/design-system';\nimport React, { useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { middleTruncateStr } from '../../../../../common/utils/StringUtils';\nimport {\n  COLUMN_SORT_BY_ASC,\n  COLUMN_SORT_BY_DESC,\n  SORT_DELIMITER_SYMBOL,\n} from '../../../../constants';\nimport { ExperimentRunSortOption } from '../../hooks/useRunSortOptions';\nimport { SearchExperimentRunsFacetsState } from '../../models/SearchExperimentRunsFacetsState';\n\nexport const ExperimentViewRunsSortSelector = React.memo(\n  ({\n    searchFacetsState,\n    sortOptions,\n    onSortKeyChanged,\n  }: {\n    searchFacetsState: SearchExperimentRunsFacetsState;\n    sortOptions: ExperimentRunSortOption[];\n    onSortKeyChanged: (valueContainer: any) => void;\n  }) => {\n    const { orderByKey, orderByAsc } = searchFacetsState;\n\n    // Currently used canonical \"sort by\" value in form of \"COLUMN_NAME***DIRECTION\", e.g. \"metrics.`metric`***DESCENDING\"\n    const currentSortSelectValue = useMemo(\n      () =>\n        `${orderByKey}${SORT_DELIMITER_SYMBOL}${\n          orderByAsc ? COLUMN_SORT_BY_ASC : COLUMN_SORT_BY_DESC\n        }`,\n      [orderByAsc, orderByKey],\n    );\n\n    /**\n     * Calculate and memoize a label displayed in the \"sort by\" select.\n     *\n     * If full metrics and params list is populated by runs from the API, use the\n     * value corresponding to the calculated sort option list.\n     *\n     * If the sort option list is incomplete (e.g. because fetched run set is empty) while the\n     * order key is given (e.g. because URL state says so), use it to extract the key name.\n     */\n    const currentSortSelectLabel = useMemo(() => {\n      // Search through all sort options generated basing on the fetched runs\n      const sortOption = sortOptions.find((option) => option.value === currentSortSelectValue);\n\n      let sortOptionLabel = sortOption?.label;\n\n      // If the actually chosen sort value is not found in the sort option list (e.g. because the list of fetched runs is empty),\n      // use it to generate the label\n      if (!sortOptionLabel) {\n        // The following regex extracts plain sort key name from its canonical form, i.e.\n        // metrics.`metric_key_name` => metric_key_name\n        const extractedKeyName = orderByKey.match(/^.+\\.`(.+)`$/);\n        if (extractedKeyName) {\n          // eslint-disable-next-line prefer-destructuring\n          sortOptionLabel = extractedKeyName[1];\n        }\n      }\n\n      return (\n        <span css={{ display: 'flex', alignItems: 'center', gap: 4 }}>\n          {orderByAsc ? <SortAscendingIcon /> : <SortDescendingIcon />}{' '}\n          <FormattedMessage\n            defaultMessage='Sort'\n            description='Sort by default option for sort by select dropdown for experiment runs'\n          />\n          : {sortOptionLabel}\n        </span>\n      );\n    }, [currentSortSelectValue, orderByAsc, orderByKey, sortOptions]);\n\n    return (\n      <Select\n        className='sort-select'\n        css={styles.sortSelectControl}\n        value={{\n          value: currentSortSelectValue,\n          label: currentSortSelectLabel,\n        }}\n        labelInValue\n        // Temporarily we're disabling virtualized list to maintain\n        // backwards compatiblity. Functional unit tests rely heavily\n        // on non-virtualized values.\n        dangerouslySetAntdProps={\n          { virtual: false, dropdownStyle: styles.sortSelectDropdown } as any\n        }\n        onChange={onSortKeyChanged}\n        data-test-id='sort-select-dropdown'\n      >\n        {sortOptions.map((sortOption) => (\n          <Option\n            key={sortOption.value}\n            title={sortOption.label}\n            data-test-id={`sort-select-${sortOption.label}-${sortOption.order}`}\n            value={sortOption.value}\n          >\n            <span css={styles.sortMenuArrowWrapper}>\n              {sortOption.order === COLUMN_SORT_BY_ASC ? <ArrowUpIcon /> : <ArrowDownIcon />}\n            </span>{' '}\n            {middleTruncateStr(sortOption.label, 50)}\n          </Option>\n        ))}\n      </Select>\n    );\n  },\n);\n\nconst styles = {\n  sortSelectControl: { minWidth: 140, maxWidth: 360 },\n  sortSelectDropdown: { minWidth: 360 },\n  sortMenuArrowWrapper: { svg: { width: 12, height: 12 } },\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentSearchSyntaxDocUrl } from '../../../../../common/constants';\n\nexport const RunsSearchTooltipContent = () => {\n  return (\n    <div className='search-input-tooltip-content'>\n      <FormattedMessage\n        defaultMessage='Search runs using a simplified version of the SQL {whereBold} clause.'\n        description='Tooltip string to explain how to search runs from the experiments table'\n        values={{ whereBold: <b>WHERE</b> }}\n      />{' '}\n      <FormattedMessage\n        defaultMessage='<link>Learn more</link>'\n        description='Learn more tooltip link to learn more on how to search in an experiments run table'\n        values={{\n          link: (chunks: any) => (\n            <a href={ExperimentSearchSyntaxDocUrl} target='_blank' rel='noopener noreferrer'>\n              {chunks}\n            </a>\n          ),\n        }}\n      />\n      <br />\n      <FormattedMessage\n        defaultMessage='Examples:'\n        description='Text header for examples of mlflow search syntax'\n      />\n      <br />\n      {'• metrics.rmse >= 0.8'}\n      <br />\n      {'• metrics.`f1 score` < 1'}\n      <br />\n      {\"• params.model = 'tree'\"}\n      <br />\n      {\"• attributes.run_name = 'my run'\"}\n      <br />\n      {\"• tags.`mlflow.user` = 'myUser'\"}\n      <br />\n      {\"• metric.f1_score > 0.9 AND params.model = 'tree'\"}\n      <br />\n      {\"• attributes.run_id IN ('a1b2c3d4', 'e5f6g7h8')\"}\n      <br />\n      {\"• tags.model_class LIKE 'sklearn.linear_model%'\"}\n    </div>\n  );\n};\n","import React from 'react';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\n\nexport type Option = {\n  label?: string | React.ReactNode;\n  value: string;\n};\n\nexport type OptionGroup = {\n  label: string;\n  options: Option[];\n};\n\nexport type Entity = {\n  name: string;\n  startIndex: number;\n  endIndex: number;\n};\n\nexport type Clause = {\n  clause: string;\n  startIndex: number;\n};\n\nexport const ATTRIBUTE_OPTIONS = [\n  'run_id',\n  'run_name',\n  'status',\n  'artifact_uri',\n  'user_id',\n  'start_time',\n  'end_time',\n  'created',\n].map((s) => ({ value: `attributes.${s}` }));\n\nexport const getOptionsFromRunsData = (\n  prevRunsData: ExperimentRunsSelectorResult,\n  newRunsData: ExperimentRunsSelectorResult,\n): OptionGroup[] => {\n  const mergeDedup = (list1: any[], list2: any[]) => [...new Set([...list1, ...list2])];\n  const getTagNames = (tagsList: any[]) => tagsList.flatMap((tagRecord) => Object.keys(tagRecord));\n  const metricNames = mergeDedup(prevRunsData.metricKeyList, newRunsData.metricKeyList);\n  const paramNames = mergeDedup(prevRunsData.paramKeyList, newRunsData.paramKeyList);\n  const tagNames = mergeDedup(\n    getTagNames(prevRunsData.tagsList),\n    getTagNames(newRunsData.tagsList),\n  );\n  // Filter out internal tag names and wrap names that include control characters in backticks.\n  const tagNamesCleaned = tagNames\n    .filter((s: string) => !s.startsWith('mlflow.'))\n    .map((s: string) => {\n      if (s.includes('\"') || s.includes(' ') || s.includes('.')) {\n        return `\\`${s}\\``;\n      } else if (s.includes('`')) {\n        return `\"${s}\"`;\n      } else return s;\n    });\n  return [\n    {\n      label: 'Metrics',\n      options: metricNames.map((m) => ({ value: `metrics.${m}` })),\n    },\n    {\n      label: 'Parameters',\n      options: paramNames.map((p) => ({ value: `params.${p}` })),\n    },\n    {\n      label: 'Tags',\n      options: tagNamesCleaned.map((t) => ({ value: `tags.${t}` })),\n    },\n    {\n      label: 'Attributes',\n      options: ATTRIBUTE_OPTIONS,\n    },\n  ];\n};\n\n// Bolds a specified segment of `wholeText`.\nconst boldedText = (wholeText: string, shouldBeBold: string) => {\n  const textArray = wholeText.split(RegExp(shouldBeBold.replace('.', '\\\\.'), 'ig'));\n  const match = wholeText.match(RegExp(shouldBeBold.replace('.', '\\\\.'), 'ig'));\n\n  return (\n    // Autocomplete sets font weight to 600 on full match resulting in double bolding.\n    // Override this here\n    <span css={{ fontWeight: 'normal' }} data-test-id={wholeText}>\n      {textArray.map((item, index) => (\n        <>\n          {item}\n          {index !== textArray.length - 1 && match && <b>{match[index]}</b>}\n        </>\n      ))}\n    </span>\n  );\n};\n\n/**\n * Given an input string, returns a list of Clause objects\n * containing the clauses in the input and the indices of their\n * starting positions in the overall string.\n */\nconst getClausesAndStartIndex = (str: string) => {\n  const re = /and[\\s]+/gi;\n  const results: Clause[] = [];\n  let match, position;\n  while (((position = re.lastIndex), (match = re.exec(str)))) {\n    results.push({ clause: str.substring(position, match.index), startIndex: position });\n  }\n  results.push({ clause: str.substring(position), startIndex: position });\n  return results;\n};\n\n/**\n * Given an input string, returns a list of Entity objects\n * containing the search entities in the input and their\n * start and end indices in the whole string.\n */\n\nexport const getEntitiesAndIndices = (str: string) => {\n  const re = />|<|>=|<=|=|!=|like|ilike/gi;\n  const clauses = getClausesAndStartIndex(str);\n  const results: Entity[] = [];\n  clauses.forEach((clauseObj) => {\n    const clauseText = clauseObj.clause;\n    const entity = clauseText.split(re)[0];\n    const { startIndex } = clauseObj;\n    results.push({\n      name: entity,\n      startIndex: 0 + startIndex,\n      endIndex: entity.length + startIndex,\n    });\n  });\n  return results;\n};\n\nexport const getFilteredOptionsFromEntityName = (\n  baseOptions: OptionGroup[],\n  entityBeingEdited: Entity,\n  suggestionLimits: any,\n): OptionGroup[] => {\n  return baseOptions\n    .map((group) => {\n      const newOptions = group.options\n        .filter((option) =>\n          option.value.toLowerCase().includes(entityBeingEdited.name.toLowerCase().trim()),\n        )\n        .map((match) => ({\n          value: match.value,\n          label: boldedText(match.value, entityBeingEdited.name.trim()),\n        }));\n      const limitForGroup = (suggestionLimits as any)[group.label];\n      const ellipsized = [\n        ...newOptions.slice(0, limitForGroup),\n        ...(newOptions.length > limitForGroup\n          ? [{ label: '...', value: `..._${group.label}` }]\n          : []),\n      ];\n      return {\n        label: group.label,\n        options: ellipsized,\n      };\n    })\n    .filter((group) => group.options.length > 0);\n};\n","import { isEqual } from 'lodash';\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport {\n  AutoComplete,\n  Input,\n  SearchIcon,\n  Tooltip,\n  InfoIcon,\n  Button,\n  CloseIcon,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport {\n  clearSearchExperimentsFacetsFilters,\n  SearchExperimentRunsFacetsState,\n} from '../../models/SearchExperimentRunsFacetsState';\nimport { UpdateExperimentSearchFacetsFn } from '../../../../types';\nimport { ErrorWrapper } from '../../../../../common/utils/ErrorWrapper';\nimport { useExperimentViewLocalStore } from '../../hooks/useExperimentViewLocalStore';\nimport { RunsSearchTooltipContent } from './RunsSearchTooltipContent';\nimport {\n  Entity,\n  getEntitiesAndIndices,\n  getFilteredOptionsFromEntityName,\n  getOptionsFromRunsData,\n  OptionGroup,\n} from './RunsSearchAutoComplete.utils';\n\n// A default placeholder for the search box\nconst SEARCH_BOX_PLACEHOLDER = 'metrics.rmse < 1 and params.model = \"tree\"';\nconst TOOLTIP_COOKIE_KEY = 'tooltipLastPopup';\nconst WEEK_IN_SECONDS = 604800;\n\nexport type RunsSearchAutoCompleteProps = {\n  runsData: ExperimentRunsSelectorResult;\n  searchFacetsState: SearchExperimentRunsFacetsState;\n  updateSearchFacets: UpdateExperimentSearchFacetsFn;\n  requestError: ErrorWrapper | null;\n};\n\n/**\n * Autocomplete component that provides suggestions for MLflow search entity names.\n */\nexport const RunsSearchAutoComplete = (props: RunsSearchAutoCompleteProps) => {\n  const { runsData, searchFacetsState, updateSearchFacets, requestError } = props;\n\n  const [text, setText] = useState<string>('');\n  const [autocompleteEnabled, setAutocompleteEnabled] = useState<boolean | undefined>(undefined);\n  const [focused, setFocused] = useState(false);\n  const onFocus = () => setFocused(true);\n  const onBlur = () => setFocused(false);\n  // Determines whether the text was changed by making a selection in the autocomplete\n  // dialog, as opposed to by typing.\n  const [lastSetBySelection, setLastSetBySelection] = useState(false);\n  const prevRunsDataRef = useRef<ExperimentRunsSelectorResult>(runsData);\n  // How many suggestions should be shown per entity group before the group is ellipsized.\n  const [suggestionLimits, setSuggestionLimits] = useState({\n    Metrics: 10,\n    Parameters: 10,\n    Tags: 10,\n  });\n  // List of entities parsed from `text`.\n  const currentEntitiesRef = useRef<Entity[]>([]);\n  const [entityBeingEdited, setEntityBeingEdited] = useState<Entity | undefined>(undefined);\n\n  // Each time we're setting search filter externally, update it here as well\n  useEffect(() => {\n    setText(searchFacetsState.searchFilter);\n  }, [searchFacetsState]);\n\n  const baseOptions = useMemo<OptionGroup[]>(() => {\n    const oldRunData = prevRunsDataRef.current;\n    prevRunsDataRef.current = runsData;\n    return getOptionsFromRunsData(oldRunData, runsData);\n    // prevRunsDataRef is only set here. Omit from dependencies to avoid infinite loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [runsData]);\n\n  useEffect(() => {\n    const previousEntities = currentEntitiesRef.current;\n    const newEntities = getEntitiesAndIndices(text);\n    currentEntitiesRef.current = newEntities;\n\n    if (lastSetBySelection) {\n      setLastSetBySelection(false);\n      return;\n    }\n    const currentEntitiesNames = newEntities.map((e) => e.name);\n    const previousEntitiesNames = previousEntities.map((e) => e.name);\n    if (\n      !isEqual(currentEntitiesNames, previousEntitiesNames) &&\n      newEntities.length >= previousEntities.length\n    ) {\n      let i = 0;\n      while (i < newEntities.length) {\n        if (\n          i >= previousEntities.length ||\n          newEntities[i].name.trim() !== previousEntities[i].name.trim()\n        ) {\n          setAutocompleteEnabled(true);\n          setEntityBeingEdited(newEntities[i]);\n          return;\n        }\n        i++;\n      }\n    }\n    // If here, no entity is being edited\n    setAutocompleteEnabled(false);\n    // currentEntitiesRef is not used anywhere else and state setters are safe to\n    // omit from hook dependencies as per react docs\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text]);\n\n  const filteredOptions = useMemo(() => {\n    if (!entityBeingEdited) {\n      return [];\n    }\n    return getFilteredOptionsFromEntityName(baseOptions, entityBeingEdited, suggestionLimits);\n  }, [baseOptions, entityBeingEdited, suggestionLimits]);\n\n  /**\n   * Called when an option is picked from the autocomplete dropdown, either by hitting enter\n   * when selected, or clicking on it\n   * @param value\n   */\n  const onSelect = useCallback(\n    (value: string, option: any) => {\n      if (!entityBeingEdited) {\n        return;\n      }\n      if (value.startsWith('...')) {\n        // Keep the dialog open as this is not a real selection\n        setAutocompleteEnabled(true);\n        const groupName = option.value.split('_')[1];\n        setSuggestionLimits((prevSuggestionLimits) => ({\n          ...prevSuggestionLimits,\n          [groupName]: (prevSuggestionLimits as any)[groupName] + 10,\n        }));\n      } else {\n        const prefix = text.substring(0, entityBeingEdited.startIndex);\n        const suffix = text.substring(entityBeingEdited.endIndex);\n        setText(prefix + value + ' ' + suffix);\n        setLastSetBySelection(true);\n        setAutocompleteEnabled(false);\n      }\n    },\n    [text, setText, entityBeingEdited, setAutocompleteEnabled],\n  );\n\n  // Callback fired when \"clear\" button is clicked\n  const clearSearchFiltersState = useCallback(() => {\n    updateSearchFacets(clearSearchExperimentsFacetsFilters);\n  }, [updateSearchFacets]);\n\n  const localStorageInstance = useExperimentViewLocalStore(TOOLTIP_COOKIE_KEY);\n\n  const [showTooltipOnError, setShowTooltipOnError] = useState(() => {\n    const currentTimeSecs = Math.floor(Date.now() / 1000);\n    const storedItem = localStorageInstance.getItem(TOOLTIP_COOKIE_KEY);\n    // Show tooltip again if it was last shown 1 week ago or older\n    return !storedItem || parseInt(storedItem, 10) < currentTimeSecs - WEEK_IN_SECONDS;\n  });\n  const tooltipIcon = React.useRef<HTMLDivElement>(null);\n\n  // If requestError has changed and there is an error, pop up the tooltip\n  useEffect(() => {\n    if (requestError && showTooltipOnError) {\n      const currentTimeSecs = Math.floor(Date.now() / 1000);\n      localStorageInstance.setItem(TOOLTIP_COOKIE_KEY, currentTimeSecs);\n      setShowTooltipOnError(false);\n      tooltipIcon.current?.click();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [requestError]);\n\n  const noMatches = filteredOptions.flatMap((o) => o.options).length === 0;\n  const open = autocompleteEnabled && focused && !noMatches;\n\n  // Callback fired when search filter is being used\n  const triggerSearch: React.KeyboardEventHandler<HTMLInputElement> = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        // If the autocomplete dialog is open, use the enter key to make a selection\n        // rather than initiate search.\n        if (open) {\n          setAutocompleteEnabled(false);\n        } else {\n          updateSearchFacets({ searchFilter: text });\n        }\n      }\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        if (open) {\n          setAutocompleteEnabled(false);\n        }\n      }\n    },\n    [open, text, updateSearchFacets],\n  );\n\n  return (\n    <div css={styles.searchBox}>\n      <AutoComplete\n        dropdownMatchSelectWidth={560}\n        css={{ width: 560 }}\n        defaultOpen={false}\n        defaultActiveFirstOption\n        open={open}\n        options={filteredOptions}\n        onSelect={onSelect}\n        value={text}\n        data-test-id='runs-search-autocomplete'\n        dropdownRender={(menu) => <div css={styles.dropdownOverride}>{menu}</div>}\n      >\n        <Input\n          value={text}\n          prefix={<SearchIcon css={styles.searchBarIcon} />}\n          onKeyDown={triggerSearch}\n          onClick={onFocus}\n          onBlur={onBlur}\n          onChange={(e) => setText(e.target.value)}\n          placeholder={SEARCH_BOX_PLACEHOLDER}\n          data-test-id='search-box'\n          suffix={\n            <div css={styles.searchInputSuffix}>\n              {text && (\n                <Button onClick={clearSearchFiltersState} type='link' data-test-id='clear-button'>\n                  <CloseIcon />\n                </Button>\n              )}\n              <Tooltip\n                title={<RunsSearchTooltipContent />}\n                placement='right'\n                dangerouslySetAntdProps={{\n                  overlayInnerStyle: { width: '150%' },\n                  trigger: 'click',\n                }}\n              >\n                <div ref={tooltipIcon}>\n                  <InfoIcon css={styles.searchBarIcon} />\n                </div>\n              </Tooltip>\n            </div>\n          }\n        />\n      </AutoComplete>\n    </div>\n  );\n};\n\nconst styles = {\n  searchBox: (theme: Theme) => ({ display: 'flex', gap: theme.spacing.sm, width: 560 }),\n  searchBarIcon: (theme: Theme) => ({\n    svg: { width: 16, height: 16, color: theme.colors.textSecondary },\n  }),\n  searchInputSuffix: { display: 'flex', gap: 4, alignItems: 'center' },\n  dropdownOverride: {\n    '.du-bois-light-select-item-option-active:not(.du-bois-light-select-item-option-disabled)': {\n      // TODO: ask the design team about the color existing in the palette\n      backgroundColor: '#e6f1f5',\n    },\n  },\n};\n","import { useMemo } from 'react';\nimport LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\n\n/**\n * This hook returns a memoized version of persistable store namespaced for the ExperimentView.\n * It can serve as a store for persisting state for a particular experiment - in this case,\n * the experiment id should be provided as a `identifier` parameter. It can also serve as a store for some\n * general purpose - e.g. you can provide \"onboarding\" as a identifier to get a store specific\n * for the onboarding section of the experiment view.\n *\n * @param storeIdentifier a unique identifier of created store - can be an experiment id or a general purpose name\n */\nexport const useExperimentViewLocalStore = (storeIdentifier: string) =>\n  useMemo(\n    () => LocalStorageUtils.getStoreForComponent('ExperimentView', storeIdentifier),\n    [storeIdentifier],\n  );\n","import { Button, DownloadIcon, Dropdown, Menu, OverflowIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ErrorWrapper } from '../../../../../common/utils/ErrorWrapper';\nimport { shouldUseNextRunsComparisonUI } from '../../../../../common/utils/FeatureUtils';\nimport { COLUMN_SORT_BY_ASC, SORT_DELIMITER_SYMBOL } from '../../../../constants';\nimport { UpdateExperimentSearchFacetsFn, UpdateExperimentViewStateFn } from '../../../../types';\nimport { ExperimentRunSortOption } from '../../hooks/useRunSortOptions';\nimport { SearchExperimentRunsFacetsState } from '../../models/SearchExperimentRunsFacetsState';\nimport { SearchExperimentRunsViewState } from '../../models/SearchExperimentRunsViewState';\nimport { TAGS_TO_COLUMNS_MAP } from '../../utils/experimentPage.column-utils';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRefreshButton } from './ExperimentViewRefreshButton';\nimport { ExperimentViewRunsColumnSelector } from './ExperimentViewRunsColumnSelector';\nimport { ExperimentViewRunsModeSwitch } from './ExperimentViewRunsModeSwitch';\nimport { ExperimentViewRunsSortSelector } from './ExperimentViewRunsSortSelector';\nimport { RunsSearchAutoComplete } from './RunsSearchAutoComplete';\n\nexport type ExperimentViewRunsControlsFiltersProps = {\n  searchFacetsState: SearchExperimentRunsFacetsState;\n  updateSearchFacets: UpdateExperimentSearchFacetsFn;\n  viewState: SearchExperimentRunsViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n  sortOptions: ExperimentRunSortOption[];\n  runsData: ExperimentRunsSelectorResult;\n  onDownloadCsv: () => void;\n  requestError: ErrorWrapper | null;\n};\n\nexport const ExperimentViewRunsControlsFilters = React.memo(\n  ({\n    searchFacetsState,\n    updateSearchFacets,\n    runsData,\n    viewState,\n    updateViewState,\n    onDownloadCsv,\n    sortOptions,\n    requestError,\n  }: ExperimentViewRunsControlsFiltersProps) => {\n    const { isComparingRuns } = searchFacetsState;\n\n    // Callback fired when the sort column value changes\n    const sortKeyChanged = useCallback(\n      ({ value: compiledOrderByKey }) => {\n        const [newOrderBy, newOrderAscending] = compiledOrderByKey.split(SORT_DELIMITER_SYMBOL);\n\n        const columnToAdd = TAGS_TO_COLUMNS_MAP[newOrderBy] || newOrderBy;\n        const isOrderAscending = newOrderAscending === COLUMN_SORT_BY_ASC;\n\n        updateSearchFacets((currentFacets) => {\n          const { selectedColumns } = currentFacets;\n          if (!selectedColumns.includes(columnToAdd)) {\n            selectedColumns.push(columnToAdd);\n          }\n          return {\n            ...currentFacets,\n            selectedColumns,\n            orderByKey: newOrderBy,\n            orderByAsc: isOrderAscending,\n          };\n        });\n      },\n      [updateSearchFacets],\n    );\n\n    // Shows or hides the column selector\n    const changeColumnSelectorVisible = useCallback(\n      (value: boolean) => updateViewState({ columnSelectorVisible: value }),\n      [updateViewState],\n    );\n\n    return (\n      <>\n        <div css={styles.groupBar}>\n          <div css={styles.controlBar}>\n            {shouldUseNextRunsComparisonUI() && (\n              <ExperimentViewRunsModeSwitch\n                isComparingRuns={isComparingRuns}\n                setIsComparingRuns={(newIsComparingRuns) =>\n                  updateSearchFacets({ isComparingRuns: newIsComparingRuns })\n                }\n              />\n            )}\n            <RunsSearchAutoComplete\n              runsData={runsData}\n              searchFacetsState={searchFacetsState}\n              updateSearchFacets={updateSearchFacets}\n              requestError={requestError}\n            />\n            <ExperimentViewRunsSortSelector\n              onSortKeyChanged={sortKeyChanged}\n              searchFacetsState={searchFacetsState}\n              sortOptions={sortOptions}\n            />\n            {!isComparingRuns && (\n              <ExperimentViewRunsColumnSelector\n                columnSelectorVisible={viewState.columnSelectorVisible}\n                onChangeColumnSelectorVisible={changeColumnSelectorVisible}\n                runsData={runsData}\n              />\n            )}\n          </div>\n          <div css={styles.groupSeparator} />\n          <div css={styles.controlBar}>\n            <Dropdown\n              trigger={['click']}\n              placement='bottomRight'\n              overlay={\n                <Menu>\n                  <Menu.Item className='csv-button' onClick={onDownloadCsv}>\n                    <DownloadIcon />{' '}\n                    <FormattedMessage\n                      defaultMessage='Download CSV'\n                      description='String for the download csv button to download experiments offline in a CSV format'\n                    />\n                  </Menu.Item>\n                </Menu>\n              }\n            >\n              <Button type='tertiary' icon={<OverflowIcon />} />\n            </Dropdown>\n            <ExperimentViewRefreshButton />\n          </div>\n        </div>\n      </>\n    );\n  },\n);\n\nconst styles = {\n  groupBar: { display: 'grid', gridTemplateColumns: 'auto 1fr auto' },\n  controlBar: (theme: Theme) => ({\n    display: 'flex',\n    gap: theme.spacing.sm,\n    alignItems: 'center',\n    flexWrap: 'wrap' as const,\n  }),\n  groupSeparator: (theme: Theme) => ({ minWidth: theme.spacing.sm }),\n  columnSwitch: { margin: '5px' },\n  searchBox: (theme: Theme) => ({ display: 'flex', gap: theme.spacing.sm, width: 560 }),\n  lifecycleFilters: (theme: Theme) => ({\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n    marginTop: theme.spacing.sm,\n    marginBottom: theme.spacing.sm,\n    marginLeft: theme.spacing.lg * 2,\n  }),\n};\n","import { Theme } from '@emotion/react';\nimport React, { useCallback } from 'react';\nimport Utils from '../../../../../common/utils/Utils';\nimport { UpdateExperimentSearchFacetsFn, UpdateExperimentViewStateFn } from '../../../../types';\nimport { useRunSortOptions } from '../../hooks/useRunSortOptions';\nimport { SearchExperimentRunsFacetsState } from '../../models/SearchExperimentRunsFacetsState';\nimport { SearchExperimentRunsViewState } from '../../models/SearchExperimentRunsViewState';\nimport { downloadRunsCsv } from '../../utils/experimentPage.common-utils';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunsControlsActions } from './ExperimentViewRunsControlsActions';\nimport { ExperimentViewRunsControlsFilters } from './ExperimentViewRunsControlsFilters';\nimport { ErrorWrapper } from '../../../../../common/utils/ErrorWrapper';\n\ntype ExperimentViewRunsControlsProps = {\n  viewState: SearchExperimentRunsViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n\n  searchFacetsState: SearchExperimentRunsFacetsState;\n  updateSearchFacets: UpdateExperimentSearchFacetsFn;\n\n  runsData: ExperimentRunsSelectorResult;\n\n  requestError: ErrorWrapper | null;\n};\n\n/**\n * This component houses all controls related to searching runs: sort controls,\n * filters and run related actions (delete, restore, download CSV).\n */\nexport const ExperimentViewRunsControls = React.memo(\n  ({\n    runsData,\n    viewState,\n    updateViewState,\n    updateSearchFacets,\n    searchFacetsState,\n    requestError,\n  }: ExperimentViewRunsControlsProps) => {\n    const { paramKeyList, metricKeyList, tagsList } = runsData;\n\n    const filteredParamKeys = paramKeyList;\n    const filteredMetricKeys = metricKeyList;\n    const filteredTagKeys = Utils.getVisibleTagKeyList(tagsList);\n\n    const onDownloadCsv = useCallback(\n      () => downloadRunsCsv(runsData, filteredTagKeys, filteredParamKeys, filteredMetricKeys),\n      [filteredMetricKeys, filteredParamKeys, filteredTagKeys, runsData],\n    );\n\n    const sortOptions = useRunSortOptions(filteredMetricKeys, filteredParamKeys);\n\n    return (\n      <div css={styles.wrapper}>\n        <ExperimentViewRunsControlsFilters\n          onDownloadCsv={onDownloadCsv}\n          updateSearchFacets={updateSearchFacets}\n          searchFacetsState={searchFacetsState}\n          viewState={viewState}\n          updateViewState={updateViewState}\n          sortOptions={sortOptions}\n          runsData={runsData}\n          requestError={requestError}\n        />\n        <ExperimentViewRunsControlsActions\n          runsData={runsData}\n          updateSearchFacets={updateSearchFacets}\n          searchFacetsState={searchFacetsState}\n          viewState={viewState}\n        />\n      </div>\n    );\n  },\n);\n\nconst styles = {\n  wrapper: (theme: Theme) => ({\n    display: 'flex',\n    gap: theme.spacing.sm,\n    flexDirection: 'column' as const,\n    marginTop: theme.spacing.md,\n    marginBottom: theme.spacing.sm,\n  }),\n};\n","import { useMemo } from 'react';\nimport {\n  ATTRIBUTE_COLUMN_SORT_KEY,\n  ATTRIBUTE_COLUMN_SORT_LABEL,\n  COLUMN_SORT_BY_ASC,\n  COLUMN_SORT_BY_DESC,\n  COLUMN_TYPES,\n  SORT_DELIMITER_SYMBOL,\n} from '../../../constants';\nimport { makeCanonicalSortKey } from '../utils/experimentPage.column-utils';\n\nexport type ExperimentRunSortOption = {\n  label: string;\n  order: string;\n  value: string;\n};\n\ntype SORT_KEY_TYPE = keyof (typeof ATTRIBUTE_COLUMN_SORT_KEY & typeof ATTRIBUTE_COLUMN_SORT_LABEL);\n\n/**\n * This hook creates a set of run+sort options basing on currently selected\n * columns and the list of all metrics and keys.\n */\nexport const useRunSortOptions = (\n  filteredMetricKeys: string[],\n  filteredParamKeys: string[],\n): ExperimentRunSortOption[] =>\n  useMemo(() => {\n    let sortOptions = [];\n    const ColumnSortByOrder = [COLUMN_SORT_BY_ASC, COLUMN_SORT_BY_DESC];\n    const attributesSortBy = Object.keys(ATTRIBUTE_COLUMN_SORT_LABEL).reduce<any[]>(\n      (options, sortLabelKey) => {\n        const sortLabel = ATTRIBUTE_COLUMN_SORT_LABEL[sortLabelKey as SORT_KEY_TYPE];\n\n        ColumnSortByOrder.forEach((order) => {\n          options.push({\n            label: sortLabel,\n            value:\n              ATTRIBUTE_COLUMN_SORT_KEY[sortLabelKey as SORT_KEY_TYPE] +\n              SORT_DELIMITER_SYMBOL +\n              order,\n            order,\n          });\n        });\n\n        return options;\n      },\n      [],\n    );\n    const metricsSortBy = filteredMetricKeys.reduce<any[]>((options, sortLabelKey) => {\n      ColumnSortByOrder.forEach((order) => {\n        options.push({\n          label: sortLabelKey,\n          value: `${makeCanonicalSortKey(\n            COLUMN_TYPES.METRICS,\n            sortLabelKey,\n          )}${SORT_DELIMITER_SYMBOL}${order}`,\n          order,\n        });\n      });\n\n      return options;\n    }, []);\n    const paramsSortBy = filteredParamKeys.reduce<any[]>((options, sortLabelKey) => {\n      ColumnSortByOrder.forEach((order) => {\n        options.push({\n          label: sortLabelKey,\n          value: `${makeCanonicalSortKey(\n            COLUMN_TYPES.PARAMS,\n            sortLabelKey,\n          )}${SORT_DELIMITER_SYMBOL}${order}`,\n          order,\n        });\n      });\n\n      return options;\n    }, []);\n    sortOptions = [...attributesSortBy, ...metricsSortBy, ...paramsSortBy];\n\n    return sortOptions;\n  }, [filteredMetricKeys, filteredParamKeys]);\n","import type { AgGridReactProps, AgReactUiProps } from '@ag-grid-community/react';\nimport { Spinner } from '@databricks/design-system';\nimport React from 'react';\n\nconst MLFlowAgGridImpl = React.lazy(() => import('./AgGrid'));\n\n/**\n * A simple loader that will lazily load MLFlow's ag grid implementation.\n * Extracted to a separate module for testing purposes.\n */\nexport const MLFlowAgGridLoader = (props: AgGridReactProps | AgReactUiProps) => (\n  <React.Suspense\n    fallback={\n      <div\n        css={(cssTheme) => ({\n          display: 'flex',\n          justifyContent: 'center',\n          margin: cssTheme.spacing.md,\n        })}\n      >\n        <Spinner />\n      </div>\n    }\n  >\n    <MLFlowAgGridImpl {...props} />\n  </React.Suspense>\n);\n","import { BeakerIcon, Button, Empty, FilterIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\nimport { LoggingRunsDocUrl } from '../../../../../common/constants';\n\n/**\n * This component displays information about no results being displayed in runs tample,\n * either due to no runs recorded in an experiment at all or due to currently used filters.\n */\nexport const ExperimentViewRunsEmptyTable = ({\n  isFiltered,\n  onClearFilters,\n}: {\n  onClearFilters: () => void;\n  isFiltered: boolean;\n}) => {\n  const getLearnMoreLinkUrl = () => LoggingRunsDocUrl;\n\n  return (\n    <div css={styles.noResultsWrapper}>\n      <div css={styles.noResults}>\n        {isFiltered ? (\n          <Empty\n            button={\n              <Button type='primary' onClick={onClearFilters}>\n                <FormattedMessage\n                  defaultMessage='Clear filters'\n                  description='Label for a button that clears all filters, visible on a experiment runs page next to a empty state when all runs have been filtered out'\n                />\n              </Button>\n            }\n            description={\n              <FormattedMessage\n                defaultMessage='All runs in this experiment have been filtered. Change or clear filters to view runs.'\n                description='Empty state description text for experiment runs page when all runs have been filtered out'\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage='All runs are filtered'\n                description='Empty state title text for experiment runs page when all runs have been filtered out'\n              />\n            }\n            image={<FilterIcon />}\n          />\n        ) : (\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage='No runs have been logged yet. <link>Learn more</link> about how to create ML model training runs in this experiment.'\n                description='Empty state description text for experiment runs page when no runs are logged in the experiment'\n                values={{\n                  link: (chunks) => (\n                    <a target='_blank' href={getLearnMoreLinkUrl()} rel='noreferrer'>\n                      {chunks}\n                    </a>\n                  ),\n                }}\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage='No runs logged'\n                description='Empty state title text for experiment runs page when no runs are logged in the experiment'\n              />\n            }\n            image={<BeakerIcon />}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  noResults: {\n    maxWidth: 360,\n  },\n  noResultsWrapper: (theme: Theme) => ({\n    marginTop: theme.spacing.lg,\n    inset: 0,\n    backgroundColor: theme.colors.backgroundPrimary,\n    position: 'absolute' as const,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  }),\n};\n","import { Button, PlusCircleIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Width of the CTA column\n */\nconst COLUMN_CTA_WIDTH = 180;\n\n/**\n * CSS classes used internally\n */\nconst CLASS_OUT_OF_VIEWPORT = 'is-out-of-viewport';\nconst CLASS_IS_HIDDEN = 'is-hidden';\nconst CLASS_IS_MINIMIZED = 'is-minimized';\n\n/**\n * List all necessary agGrid sub-element classes\n */\nconst AG_GRID_CLS = {\n  ROOT: '.ag-root',\n  LEFT_COLS_CONTAINER: '.ag-pinned-left-cols-container',\n  FULL_WIDTH_ROW: '.ag-full-width-row',\n  COLS_CONTAINER: '.ag-center-cols-container',\n  HEADER: '.ag-header',\n  BODY_VIEWPORT: '.ag-body-viewport',\n};\n\ninterface ExperimentViewRunsTableAddColumnCTAProps {\n  onClick: () => void;\n  gridContainerElement: HTMLElement | null;\n  isInitialized: boolean;\n  visible?: boolean;\n  moreRunsAvailable?: boolean;\n  moreAvailableParamsAndMetricsColumnCount?: number;\n}\n\n/**\n * Component displaying dynamic table column with \"add metrics and parameters\" CTA.\n *\n * Sample usage:\n *\n * const [gridInitialized, setGridInitialized] = useState(false);\n *\n * return (\n *   <div ref={containerElement}>\n *     <AgGrid onGridReady={() => setGridInitialized(true)} {...} />\n *     <ExperimentViewRunsTableAddColumnCTA\n *       gridContainerElement={containerElement.current}\n *       isInitialized={gridInitialized}\n *       onAddColumnClicked={onAddColumnClicked}\n *       visible={!isLoading}\n *       moreAvailableParamsAndMetricsColumnCount={3}\n *     />\n *   </div>\n * );\n */\nexport const ExperimentViewRunsTableAddColumnCTA = ({\n  onClick,\n  gridContainerElement,\n  isInitialized,\n  visible,\n  moreRunsAvailable,\n  moreAvailableParamsAndMetricsColumnCount = 0,\n}: ExperimentViewRunsTableAddColumnCTAProps) => {\n  const ctaRef = useRef<HTMLDivElement>(null);\n\n  const savedContainerRef = useRef<HTMLElement>();\n  const immediateMoreRunsAvailable = useRef<boolean>(Boolean(moreRunsAvailable));\n\n  // Save immediate value of \"moreRunsAvailable\" so the fresh version\n  // will be accessible within the resize observer\n  useEffect(() => {\n    immediateMoreRunsAvailable.current = Boolean(moreRunsAvailable);\n  }, [moreRunsAvailable]);\n\n  const initialize = useCallback((containerElement: HTMLElement) => {\n    if (!ctaRef.current || !window.ResizeObserver || !containerElement) {\n      return undefined;\n    }\n\n    const targetElement = ctaRef.current;\n\n    /**\n     * On initialization, first gather all the agGrid sub-elements\n     */\n    const rootElement = containerElement.querySelector(AG_GRID_CLS.ROOT);\n    const refLeftElem = containerElement.querySelector(AG_GRID_CLS.LEFT_COLS_CONTAINER);\n    const refCenterElem = containerElement.querySelector(AG_GRID_CLS.COLS_CONTAINER);\n    const refHeaderElem = containerElement.querySelector(AG_GRID_CLS.HEADER);\n    const refBodyViewport = containerElement.querySelector(AG_GRID_CLS.BODY_VIEWPORT);\n\n    /**\n     * Initialize variables used for position calculation\n     */\n    let gridAreaWidth = 0;\n    let leftColContainerWidth = 0;\n    let leftColContainerHeight = 0;\n    let centerColContainerWidth = 0;\n    let colContainerHeight = 0;\n    let headerHeight = 0;\n\n    /**\n     * Execute only if all elements are in place\n     */\n    if (refLeftElem && refCenterElem && refHeaderElem && rootElement && refBodyViewport) {\n      /**\n       * Hook up an resize observer\n       */\n      const resizeObserver = new ResizeObserver((entries) => {\n        /**\n         * For every changed element, gather the exact dimensions\n         */\n        for (const entry of entries) {\n          if (entry.target === rootElement) {\n            gridAreaWidth = entry.contentRect.width;\n          }\n          if (entry.target === refLeftElem) {\n            leftColContainerWidth = entry.contentRect.width;\n            leftColContainerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refBodyViewport) {\n            colContainerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refHeaderElem) {\n            headerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refCenterElem) {\n            centerColContainerWidth = entry.contentRect.width;\n          }\n        }\n\n        /**\n         * Our \"left\" position will be offset by column container widths\n         */\n        const calculatedLeft = leftColContainerWidth + centerColContainerWidth;\n\n        /**\n         * Our \"top\"  position will be offset by the header height\n         */\n        const calculatedTop = headerHeight;\n\n        /**\n         * If the column is out of viewport (expanding out of the root element),\n         * add proper CSS class to hide it\n         */\n        const isOutOfViewport = calculatedLeft + COLUMN_CTA_WIDTH >= gridAreaWidth;\n        isOutOfViewport\n          ? savedContainerRef.current?.classList.add(CLASS_OUT_OF_VIEWPORT)\n          : savedContainerRef.current?.classList.remove(CLASS_OUT_OF_VIEWPORT);\n\n        // Check if \"load more\" button is visible\n        const loadMoreRowHeight = immediateMoreRunsAvailable.current ? 32 : 0;\n\n        // If the visible row set takes only portion of the table height-wise (leftColContainerHeight < colContainerHeight),\n        // let's contract our CTA a little so \"load more\" button will fit in. If it takes whole area, do not reduce its height.\n        const calculatedHeight =\n          leftColContainerHeight < colContainerHeight\n            ? leftColContainerHeight - loadMoreRowHeight\n            : colContainerHeight;\n\n        /**\n         * If the available height is too low, add a class that indicates\n         * that we should display minimized version\n         */\n        const shouldBeMinimized = calculatedHeight < 100;\n        shouldBeMinimized\n          ? savedContainerRef.current?.classList.add(CLASS_IS_MINIMIZED)\n          : savedContainerRef.current?.classList.remove(CLASS_IS_MINIMIZED);\n\n        /**\n         * Finally, set proper values as CSS transform property. Use 3d transform\n         * to ensure hardware acceleration.\n         */\n        targetElement.style.transform = `translate3d(${calculatedLeft}px, ${calculatedTop}px, 0)`;\n\n        /**\n         * Set target height and add 1px to accomodate the border.\n         */\n        targetElement.style.height = `${calculatedHeight + 1}px`;\n      });\n\n      /**\n       * Setup observer with all the necessary elements.\n       */\n      resizeObserver.observe(refLeftElem);\n      resizeObserver.observe(refCenterElem);\n      resizeObserver.observe(refHeaderElem);\n      resizeObserver.observe(rootElement);\n      resizeObserver.observe(refBodyViewport);\n\n      /**\n       * After cleanup, disconnect the observer.\n       */\n      return () => resizeObserver.disconnect();\n    }\n    return undefined;\n  }, []);\n\n  useEffect(() => {\n    if (isInitialized && gridContainerElement) {\n      savedContainerRef.current = gridContainerElement;\n      initialize(gridContainerElement);\n    }\n  }, [initialize, isInitialized, gridContainerElement]);\n\n  /**\n   * This component works only if ResizeObserver is supported by the browser.\n   * If it's not supported, return nothing.\n   */\n  if (!window.ResizeObserver) {\n    return null;\n  }\n\n  return (\n    <div ref={ctaRef} css={styles.columnContainer} className={visible ? '' : CLASS_IS_HIDDEN}>\n      {visible && (\n        <div css={styles.buttonContainer}>\n          <Button css={styles.button} type='link' onClick={onClick}>\n            <PlusCircleIcon css={styles.buttonIcon} />\n            <div css={styles.caption}>\n              <FormattedMessage\n                defaultMessage='Show more columns {count, select, 0 {} other {({count} total)}}'\n                description='Label for a CTA button in experiment runs table which invokes column management dropdown'\n                values={{\n                  count: moreAvailableParamsAndMetricsColumnCount,\n                }}\n              />\n            </div>\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  columnContainer: (theme: Theme) => ({\n    width: COLUMN_CTA_WIDTH,\n    height: 0,\n    position: 'absolute' as const,\n    border: `1px solid ${theme.colors.grey200}`,\n    borderTop: 0,\n    top: 0,\n    left: 0,\n    willChange: 'transform' as const,\n    transform: 'translate3d(0, 0, 0)',\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      display: 'flex',\n      alignItems: 'center' as const,\n    },\n    [`&.${CLASS_IS_HIDDEN}, .${CLASS_OUT_OF_VIEWPORT} &`]: {\n      display: 'none',\n    },\n    pointerEvents: 'none' as const,\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  buttonContainer: (theme: Theme) => ({\n    top: 0,\n    paddingLeft: theme.spacing.lg,\n    paddingRight: theme.spacing.lg,\n    width: '100%',\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      paddingTop: theme.spacing.xs,\n    },\n    pointerEvents: 'all' as const,\n  }),\n  button: { whiteSpace: 'pre-wrap' as const, width: '100%' },\n  buttonIcon: (theme: Theme) => ({ color: theme.colors.textSecondary }),\n  caption: (theme: Theme) => ({\n    color: theme.colors.textSecondary,\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      display: 'none',\n    },\n  }),\n};\n","import { Spinner, Typography } from '@databricks/design-system';\nimport type { Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface ExperimentViewRunsTableStatusBarProps {\n  isLoading: boolean;\n  allRunsCount: number;\n}\n\n// Strongifies the i18n string, used in <FormattedMessage> below\nconst strong = (text: string) => <strong>{text}</strong>;\n\nexport const ExperimentViewRunsTableStatusBar = ({\n  isLoading,\n  allRunsCount,\n}: ExperimentViewRunsTableStatusBarProps) => (\n  <div css={styles.statusBar}>\n    <Typography.Text size='sm' color={isLoading ? 'secondary' : undefined}>\n      <FormattedMessage\n        // eslint-disable-next-line max-len\n        defaultMessage='<strong>{length}</strong> matching {length, plural, =0 {runs} =1 {run} other {runs}}'\n        // eslint-disable-next-line max-len\n        description='Message for displaying how many runs match search criteria on experiment page'\n        values={{\n          strong,\n          length: allRunsCount,\n        }}\n      />\n    </Typography.Text>\n    {isLoading && <Spinner size='small' />}\n  </div>\n);\n\nconst styles = {\n  statusBar: (theme: Theme) => ({\n    height: 28,\n    display: 'flex',\n    gap: 8,\n    marginTop: -1,\n    position: 'relative' as const,\n    alignItems: 'center',\n    borderTop: `1px solid ${theme.colors.border}`,\n  }),\n};\n","import {\n  ColumnApi,\n  GridApi,\n  GridReadyEvent,\n  RowSelectedEvent,\n  SelectionChangedEvent,\n} from '@ag-grid-community/core';\nimport { Interpolation, Theme } from '@emotion/react';\nimport cx from 'classnames';\nimport React, { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { MLFlowAgGridLoader } from '../../../../../common/components/ag-grid/AgGridLoader';\nimport Utils from '../../../../../common/utils/Utils';\nimport { COLUMN_TYPES } from '../../../../constants';\nimport {\n  ExperimentEntity,\n  UpdateExperimentSearchFacetsFn,\n  UpdateExperimentViewStateFn,\n} from '../../../../types';\n\nimport {\n  clearSearchExperimentsFacetsFilters,\n  isSearchFacetsFilterUsed,\n  SearchExperimentRunsFacetsState,\n} from '../../models/SearchExperimentRunsFacetsState';\nimport { SearchExperimentRunsViewState } from '../../models/SearchExperimentRunsViewState';\nimport {\n  ADJUSTABLE_ATTRIBUTE_COLUMNS,\n  ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT,\n  EXPERIMENTS_DEFAULT_COLUMN_SETUP,\n  getFrameworkComponents,\n  getRowIsLoadMore,\n  getRowId,\n  isCanonicalSortKeyOfType,\n  useRunsColumnDefinitions,\n} from '../../utils/experimentPage.column-utils';\nimport { RUNS_VISIBILITY_MODE } from '../../utils/experimentPage.common-utils';\nimport { RunRowType } from '../../utils/experimentPage.row-types';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { createLoadMoreRow } from './cells/LoadMoreRowRenderer';\nimport { ExperimentViewRunsEmptyTable } from './ExperimentViewRunsEmptyTable';\nimport { ExperimentViewRunsTableAddColumnCTA } from './ExperimentViewRunsTableAddColumnCTA';\nimport { ExperimentViewRunsTableStatusBar } from './ExperimentViewRunsTableStatusBar';\n\nconst ROW_HEIGHT = 32;\nconst ROW_BUFFER = 101; // How many rows to keep rendered, even ones not visible\n\nexport interface ExperimentViewRunsTableProps {\n  /**\n   * Actual set of prepared row data to be rendered\n   */\n  rowsData: RunRowType[];\n\n  /**\n   * Helper data set with metric, param and tag keys\n   */\n  runsData: ExperimentRunsSelectorResult;\n\n  experiments: ExperimentEntity[];\n  searchFacetsState: SearchExperimentRunsFacetsState;\n  viewState: SearchExperimentRunsViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n  isLoading: boolean;\n  moreRunsAvailable: boolean;\n  updateSearchFacets: UpdateExperimentSearchFacetsFn;\n  onAddColumnClicked: () => void;\n  loadMoreRunsFunc: () => void;\n}\n\nexport const ExperimentViewRunsTable = React.memo(\n  ({\n    experiments,\n    searchFacetsState,\n    runsData,\n    isLoading,\n    moreRunsAvailable,\n    updateSearchFacets,\n    updateViewState,\n    onAddColumnClicked,\n    rowsData,\n    loadMoreRunsFunc,\n  }: ExperimentViewRunsTableProps) => {\n    const { isComparingRuns } = searchFacetsState;\n    const { paramKeyList, metricKeyList, tagsList } = runsData;\n\n    const [gridApi, setGridApi] = useState<GridApi>();\n    const [columnApi, setColumnApi] = useState<ColumnApi>();\n    const prevSelectRunUuids = useRef<string[]>([]);\n\n    const filteredTagKeys = useMemo(() => Utils.getVisibleTagKeyList(tagsList), [tagsList]);\n\n    const containerElement = useRef<HTMLDivElement>(null);\n\n    // Flag indicating if there are any rows that can be expanded\n    const expandersVisible = useMemo(\n      () => rowsData.some((row) => row.runDateAndNestInfo?.hasExpander),\n      [rowsData],\n    );\n\n    /**\n     * Updates selected rows in the view state\n     */\n    const onSelectionChange = useCallback(\n      ({ api }: SelectionChangedEvent) => {\n        const selectedUUIDs: string[] = api\n          .getSelectedRows()\n          // Filter out load more row as it's not a real run\n          .filter((row) => !row.isLoadMoreRow)\n          .map(({ runInfo }) => runInfo.run_uuid);\n        updateViewState({\n          runsSelected: selectedUUIDs.reduce(\n            (aggregate, curr) => ({ ...aggregate, [curr]: true }),\n            {},\n          ),\n        });\n        prevSelectRunUuids.current = selectedUUIDs;\n      },\n      [updateViewState],\n    );\n\n    /**\n     * A onRowSelected event handler that runs before onSelectionChange.\n     * It checks if the currently (de)selected row contains any children\n     * and if true, (de)select them as well.\n     */\n    const handleRowSelected = useCallback((event: RowSelectedEvent) => {\n      const selectedRows = event.api.getSelectedRows();\n\n      // Let's check if the actual number of selected rows have changed\n      // to avoid empty runs\n      if (prevSelectRunUuids.current && selectedRows.length !== prevSelectRunUuids.current.length) {\n        const isSelected = Boolean(event.node.isSelected());\n\n        // We will continue only if the selected row has properly set runDateInfo\n        const { runDateAndNestInfo } = event.data as RunRowType;\n        if (!runDateAndNestInfo) {\n          return;\n        }\n        const { isParent, expanderOpen, childrenIds } = runDateAndNestInfo;\n\n        // We will continue only if the selected row is a parent containing\n        // children and is actually expanded\n        if (isParent && expanderOpen && childrenIds) {\n          const childrenIdsToSelect = childrenIds;\n\n          event.api.forEachNode((node) => {\n            const { runInfo, runDateAndNestInfo: childRunDateInfo } = node.data as RunRowType;\n\n            const childrenRunUuid = runInfo.run_uuid;\n            if (childrenIdsToSelect.includes(childrenRunUuid)) {\n              // If we found children being parents, mark their children\n              // to be selected as well.\n              if (childRunDateInfo?.childrenIds) {\n                childrenIdsToSelect.push(...childRunDateInfo.childrenIds);\n              }\n\n              node.setSelected(isSelected, false, true);\n            }\n          });\n        }\n      }\n    }, []);\n\n    const onSortBy = useCallback(\n      (newOrderByKey: string, newOrderByAsc: boolean) => {\n        updateSearchFacets({ orderByKey: newOrderByKey, orderByAsc: newOrderByAsc });\n      },\n      [updateSearchFacets],\n    );\n\n    const toggleRowExpanded = useCallback(\n      (parentId: string) =>\n        updateSearchFacets(({ runsExpanded: currentRunsExpanded, ...state }) => ({\n          ...state,\n          runsExpanded: { ...currentRunsExpanded, [parentId]: !currentRunsExpanded[parentId] },\n        })),\n      [updateSearchFacets],\n    );\n\n    const togglePinnedRow = useCallback(\n      (uuid: string) => {\n        updateSearchFacets((existingFacets) => ({\n          ...existingFacets,\n          runsPinned: !existingFacets.runsPinned.includes(uuid)\n            ? [...existingFacets.runsPinned, uuid]\n            : existingFacets.runsPinned.filter((r) => r !== uuid),\n        }));\n        // In the next frame, redraw the toggled row in to update the hover state\n        // and tooltips so they won't dangle in the previous mouse position.\n        requestAnimationFrame(() => {\n          if (!gridApi) {\n            return;\n          }\n          const rowNode = gridApi.getRowNode(uuid);\n          if (rowNode) {\n            gridApi.redrawRows({ rowNodes: [rowNode] });\n          }\n        });\n      },\n      [gridApi, updateSearchFacets],\n    );\n\n    // This callback toggles visibility of runs: either all of them or a particular one\n    const toggleRowVisibility = useCallback(\n      // `runUuidOrToggle` param can be a run ID or a keyword value indicating that all/none should be hidden\n      (runUuidOrToggle: string) => {\n        updateSearchFacets((existingFacets) => {\n          if (runUuidOrToggle === RUNS_VISIBILITY_MODE.SHOWALL) {\n            // Case #1: Showing all runs by clearing `runsHidden` array\n            return {\n              ...existingFacets,\n              runsHidden: [],\n            };\n          } else if (runUuidOrToggle === RUNS_VISIBILITY_MODE.HIDEALL) {\n            // Case #2: Hiding all runs by fully populating `runsHidden` array\n            return {\n              ...existingFacets,\n              runsHidden: rowsData.map((r) => r.runUuid),\n            };\n          }\n\n          // Case #3: toggling particular run\n          const uuid = runUuidOrToggle;\n          return {\n            ...existingFacets,\n            runsHidden: !existingFacets.runsHidden.includes(uuid)\n              ? [...existingFacets.runsHidden, uuid]\n              : existingFacets.runsHidden.filter((r) => r !== uuid),\n          };\n        });\n      },\n      [updateSearchFacets, rowsData],\n    );\n\n    const gridReadyHandler = useCallback((params: GridReadyEvent) => {\n      setGridApi(params.api);\n      setColumnApi(params.columnApi);\n    }, []);\n\n    const columnDefs = useRunsColumnDefinitions({\n      searchFacetsState,\n      onSortBy,\n      onExpand: toggleRowExpanded,\n      compareExperiments: experiments.length > 1,\n      onTogglePin: togglePinnedRow,\n      onToggleVisibility: toggleRowVisibility,\n      metricKeyList,\n      paramKeyList,\n      tagKeyList: filteredTagKeys,\n      columnApi,\n      isComparingRuns,\n    });\n\n    useEffect(() => {\n      if (!gridApi) {\n        return;\n      }\n\n      if (isLoading) {\n        gridApi.showLoadingOverlay();\n      } else {\n        gridApi.hideOverlay();\n\n        // If there are more runs available in the API, append\n        // additional special row that will display \"Load more\" button\n        if (rowsData.length && moreRunsAvailable) {\n          gridApi.setRowData([...rowsData, createLoadMoreRow()]);\n          return;\n        }\n\n        gridApi.setRowData(rowsData);\n      }\n    }, [gridApi, rowsData, isLoading, moreRunsAvailable, loadMoreRunsFunc]);\n\n    // Count all columns available for selection\n    const allAvailableColumnsCount = useMemo(() => {\n      const attributeColumnCount =\n        experiments.length > 1\n          ? ADJUSTABLE_ATTRIBUTE_COLUMNS.length\n          : ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT.length;\n\n      const valuesColumnCount = metricKeyList.length + paramKeyList.length + filteredTagKeys.length;\n\n      return attributeColumnCount + valuesColumnCount;\n    }, [experiments.length, filteredTagKeys.length, metricKeyList.length, paramKeyList.length]);\n\n    const hasSelectedAllColumns =\n      searchFacetsState.selectedColumns.length >= allAvailableColumnsCount;\n\n    // Count metrics and params columns that were not selected yet so it can be displayed in CTA\n    const moreAvailableParamsAndMetricsColumns = useMemo(() => {\n      const selectedMetricsAndParamsColumns = searchFacetsState.selectedColumns.filter(\n        (s) =>\n          isCanonicalSortKeyOfType(s, COLUMN_TYPES.METRICS) ||\n          isCanonicalSortKeyOfType(s, COLUMN_TYPES.PARAMS),\n      ).length;\n\n      const allMetricsAndParamsColumns = metricKeyList.length + paramKeyList.length;\n\n      return Math.max(0, allMetricsAndParamsColumns - selectedMetricsAndParamsColumns);\n    }, [metricKeyList.length, paramKeyList.length, searchFacetsState.selectedColumns]);\n\n    const displayAddColumnsCTA = !hasSelectedAllColumns && !isComparingRuns && rowsData.length > 0;\n\n    const allRunsCount = useMemo(\n      () =>\n        runsData.runInfos.filter(\n          (r) =>\n            searchFacetsState.runsPinned.includes(r.run_uuid) ||\n            runsData.runUuidsMatchingFilter.includes(r.run_uuid),\n        ).length,\n      [runsData, searchFacetsState.runsPinned],\n    );\n\n    useLayoutEffect(() => {\n      if (!gridApi) {\n        return;\n      }\n      // Each time we switch to \"compare runs\" mode, we should\n      // maximize columns so \"run name\" column will take up all remaining space\n      if (isComparingRuns) {\n        // Selection feature is not supported in compare runs mode so we should deselect all\n        gridApi.deselectAll();\n        gridApi.sizeColumnsToFit();\n      }\n    }, [gridApi, isComparingRuns]);\n\n    return (\n      <div css={styles.tableAreaWrapper}>\n        <div\n          ref={containerElement}\n          className={cx('ag-theme-balham ag-grid-sticky', {\n            'ag-grid-expanders-visible': expandersVisible,\n          })}\n          css={styles.agGridOverrides}\n        >\n          <MLFlowAgGridLoader\n            defaultColDef={EXPERIMENTS_DEFAULT_COLUMN_SETUP}\n            columnDefs={columnDefs}\n            rowSelection='multiple'\n            onGridReady={gridReadyHandler}\n            onSelectionChanged={onSelectionChange}\n            rowHeight={ROW_HEIGHT}\n            headerHeight={ROW_HEIGHT}\n            onRowSelected={handleRowSelected}\n            suppressRowClickSelection\n            suppressColumnMoveAnimation\n            suppressScrollOnNewData\n            isFullWidthRow={getRowIsLoadMore}\n            fullWidthCellRenderer={'LoadMoreRowRenderer'}\n            fullWidthCellRendererParams={{ loadMoreRunsFunc }}\n            suppressFieldDotNotation\n            enableCellTextSelection\n            components={getFrameworkComponents()}\n            suppressNoRowsOverlay\n            loadingOverlayComponent='loadingOverlayComponent'\n            loadingOverlayComponentParams={{ showImmediately: true }}\n            getRowId={getRowId}\n            rowBuffer={ROW_BUFFER}\n          />\n          {displayAddColumnsCTA && (\n            <ExperimentViewRunsTableAddColumnCTA\n              gridContainerElement={containerElement.current}\n              isInitialized={Boolean(gridApi)}\n              onClick={onAddColumnClicked}\n              visible={!isLoading}\n              moreRunsAvailable={moreRunsAvailable}\n              moreAvailableParamsAndMetricsColumnCount={moreAvailableParamsAndMetricsColumns}\n            />\n          )}\n        </div>\n        {rowsData.length < 1 && !isLoading && (\n          <ExperimentViewRunsEmptyTable\n            onClearFilters={() => updateSearchFacets(clearSearchExperimentsFacetsFilters)}\n            isFiltered={isSearchFacetsFilterUsed(searchFacetsState)}\n          />\n        )}\n        <ExperimentViewRunsTableStatusBar allRunsCount={allRunsCount} isLoading={isLoading} />\n      </div>\n    );\n  },\n);\n\n/**\n * Concrete named definitions for colors used in this agGrid\n */\nconst getGridColors = (theme: Theme) => ({\n  rowBackground: theme.colors.backgroundPrimary, // regular row background\n  rowBackgroundHover: `${theme.colors.grey600}0A`, // hovered row (4% opacity)\n  rowBackgroundSelected: `${theme.colors.grey600}14`, // selected row (8% opacity)\n  rowBackgroundHoverSelected: `${theme.colors.grey600}1F`, // selected and hovered row (12% opacity)\n  columnSortedBy: `${theme.colors.blue100}b3`, // selected and hovered row (12% opacity)\n  headerBackground: theme.colors.grey100,\n  headerTextColor: '#2E3840', // directly from Figma design\n  headerGroupTextColor: theme.colors.textSecondary, // directly from Figma design\n  borderColor: theme.colors.grey200, // border between header and content and scrollable areas\n  headerBorderColor: 'transparent', // borders inside the header\n  checkboxBorderColor: theme.colors.actionDefaultBorderDefault,\n  checkboxBorderColorChecked: theme.colors.backgroundPrimary,\n  checkboxBackgroundColorChecked: theme.colors.actionPrimaryBackgroundDefault,\n});\n\nconst styles = {\n  tableAreaWrapper: { display: 'flex', flexDirection: 'column' as const },\n  agGridOverrides: (theme: Theme): Interpolation<Theme> => {\n    const gridColors = getGridColors(theme);\n    return {\n      height: '100%',\n      position: 'relative',\n      '&.ag-theme-balham': {\n        // Set up internal variable values\n        '--ag-border-color': gridColors.borderColor,\n        '--ag-row-border-color': gridColors.borderColor,\n        '--ag-odd-row-background-color': gridColors.rowBackground,\n        '--ag-row-hover-color': gridColors.rowBackgroundHover,\n        '--ag-selected-row-background-color': gridColors.rowBackgroundSelected,\n        '--ag-header-foreground-color': gridColors.headerTextColor,\n        '--ag-header-background-color': gridColors.headerBackground,\n\n        // Makes row header sticky\n        '&.ag-grid-sticky .ag-header': {\n          position: 'sticky',\n          top: 0,\n          zIndex: 1,\n        },\n        '&.ag-grid-sticky .ag-root': {\n          overflow: 'visible',\n        },\n        '&.ag-grid-sticky .ag-root-wrapper': {\n          border: '0',\n          borderRadius: '4px',\n          overflow: 'visible',\n        },\n\n        // Adds a static line between column group header row and column headers\n        '.ag-header::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: ROW_HEIGHT,\n          left: 0,\n          right: 0,\n          height: 1,\n          backgroundColor: gridColors.borderColor,\n        },\n\n        // Line height for cell contents is the row height minus the border\n        '.ag-cell': {\n          lineHeight: `min(var(--ag-line-height, ${ROW_HEIGHT - 2}px), ${ROW_HEIGHT - 2}px)`,\n        },\n\n        // Padding fixes for the header (we use custom component)\n        '.ag-header-cell': {\n          padding: 0,\n        },\n        '.ag-header-cell .ag-checkbox': {\n          padding: '0 7px',\n          borderLeft: '1px solid transparent', // to match it with the cell sizing\n        },\n\n        '.ag-cell.is-ordered-by, .ag-header-cell > .is-ordered-by': {\n          backgroundColor: gridColors.columnSortedBy,\n        },\n        '.ag-header-row': {\n          '--ag-border-color': gridColors.headerBorderColor,\n        },\n        '.ag-header-row.ag-header-row-column-group': {\n          '--ag-header-foreground-color': gridColors.headerGroupTextColor,\n        },\n        '.ag-row.ag-row-selected.ag-row-hover': {\n          backgroundColor: gridColors.rowBackgroundHoverSelected,\n        },\n\n        // Hides resize guidelines when header is not hovered\n        '.ag-header:not(:hover) .ag-header-cell::after, .ag-header:not(:hover) .ag-header-group-cell::after':\n          {\n            opacity: 0,\n          },\n        '.ag-pinned-left-header': {\n          borderRight: 'none',\n        },\n\n        // Fixed for loading overlay, should be above \"load more\" button\n        '.ag-overlay-loading-wrapper': {\n          paddingTop: theme.spacing.md * 4,\n          alignItems: 'center',\n          zIndex: 2,\n        },\n        '.ag-overlay-loading-wrapper .ag-react-container': {\n          flex: 1,\n        },\n\n        // Adds border after the last column to separate contents from \"Add columns\" CTA\n        '.ag-center-cols-container': {\n          minHeight: 0,\n        },\n\n        '.ag-full-width-row': {\n          borderBottom: 0,\n          backgroundColor: 'transparent',\n          zIndex: 1,\n          '&.ag-row-hover': {\n            backgroundColor: 'transparent',\n          },\n        },\n\n        // Centers vertically and styles the checkbox cell\n        '.is-checkbox-cell': {\n          display: 'flex',\n          alignItems: 'center',\n          paddingLeft: 7, // will end up in 8px due to 1px of transparent border on the left\n        },\n\n        // Header checkbox cell will get the same background as header only if it's unchecked\n        '.ag-header-cell .ag-checkbox .ag-input-wrapper:not(.ag-indeterminate):not(.ag-checked)': {\n          '--ag-checkbox-background-color': gridColors.headerBackground,\n        },\n\n        // Distance from the checkbox to other icons (pin, visibility etc.)\n        '.ag-cell-wrapper .ag-selection-checkbox': {\n          marginRight: 20,\n        },\n\n        // Header and cell checkboxes will get same colors from the palette\n        '.is-checkbox-cell, .ag-header-cell .ag-checkbox': {\n          '.ag-checkbox-input-wrapper::after': {\n            color: gridColors.checkboxBorderColor,\n          },\n          '.ag-checkbox-input-wrapper.ag-checked': {\n            '--ag-checkbox-background-color': gridColors.checkboxBackgroundColorChecked,\n            '--ag-checkbox-checked-color': gridColors.checkboxBorderColorChecked,\n            '&::after': {\n              color: gridColors.checkboxBorderColorChecked,\n            },\n          },\n        },\n      },\n    };\n  },\n};\n","/**\n * Defines non-persistable, local state that\n * controls visibility of various UI elements in the\n * runs table and controls\n */\nexport class SearchExperimentRunsViewState {\n  /**\n   * Currently selected runs\n   */\n  runsSelected: Record<string, boolean> = {};\n\n  /**\n   * Currently hidden, selected child runs\n   */\n  hiddenChildRunsSelected: Record<string, boolean> = {};\n\n  /**\n   * Display \"select columns\" dropdown\n   */\n  columnSelectorVisible = false;\n}\n","import { isNumber } from 'lodash';\nimport Utils from '../../../../common/utils/Utils';\nimport { ExperimentEntity, KeyValueEntity, ModelInfoEntity, RunInfoEntity } from '../../../types';\nimport {\n  RunRowDateAndNestInfo,\n  RunRowModelsInfo,\n  RunRowType,\n  RunRowVersionInfo,\n} from './experimentPage.row-types';\nimport { SearchExperimentRunsFacetsState } from '../models/SearchExperimentRunsFacetsState';\nimport { ExperimentRunsSelectorResult } from './experimentRuns.selector';\nimport {\n  EXPERIMENT_FIELD_PREFIX_METRIC,\n  EXPERIMENT_FIELD_PREFIX_PARAM,\n  EXPERIMENT_FIELD_PREFIX_TAG,\n  EXPERIMENT_PARENT_ID_TAG,\n} from './experimentPage.common-utils';\n\n/**\n * A simple tree-like interface used in nested rows calculations.\n */\ninterface SimpleTreeNode {\n  value: string;\n  parent?: SimpleTreeNode;\n}\n\n/**\n * An intermediate interface representing single row in agGrid (but not necessarily\n * a single run - these might be nested and not expanded). Is created from the data\n * originating from the store, then after enriching with metrics, params, attributed etc.\n * is being transformed to RunRowType which serves as a final agGrid compatible type.\n */\ninterface RowRenderMetadata {\n  index: number;\n  isParent?: boolean;\n  hasExpander?: boolean;\n  expanderOpen?: boolean;\n  isPinnable?: boolean;\n  runInfo: RunInfoEntity;\n  level: number;\n  childrenIds?: string[];\n  params: KeyValueEntity[];\n  metrics: KeyValueEntity[];\n  tags: Record<string, KeyValueEntity>;\n}\n\n/**\n * For a given run dataset from the store, this function prepares\n * a list of rows metadata discarding any information about the parent/child run hierarchy.\n */\nconst getFlatRowRenderMetadata = (runData: SingleRunData[]) =>\n  runData.map<RowRenderMetadata>(({ runInfo, metrics = [], params = [], tags = {} }, index) => ({\n    index,\n    runInfo,\n    level: 0, // All runs will be on \"0\" level here,\n    isPinnable: !tags[EXPERIMENT_PARENT_ID_TAG]?.value,\n    metrics: metrics,\n    params: params,\n    tags: tags,\n  }));\n\n/**\n * For a given run dataset from the store, this function prepares\n * a list of rows metadata taking the parent/child run hierarchy into consideration.\n */\nconst getNestedRowRenderMetadata = ({\n  runsExpanded,\n  runData,\n}: {\n  runsExpanded: Record<string, boolean>;\n  runData: SingleRunData[];\n}) => {\n  // First, map run IDs to their indices - will be helpful later on.\n  const runIdToIndex: Record<string, number> = {};\n  runData.forEach(({ runInfo }, index) => {\n    runIdToIndex[runInfo.run_uuid] = index;\n  });\n\n  // Create a list of tree nodes for all run infos. Each leaf's value is the run UUID.\n  const treeNodes: SimpleTreeNode[] = runData.map(({ runInfo }) => ({ value: runInfo.run_uuid }));\n\n  // We're going to check if any hierarchy is detected in the run set. If not,\n  // we will not bother with unnecessary calculations.\n  let foundHierarchy = false;\n\n  // Iterate through all the tags and assign proper parent references\n  runData.forEach(({ tags }, index) => {\n    const parentRunId = tags?.[EXPERIMENT_PARENT_ID_TAG];\n    if (parentRunId) {\n      const parentRunIndex = runIdToIndex[parentRunId.value];\n      if (parentRunIndex !== undefined) {\n        foundHierarchy = true;\n        treeNodes[index].parent = treeNodes[parentRunIndex];\n      }\n    }\n  });\n\n  // If no parent tags are found, we're not going calculate\n  // tree-related stuff and return a flat list instead.\n  if (!foundHierarchy) {\n    return getFlatRowRenderMetadata(runData);\n  }\n\n  // Iterate through the tree and convert it to a flat parent->children mapping array\n  const parentIdToChildren: Record<string, number[]> = {};\n  const rootIndexes: any[] = [];\n  treeNodes.forEach((treeNode, index) => {\n    const { parent } = treeNode;\n    if (parent !== undefined && parent.value !== treeNode.value) {\n      if (parentIdToChildren[parent.value]) {\n        parentIdToChildren[parent.value].push(index);\n      } else {\n        parentIdToChildren[parent.value] = [index];\n      }\n    } else {\n      // If a node has no parent, let's register it as a root index\n      rootIndexes.push(index);\n    }\n  });\n\n  const resultRowsMetadata: RowRenderMetadata[] = [];\n\n  // Create and invoke a simple DFS search with \"visited\" set so we won't be caught in a cycle\n  const visited = new Set();\n  const doDfs = (dfsIndex: number, currLevel: number) => {\n    if (!visited.has(dfsIndex)) {\n      const currentNodeRunInfo = runData[dfsIndex].runInfo;\n      const currentNodeRunId = currentNodeRunInfo.run_uuid;\n\n      // Only rows that are top-level parents or those being on the top level are pinnable\n      const isPinnable = Boolean(rootIndexes.includes(dfsIndex)) || currLevel === 0;\n\n      const rowMetadata: RowRenderMetadata = {\n        index: dfsIndex,\n        isParent: false,\n        hasExpander: false,\n        level: currLevel,\n        runInfo: currentNodeRunInfo,\n        params: runData[dfsIndex].params || [],\n        metrics: runData[dfsIndex].metrics || [],\n        tags: runData[dfsIndex].tags || {},\n        isPinnable,\n      };\n      if (parentIdToChildren[currentNodeRunId]) {\n        rowMetadata.isParent = true;\n        rowMetadata.hasExpander = true;\n        rowMetadata.expanderOpen = Boolean(runsExpanded[currentNodeRunId]);\n        rowMetadata.childrenIds = parentIdToChildren[currentNodeRunId].map(\n          (cIdx) => runData[cIdx].runInfo.run_uuid,\n        );\n      }\n\n      resultRowsMetadata.push(rowMetadata);\n      visited.add(dfsIndex);\n\n      const childrenIndices = parentIdToChildren[currentNodeRunId];\n      // Repeat DFS for children nodes - only if the current node is expanded\n      if (childrenIndices) {\n        if (runsExpanded[currentNodeRunId]) {\n          childrenIndices.forEach((dIdx) => {\n            doDfs(dIdx, currLevel + 1);\n          });\n        }\n      }\n    }\n  };\n\n  // Invoke the DFS for all root indexes\n  rootIndexes.forEach((rootNodeIndex) => {\n    doDfs(rootNodeIndex, 0);\n  });\n  return resultRowsMetadata;\n};\n\n/**\n * Iterates through all key/value data given for a run and\n * returns mapped dataset in a \"PREFIX-NAME\" form, e.g. '$$$param$$$-paramname\".\n * Fills '-' placeholder in all empty places.\n */\nconst createKeyValueDataForRunRow = (\n  list: { key: string; value: string }[],\n  keys: string[],\n  prefix: string,\n) => {\n  if (!list) {\n    return [];\n  }\n\n  const map: Record<string, string> = {};\n\n  // First, populate all values (cells) with default placeholder: '-'\n  for (const key of keys) {\n    map[`${prefix}-${key}`] = '-';\n  }\n\n  // Then, override with existing value if found\n  for (const { key, value } of list) {\n    if (value || isNumber(value)) {\n      map[`${prefix}-${key}`] = value;\n    }\n  }\n\n  return map;\n};\n\n/**\n * Temporary function that assigns randomized, yet stable color\n * from the static palette basing on an input string. Used for coloring runs.\n *\n * TODO: make a decision on the final color hashing per run\n */\nconst getStableColorByStringHash = (data: string) => {\n  // Taken from Figma design\n  const colors = [\n    '#077A9D',\n    '#8BCAE7',\n    '#FFAB00',\n    '#FFDB96',\n    '#00A972',\n    '#99DDB4',\n    '#BA7B23',\n    '#FF3621',\n    '#FCA4A1',\n    '#919191',\n    '#00875C',\n    '#1B5162',\n    '#914B9F',\n    '#D01F0B',\n    '#BD89C7',\n    '#AB4057',\n    '#5F5F5F',\n    '#BF7080',\n    '#C2C2C2',\n    '#7F1035',\n  ];\n  let a = 0,\n    b = 0;\n\n  // Let's use super simple hashing method\n  for (let i = 0; i < data.length; i++) {\n    a = (a + data.charCodeAt(i)) % 255;\n    b = (b + a) % 255;\n  }\n\n  // eslint-disable-next-line no-bitwise\n  return colors[(a | (b << 8)) % colors.length];\n};\n\n/**\n * Creates ag-grid compatible row dataset for all given runs basing on\n * the data retrieved from the API and from the refux store.\n * Please refer to PrepareRunsGridDataParams type for type reference.\n */\nexport const prepareRunsGridData = ({\n  experiments,\n  modelVersionsByRunUuid,\n  runsExpanded,\n  nestChildren,\n  referenceTime,\n  paramKeyList,\n  metricKeyList,\n  tagKeyList,\n  runsPinned,\n  runsHidden,\n  runData,\n  runUuidsMatchingFilter,\n}: PrepareRunsGridDataParams) => {\n  const experimentNameMap = Utils.getExperimentNameMap(\n    Utils.sortExperimentsById(experiments),\n  ) as Record<string, { name: string; basename: string }>;\n\n  // Let's start with generating intermediate row metadata - either as a nested or a flat list.\n  // We need to assemble separate hierarchies for pinned rows and unpinned rows:\n  const rowRenderMetadata: RowRenderMetadata[] = nestChildren\n    ? getNestedRowRenderMetadata({ runData, runsExpanded })\n    : getFlatRowRenderMetadata(runData);\n\n  // We will aggregate children of pinned parent rows here so we will easily pin them as well\n  const childrenToPin: string[] = [];\n\n  // Now, enrich the intermediate row metadata with attributes, metrics and params and\n  // return it as a grid-consumable \"RunRowType\" type.\n  const runs = rowRenderMetadata.map<RunRowType>((runInfoMetadata) => {\n    const {\n      runInfo,\n      isParent = false,\n      hasExpander = false,\n      level = 0,\n      expanderOpen = false,\n      isPinnable = false,\n      childrenIds = [],\n      tags,\n      params,\n      metrics,\n    } = runInfoMetadata;\n\n    const formattedMetrics = (metrics || []).map(({ key, value }) => ({\n      key,\n      value: Utils.formatMetric(value),\n    }));\n\n    // Extract necessary basic info\n    const runUuid = runInfo.run_uuid;\n    const { experiment_id: experimentId } = runInfo;\n    const experimentName = experimentNameMap[experimentId];\n    const user = Utils.getUser(runInfo, tags);\n    const duration = Utils.getDuration(runInfo.start_time, runInfo.end_time);\n    const runName = Utils.getRunName(runInfo) || runInfo.run_uuid;\n\n    // Extract visible tags (i.e. those not prefixed with \"mlflow.\")\n    const visibleTags = Utils.getVisibleTagValues(tags).map(([key, value]) => ({\n      key,\n      value,\n    }));\n\n    // Prepare a data package to be used by \"Start time\" cell\n    const runDateAndNestInfo: RunRowDateAndNestInfo = {\n      startTime: runInfo.start_time,\n      referenceTime,\n      experimentId,\n      runUuid,\n      runStatus: runInfo.status,\n      isParent,\n      hasExpander,\n      expanderOpen,\n      childrenIds,\n      level,\n    };\n\n    // Prepare a data package to be used by \"Models\" cell\n    const models: RunRowModelsInfo = {\n      registeredModels: modelVersionsByRunUuid[runInfo.run_uuid] || [], // ModelInfoEntity\n      loggedModels: Utils.getLoggedModelsFromTags(tags),\n      experimentId: runInfo.experiment_id,\n      runUuid: runInfo.run_uuid,\n    };\n\n    // Prepare a data package to be used by \"Version\" cell\n    const version: RunRowVersionInfo = {\n      version: Utils.getSourceVersion(tags),\n      name: Utils.getSourceName(tags),\n      type: Utils.getSourceType(tags),\n    };\n\n    const isCurrentRowHidden = runsHidden.includes(runUuid);\n    const isCurrentRowPinned = isPinnable && runsPinned.includes(runUuid);\n    const isParentPinned = childrenToPin.includes(runUuid);\n\n    // If this or a parent row is pinned, pin children as well\n    if (isCurrentRowPinned || isParentPinned) {\n      childrenToPin.push(...childrenIds);\n    }\n\n    // Compile everything into a data object to be consumed by the grid component\n    return {\n      runUuid,\n      runDateAndNestInfo,\n      runInfo,\n      experimentName,\n      experimentId,\n      duration,\n      user,\n      runName,\n      tags,\n      models,\n      version,\n      pinnable: isPinnable,\n      color: getStableColorByStringHash(runUuid),\n      hidden: isCurrentRowHidden,\n      pinned: isCurrentRowPinned || isParentPinned,\n      ...createKeyValueDataForRunRow(params, paramKeyList, EXPERIMENT_FIELD_PREFIX_PARAM),\n      ...createKeyValueDataForRunRow(\n        formattedMetrics,\n        metricKeyList,\n        EXPERIMENT_FIELD_PREFIX_METRIC,\n      ),\n      ...createKeyValueDataForRunRow(visibleTags, tagKeyList, EXPERIMENT_FIELD_PREFIX_TAG),\n    };\n  });\n\n  // If the flat structure is displayed, we can hoist pinned rows to the top\n  return [\n    // Add pinned rows to the top\n    ...runs.filter(({ pinned }) => pinned),\n\n    // Next, add all remaining rows - however, sweep out all runs that don't match the current filter. This\n    // will hide all filtered out runs that were pinned before, but were eventually un-pinned.\n    ...runs.filter(({ pinned, runUuid }) => !pinned && runUuidsMatchingFilter.includes(runUuid)),\n  ];\n};\n\ntype SingleRunData = {\n  runInfo: RunInfoEntity;\n  params: KeyValueEntity[];\n  metrics: KeyValueEntity[];\n  tags: Record<string, KeyValueEntity>;\n};\n\n/**\n * All parameters necessary to calculate run row data.\n */\ntype PrepareRunsGridDataParams = Pick<\n  ExperimentRunsSelectorResult,\n  'metricKeyList' | 'paramKeyList' | 'modelVersionsByRunUuid'\n> &\n  Pick<SearchExperimentRunsFacetsState, 'runsExpanded' | 'runsPinned' | 'runsHidden'> & {\n    /**\n     * List of experiments containing the runs\n     */\n    experiments: ExperimentEntity[];\n\n    /**\n     * Registered model versions arrays per run uuid\n     */\n    modelVersionsByRunUuid: Record<string, ModelInfoEntity[]>;\n\n    /**\n     * Boolean flag indicating if hierarchical runs should be generated\n     */\n    nestChildren: boolean;\n\n    /**\n     * List of all visible tag keys\n     */\n    tagKeyList: string[];\n\n    /**\n     * A reference time necessary to calculate \"xxx minutes ago\"-like labels\n     */\n    referenceTime: Date;\n\n    /**\n     * List of simplified run objects containing all relevant data\n     */\n    runData: SingleRunData[];\n\n    /**\n     * List of all runs IDs that match the current filter\n     * (this excludes all rows that on the list just because they are pinned)\n     */\n    runUuidsMatchingFilter: string[];\n  };\n","import type { CompareRunsChartAxisDef } from './charts/CompareRunsCharts.common';\nimport { getUUID } from '../../../common/utils/ActionUtils';\n\n/**\n * Enum for all recognized chart types used in compare runs\n */\nexport enum RunsCompareChartType {\n  BAR = 'BAR',\n  LINE = 'LINE',\n  SCATTER = 'SCATTER',\n  CONTOUR = 'CONTOUR',\n  PARALLEL = 'PARALLEL',\n}\n\n/**\n * Simple interface corresponding to `RunsCompareChartCard`.\n * Its role is to distinguish between stateful class instance and a simple POJO,\n * it is meant to be contained in a serializable, persisted state.\n */\nexport type SerializedRunsCompareCardConfigCard = RunsCompareCardConfig;\n\n/**\n * Main class used for represent a single configured chart card with its type, configuration options etc.\n * Meant to be extended by various chart type classes with `type` field being frozen to a single value.\n */\nexport abstract class RunsCompareCardConfig {\n  uuid?: string;\n  type: RunsCompareChartType = RunsCompareChartType.BAR;\n  runsCountToCompare?: number = 10;\n\n  constructor(uuid?: string) {\n    this.uuid = uuid;\n  }\n\n  /**\n   * Serializes chart entry, i.e. strips all unnecessary fields (and/or methods) so\n   * it can be saved in persistable memory.\n   */\n  static serialize(entity: Partial<RunsCompareCardConfig>): SerializedRunsCompareCardConfigCard {\n    // TODO: strip unnecessary fields if any\n    return (Object.keys(entity) as (keyof SerializedRunsCompareCardConfigCard)[]).reduce(\n      (result, key) => ({ ...result, [key]: entity[key] }),\n      {} as SerializedRunsCompareCardConfigCard,\n    );\n  }\n\n  /**\n   * Creates empty chart (card) config basing on a type.\n   * TODO: consume visible run set and determine best configuration of metrics, params etc.\n   */\n  static getEmptyChartCardByType(type: RunsCompareChartType, uuid?: string) {\n    if (type === RunsCompareChartType.BAR) {\n      return new RunsCompareBarCardConfig(uuid);\n    } else if (type === RunsCompareChartType.SCATTER) {\n      return new RunsCompareScatterCardConfig(uuid);\n    } else if (type === RunsCompareChartType.PARALLEL) {\n      return new RunsCompareParallelCardConfig(uuid);\n    } else if (type === RunsCompareChartType.LINE) {\n      return new RunsCompareLineCardConfig(uuid);\n    } else {\n      // Must be contour\n      return new RunsCompareContourCardConfig(uuid);\n    }\n  }\n\n  static getBaseChartConfigs(primaryMetricKey: string) {\n    const resultChartSet: RunsCompareCardConfig[] = [\n      RunsCompareCardConfig.getEmptyChartCardByType(RunsCompareChartType.PARALLEL, getUUID()),\n    ];\n\n    // Add a bar metric chart only if at least one metric key is detected\n    if (primaryMetricKey) {\n      resultChartSet.push({\n        ...RunsCompareCardConfig.getEmptyChartCardByType(RunsCompareChartType.BAR, getUUID()),\n        metricKey: primaryMetricKey,\n      } as RunsCompareBarCardConfig);\n    }\n\n    return resultChartSet;\n  }\n}\n\n// TODO: add configuration fields relevant to scatter chart\nexport class RunsCompareScatterCardConfig extends RunsCompareCardConfig {\n  type: RunsCompareChartType.SCATTER = RunsCompareChartType.SCATTER;\n  xaxis: CompareRunsChartAxisDef = { key: '', type: 'METRIC' };\n  yaxis: CompareRunsChartAxisDef = { key: '', type: 'METRIC' };\n  runsCountToCompare = 100;\n}\n\n// TODO: add configuration fields relevant to line chart\nexport class RunsCompareLineCardConfig extends RunsCompareCardConfig {\n  type: RunsCompareChartType.LINE = RunsCompareChartType.LINE;\n\n  /**\n   * A metric key used for chart's X axis\n   */\n  metricKey = '';\n\n  /**\n   * Y axis mode\n   */\n  scaleType: 'linear' | 'log' = 'linear';\n\n  /**\n   * Choose X axis mode - numeric step or absolute time\n   */\n  xAxisKey: 'step' | 'time' = 'step';\n}\n\n// TODO: add configuration fields relevant to bar chart\nexport class RunsCompareBarCardConfig extends RunsCompareCardConfig {\n  type: RunsCompareChartType.BAR = RunsCompareChartType.BAR;\n\n  /**\n   * A metric key used for chart's X axis\n   */\n  metricKey = '';\n}\n\n// TODO: add configuration fields relevant to contour chart\nexport class RunsCompareContourCardConfig extends RunsCompareCardConfig {\n  type: RunsCompareChartType.CONTOUR = RunsCompareChartType.CONTOUR;\n  xaxis: CompareRunsChartAxisDef = { key: '', type: 'METRIC' };\n  yaxis: CompareRunsChartAxisDef = { key: '', type: 'METRIC' };\n  zaxis: CompareRunsChartAxisDef = { key: '', type: 'METRIC' };\n}\n\n// TODO: add configuration fields relevant to parallel coords chart\nexport class RunsCompareParallelCardConfig extends RunsCompareCardConfig {\n  type: RunsCompareChartType.PARALLEL = RunsCompareChartType.PARALLEL;\n  selectedParams: string[] = [];\n  selectedMetrics: string[] = [];\n}\n","var _path, _rect, _rect2, _rect3, _rect4;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChartBar(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 16,\n    viewBox: \"0 0 18 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 0.813599V15.1865H17\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 3.16943,\n    y: 10.5763,\n    width: 2.16949,\n    height: 3.25424,\n    fill: \"#338ECC\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 6.42371,\n    y: 5.15259,\n    width: 2.16949,\n    height: 8.67797,\n    fill: \"#338ECC\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 9.67798,\n    y: 8.40686,\n    width: 2.16949,\n    height: 5.42373,\n    fill: \"#338ECC\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 12.9323,\n    y: 1.89832,\n    width: 2.16949,\n    height: 11.9322,\n    fill: \"#338ECC\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartBar);\nexport default __webpack_public_path__ + \"static/media/chart-bar.0fd4a63680fba840a7b69fbf07969f79.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChartContour(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1V17H17\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.9749 4.94148C12.9188 4.71702 12.221 4.73284 12.0618 4.71515C11.1779 4.61693 10.2817 4.66052 9.39271 4.66052C8.11919 4.66052 7.15648 4.97961 6.24753 5.90922C5.86197 6.30355 5.5235 6.77684 5.23295 7.24378C4.99434 7.62726 4.65544 7.93479 4.40569 8.31299C3.93777 9.02154 3.56281 9.80723 3.56281 10.6699C3.56281 11.1806 3.37479 11.598 3.76962 12.0669C4.19449 12.5714 4.6863 12.9507 5.27978 13.2649C5.88594 13.5858 6.42202 13.8619 7.13723 13.8619C7.74338 13.8619 8.34952 13.8619 8.95567 13.8619C9.45735 13.8619 9.96042 13.8731 10.4619 13.8619C11.1412 13.8468 11.9484 13.1895 12.413 12.7381C13.581 11.6035 14.2393 9.88016 14.2393 8.24665C14.2393 7.69923 14.3797 7.17063 14.3797 6.62723C14.3797 6.40084 14.4779 5.87696 14.2744 5.71411C13.9268 5.43606 13.5785 5.13789 13.1857 4.94148\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11.9213 6.83789C11.2761 6.83789 10.6309 6.83789 9.98577 6.83789C9.19776 6.83789 8.80182 7.44144 8.2844 7.97734C7.58163 8.70521 7.28544 9.67306 7.28544 10.666C7.28544 10.9641 7.22004 11.177 7.46104 11.3645C7.6831 11.5372 8.10719 11.6142 8.37806 11.6142C9.07316 11.6142 9.91042 11.5583 10.4462 11.0523C10.9277 10.5975 11.473 10.3701 11.8159 9.75284C12.045 9.34042 12.2022 8.86324 12.2022 8.38317C12.2022 8.14903 12.2022 7.9149 12.2022 7.68077C12.2022 7.4241 12.0208 7.38817 11.9213 7.18909\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartContour);\nexport default __webpack_public_path__ + \"static/media/chart-contour.0d4b306f2669f3ad25375568935e3ce3.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChartLine(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 22,\n    height: 22,\n    viewBox: \"0 0 22 22\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.38977 15.717L8.79655 10.8113L12.5254 14.9622L19.644 7.03772\",\n    stroke: \"#338ECC\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1V21H21\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartLine);\nexport default __webpack_public_path__ + \"static/media/chart-line.0adaa2036bb4eb5956db6d0c7e925a3d.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3, _path4, _path5;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChartParallel(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1V17H17\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.21875 3.58289C4.55663 3.58289 4.88067 3.68935 5.21469 3.73008C5.6474 3.78285 6.02137 3.96513 6.37191 4.21552C6.76902 4.49917 7.0271 4.74589 7.24101 5.18954C7.44337 5.60925 7.59378 6.06989 7.72958 6.51432C7.86002 6.94121 8.09708 7.33726 8.19153 7.77803C8.25347 8.0671 8.34514 8.32427 8.44678 8.60015C8.58028 8.96252 8.80086 9.27915 8.96667 9.62583C9.15145 10.0122 9.216 10.4461 9.34876 10.8551C9.57831 11.5623 9.91132 12.4763 10.7205 12.6731C11.4284 12.8453 12.1459 12.8845 12.8705 12.8845C13.0981 12.8845 13.3979 12.898 13.5831 12.7499C13.6402 12.7042 13.7451 12.6907 13.8164 12.6591C13.8752 12.6329 14.0919 12.5871 14.1123 12.5463\",\n    stroke: \"#CCE3F2\",\n    strokeLinecap: \"round\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.16162 12.9805C4.32512 12.9805 4.4895 12.9859 4.65284 12.9805C4.84076 12.9742 5.0468 12.7952 5.2099 12.707C5.62236 12.4841 5.99426 12.0648 6.24299 11.6739C6.49491 11.2781 6.8776 10.9871 7.0887 10.5649C7.27767 10.187 7.50992 9.80749 7.73691 9.45078C7.93911 9.13304 8.10211 8.77722 8.28637 8.44554C8.43088 8.18544 8.45 7.88672 8.60542 7.62768C8.94898 7.05509 9.16215 6.418 9.45873 5.82484C9.72614 5.29001 9.96898 4.82426 10.4159 4.42207C10.5753 4.27853 10.8984 4.21824 11.0995 4.14861C11.3303 4.06873 11.579 4.02714 11.8136 3.93592C12.0394 3.84807 12.2521 3.84383 12.4795 3.77386C12.6993 3.70623 12.9319 3.63713 13.1632 3.63713C13.5192 3.63713 13.9089 3.59155 14.2798 3.59155\",\n    stroke: \"#CCE3F2\",\n    strokeLinecap: \"round\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.79248 2.74207V13.8225\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.873 3.04419V13.7217\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartParallel);\nexport default __webpack_public_path__ + \"static/media/chart-parallel.da7dedf539b2af4b654d377c679173e4.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _circle, _ellipse, _circle2, _circle3, _ellipse2, _ellipse3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChartScatter(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 16,\n    viewBox: \"0 0 18 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 0.813599V15.1865H17\",\n    stroke: \"#A3AEB8\",\n    strokeLinecap: \"round\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 3.98301,\n    cy: 12.4746,\n    r: 1.35593,\n    fill: \"#338ECC\"\n  })), _ellipse || (_ellipse = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 9.40684,\n    cy: 10.8475,\n    rx: 1.35593,\n    ry: 1.35593,\n    fill: \"#338ECC\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 5.6102,\n    cy: 8.1356,\n    r: 1.35593,\n    fill: \"#338ECC\",\n    fillOpacity: 0.25\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 9.40684,\n    cy: 6.50852,\n    r: 1.35593,\n    fill: \"#338ECC\"\n  })), _ellipse2 || (_ellipse2 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 13.7457,\n    cy: 5.96616,\n    rx: 1.35593,\n    ry: 1.35593,\n    fill: \"#338ECC\",\n    fillOpacity: 0.25\n  })), _ellipse3 || (_ellipse3 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 16.4576,\n    cy: 2.46128,\n    rx: 1.35593,\n    ry: 1.35593,\n    fill: \"#338ECC\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChartScatter);\nexport default __webpack_public_path__ + \"static/media/chart-scatter.69118d0023a6ff3973f7fa913834ac47.svg\";\nexport { ForwardRef as ReactComponent };","import { Button, DropdownMenu, PlusIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\n\nimport { ReactComponent as ChartBarIcon } from '../../../common/static/chart-bar.svg';\nimport { ReactComponent as ChartContourIcon } from '../../../common/static/chart-contour.svg';\nimport { ReactComponent as ChartLineIcon } from '../../../common/static/chart-line.svg';\nimport { ReactComponent as ChartParallelIcon } from '../../../common/static/chart-parallel.svg';\nimport { ReactComponent as ChartScatterIcon } from '../../../common/static/chart-scatter.svg';\nimport { RunsCompareChartType } from './runs-compare.types';\n\nexport interface RunsCompareAddChartMenuProps {\n  onAddChart: (type: RunsCompareChartType) => void;\n}\n\nexport const RunsCompareAddChartMenu = ({ onAddChart }: RunsCompareAddChartMenuProps) => {\n  return (\n    <DropdownMenu.Root modal={false}>\n      <DropdownMenu.Trigger asChild>\n        <Button\n          css={styles.addChartButton}\n          icon={<PlusIcon />}\n          data-testid='experiment-view-compare-runs-add-chart'\n        >\n          Add chart\n        </Button>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content align='end'>\n        <DropdownMenu.Item\n          onClick={() => onAddChart(RunsCompareChartType.BAR)}\n          data-testid='experiment-view-compare-runs-chart-type-bar'\n        >\n          <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n            <ChartBarIcon />\n          </DropdownMenu.IconWrapper>\n          Bar chart\n        </DropdownMenu.Item>\n        <DropdownMenu.Item\n          onClick={() => onAddChart(RunsCompareChartType.LINE)}\n          data-testid='experiment-view-compare-runs-chart-type-line'\n        >\n          <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n            <ChartLineIcon />\n          </DropdownMenu.IconWrapper>\n          Line chart\n        </DropdownMenu.Item>\n        <DropdownMenu.Item\n          onClick={() => onAddChart(RunsCompareChartType.PARALLEL)}\n          data-testid='experiment-view-compare-runs-chart-type-parallel'\n        >\n          <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n            <ChartParallelIcon />\n          </DropdownMenu.IconWrapper>\n          Parallel coordinates\n        </DropdownMenu.Item>\n        <DropdownMenu.Item\n          onClick={() => onAddChart(RunsCompareChartType.SCATTER)}\n          data-testid='experiment-view-compare-runs-chart-type-scatter'\n        >\n          <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n            <ChartScatterIcon />\n          </DropdownMenu.IconWrapper>\n          Scatter chart\n        </DropdownMenu.Item>\n        <DropdownMenu.Item\n          onClick={() => onAddChart(RunsCompareChartType.CONTOUR)}\n          data-testid='experiment-view-compare-runs-chart-type-contour'\n        >\n          <DropdownMenu.IconWrapper css={styles.iconWrapper}>\n            <ChartContourIcon />\n          </DropdownMenu.IconWrapper>\n          Contour chart\n        </DropdownMenu.Item>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n\nconst styles = {\n  addChartButton: (theme: Theme) => ({\n    // Overriden while waiting for design decision in DuBois (FEINF-1711)\n    backgroundColor: `${theme.colors.backgroundPrimary} !important`,\n  }),\n  iconWrapper: (theme: Theme) => ({\n    width: theme.general.iconSize + theme.spacing.xs,\n  }),\n};\n","import type { PlotMouseEvent } from 'plotly.js';\nimport { useEffect, useRef } from 'react';\n\n/**\n * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n * so in order to achieve updated behavior we need to wrap each onHover callback with an\n * immutable callback that will call mutable implementation.\n */\nexport const useMutableHoverCallback = <T extends (event: Readonly<PlotMouseEvent>) => void>(\n  callback: T,\n) => {\n  const mutableRef = useRef<T>(callback);\n\n  useEffect(() => {\n    mutableRef.current = callback;\n  }, [callback]);\n\n  return (event: Readonly<PlotMouseEvent>) => {\n    mutableRef.current(event);\n  };\n};\n","import { useEffect, useMemo, useState } from 'react';\nimport { CompareChartRunData } from '../charts/CompareRunsCharts.common';\n\n/**\n * Function used to highlight particular trace in the compare runs chart,\n * for both hover and select scenarios.\n * Since implementation varies across chart types, the function is curryable where\n * two first-level parameters determine the target SVG selector paths to the trace within\n * target chart type.\n *\n * @param traceSelector selector path to the trace for a particular chart type\n * @param parentSelector selector path to the traces container for a particular chart type\n */\nconst highlightChartTracesFn =\n  (traceSelector: string, parentSelector: string) =>\n  /**\n   * @param parent a HTML element containing the chart\n   * @param hoverIndex index of a trace that should be hover-higlighted, set -1 to remove highlight\n   * @param selectIndex index of a trace that should be select-higlighted, set -1 to remove highlight\n   */\n  (parent: HTMLElement, hoverIndex: number, selectIndex: number) => {\n    const deselected = hoverIndex === -1 && selectIndex === -1;\n\n    parent.querySelector('.is-hover-highlight')?.classList.remove('is-hover-highlight');\n    if (hoverIndex > -1) {\n      parent.querySelectorAll(traceSelector)[hoverIndex]?.classList.add('is-hover-highlight');\n    }\n\n    parent.querySelector('.is-selection-highlight')?.classList.remove('is-selection-highlight');\n    if (selectIndex > -1) {\n      parent.querySelectorAll(traceSelector)[selectIndex]?.classList.add('is-selection-highlight');\n    }\n\n    if (deselected) {\n      parent.querySelector(parentSelector)?.classList.remove('is-highlight');\n    } else {\n      parent.querySelector(parentSelector)?.classList.add('is-highlight');\n    }\n  };\n\n/**\n * Type-specific implementation of highlightChartTracesFn for bar charts\n */\nexport const highlightBarTraces = highlightChartTracesFn('svg .trace.bars g.point', '.trace.bars');\n\n/**\n * Type-specific implementation of highlightChartTracesFn for line charts\n */\nexport const highlightLineTraces = highlightChartTracesFn(\n  'svg .scatterlayer g.trace',\n  '.scatterlayer',\n);\n\n/**\n * Type-specific implementation of highlightChartTracesFn for scatter and contour charts\n */\nexport const highlightScatterTraces = highlightChartTracesFn(\n  'svg .scatterlayer path.point',\n  '.trace.scatter',\n);\n\n/**\n * This hook houses and exports various mechanisms necessary for highlighting traces\n * in compare runs charts.\n *\n * @param containerDiv HTML element containing the chart\n * @param selectedRunUuid currently selected run UUID (set to -1 if none)\n * @param runsData array containing run informations, should be the same order as provided to the chart\n * @param highlightFn a styling function that will be called when the trace should be (un)highlighted, please refer to `highlightCallbackFn()`\n */\nexport const useCompareRunsTraceHighlight = (\n  containerDiv: HTMLElement | null,\n  selectedRunUuid: string | null | undefined,\n  runsData: Pick<CompareChartRunData, 'runInfo'>[],\n  highlightFn: ReturnType<typeof highlightChartTracesFn>,\n) => {\n  const selectedTraceIndex = useMemo(() => {\n    if (!containerDiv) {\n      return -1;\n    }\n    return runsData.findIndex((x) => x.runInfo.run_uuid === selectedRunUuid);\n  }, [runsData, containerDiv, selectedRunUuid]);\n\n  const [hoveredPointIndex, setHoveredPointIndex] = useState(-1);\n\n  useEffect(() => {\n    if (!containerDiv) {\n      return;\n    }\n    highlightFn(containerDiv, hoveredPointIndex, selectedTraceIndex);\n  }, [highlightFn, containerDiv, selectedTraceIndex, hoveredPointIndex]);\n\n  return { selectedTraceIndex, hoveredPointIndex, setHoveredPointIndex };\n};\n","import { Config, Data, Layout } from 'plotly.js';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { LazyPlot } from '../../LazyPlot';\nimport { useMutableHoverCallback } from '../hooks/useMutableHoverCallback';\nimport {\n  highlightBarTraces,\n  useCompareRunsTraceHighlight,\n} from '../hooks/useCompareRunsTraceHighlight';\nimport {\n  commonRunsChartStyles,\n  CompareChartRunData,\n  compareRunsChartDefaultMargin,\n  compareRunsChartHoverlabel,\n  CompareRunsCommonPlotProps,\n  normalizeChartValue,\n  useDynamicPlotSize,\n} from './CompareRunsCharts.common';\n\n// We're not using params in bar plot\nexport type CompareChartBarPlotRunData = Omit<CompareChartRunData, 'params'>;\n\nexport interface CompareRunsMetricsBarPlotProps extends CompareRunsCommonPlotProps {\n  /**\n   * Determines which metric are we comparing by\n   */\n  metricKey: string;\n\n  /**\n   * Array of runs data with corresponding values\n   */\n  runsData: CompareChartBarPlotRunData[];\n\n  /**\n   * Relative width of the plot bar\n   */\n  barWidth?: number;\n\n  /**\n   * Display run names on the Y axis\n   */\n  displayRunNames?: boolean;\n\n  /**\n   * Display metric key on the X axis\n   */\n  displayMetricKey?: boolean;\n}\n\nconst PLOT_CONFIG: Partial<Config> = {\n  displaylogo: false,\n  scrollZoom: true,\n  doubleClick: 'autosize',\n  showTips: false,\n};\n\nexport const Y_AXIS_PARAMS = {\n  ticklabelposition: 'inside',\n  tickfont: { size: 11 },\n  fixedrange: true,\n};\n\nconst getFixedPointValue = (val: string | number, places = 2) =>\n  typeof val === 'number' ? val.toFixed(places) : val;\n\n/**\n * Implementation of plotly.js chart displaying\n * bar plot comparing metrics for a given\n * set of experiments runs\n */\nexport const CompareRunsMetricsBarPlot = React.memo(\n  ({\n    runsData,\n    metricKey,\n    className,\n    margin = compareRunsChartDefaultMargin,\n    onUpdate,\n    onHover,\n    onUnhover,\n    barWidth = 1 / 2,\n    width,\n    height,\n    displayRunNames = true,\n    useDefaultHoverBox = true,\n    displayMetricKey = true,\n    selectedRunUuid,\n  }: CompareRunsMetricsBarPlotProps) => {\n    const plotData = useMemo(() => {\n      // Run uuids\n      const ids = runsData.map((d) => d.runInfo.run_uuid);\n\n      // Actual metric values\n      const values = runsData.map((d) => normalizeChartValue(d.metrics[metricKey]?.value));\n\n      // Displayed metric values\n      const textValues = runsData.map((d) => getFixedPointValue(d.metrics[metricKey]?.value));\n\n      // Colors corresponding to each run\n      const colors = runsData.map((d) => d.color);\n\n      // Check if containing negatives to adjust rendering labels relative to axis\n      const containsNegatives = values.some((v) => v && v < 0);\n\n      return [\n        {\n          y: ids,\n          x: values,\n          text: textValues,\n          textposition: containsNegatives ? 'auto' : 'outside',\n          textfont: {\n            size: 11,\n          },\n          // Display run name on hover. \"<extra></extra>\" removes plotly's \"extra\" tooltip that\n          // is unnecessary here.\n          type: 'bar' as any,\n          hovertemplate: useDefaultHoverBox ? '%{label}<extra></extra>' : undefined,\n          hoverinfo: useDefaultHoverBox ? 'y' : 'none',\n          hoverlabel: useDefaultHoverBox ? compareRunsChartHoverlabel : undefined,\n          width: barWidth,\n          orientation: 'h',\n          marker: {\n            color: colors,\n          },\n        } as Data,\n      ];\n    }, [runsData, metricKey, barWidth, useDefaultHoverBox]);\n\n    const { layoutHeight, layoutWidth, setContainerDiv, containerDiv, isDynamicSizeSupported } =\n      useDynamicPlotSize();\n\n    const { formatMessage } = useIntl();\n\n    const [layout, setLayout] = useState<Partial<Layout>>({\n      width: width || layoutWidth,\n      height: height || layoutHeight,\n      margin,\n      xaxis: { title: displayMetricKey ? metricKey : undefined },\n      yaxis: {\n        showticklabels: displayRunNames,\n        title: displayRunNames\n          ? formatMessage({\n              defaultMessage: 'Run name',\n              description: 'Label for Y axis in bar chart when comparing metrics between runs',\n            })\n          : undefined,\n        tickfont: { size: 11 },\n        fixedrange: true,\n      },\n    });\n\n    useEffect(() => {\n      setLayout((current) => ({\n        ...current,\n        width: width || layoutWidth,\n        height: height || layoutHeight,\n        margin,\n        xaxis: {\n          ...current.xaxis,\n          title: displayMetricKey ? metricKey : undefined,\n        },\n      }));\n    }, [layoutWidth, layoutHeight, margin, metricKey, width, height, displayMetricKey]);\n\n    const { setHoveredPointIndex } = useCompareRunsTraceHighlight(\n      containerDiv,\n      selectedRunUuid,\n      runsData,\n      highlightBarTraces,\n    );\n\n    const hoverCallback = useCallback(\n      ({ points, event }) => {\n        setHoveredPointIndex(points[0]?.pointIndex ?? -1);\n\n        const runUuid = points[0]?.label;\n        if (runUuid) {\n          onHover?.(runUuid, event);\n        }\n      },\n      [onHover, setHoveredPointIndex],\n    );\n\n    const unhoverCallback = useCallback(() => {\n      onUnhover?.();\n      setHoveredPointIndex(-1);\n    }, [onUnhover, setHoveredPointIndex]);\n\n    /**\n     * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n     * so in order to achieve updated behavior we need to wrap its most recent implementation\n     * in the immutable callback.\n     */\n    const mutableHoverCallback = useMutableHoverCallback(hoverCallback);\n\n    return (\n      <div\n        css={[commonRunsChartStyles.chartWrapper, styles.highlightStyles]}\n        className={className}\n        ref={setContainerDiv}\n      >\n        <LazyPlot\n          data={plotData}\n          useResizeHandler={!isDynamicSizeSupported}\n          css={commonRunsChartStyles.chart}\n          onUpdate={onUpdate}\n          layout={layout}\n          config={PLOT_CONFIG}\n          onHover={mutableHoverCallback}\n          onUnhover={unhoverCallback}\n        />\n      </div>\n    );\n  },\n);\n\nconst styles = {\n  highlightStyles: {\n    '.trace.bars g.point path': {\n      transition: 'var(--trace-transition)',\n    },\n    '.trace.bars.is-highlight g.point path': {\n      opacity: 'var(--trace-opacity-dimmed-high) !important',\n    },\n    '.trace.bars g.point.is-hover-highlight path': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n    },\n    '.trace.bars g.point.is-selection-highlight path': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n      stroke: 'var(--trace-stroke-color)',\n      strokeWidth: 'var(--trace-stroke-width) !important',\n    },\n  },\n};\n","import { Interpolation, Theme } from '@emotion/react';\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nexport interface CompareRunsTooltipBodyProps<TContext = any, THover = any> {\n  runUuid: string;\n  additionalAxisData?: any;\n  hoverData: THover;\n  contextData: TContext;\n  closeContextMenu: () => void;\n  isHovering?: boolean;\n}\n\nexport type CompareRunsTooltipBodyComponent<C = any, T = any> = React.ComponentType<\n  CompareRunsTooltipBodyProps<C, T>\n>;\n\nconst CompareRunsTooltipContext = React.createContext<{\n  selectedRunUuid: string | null;\n  closeContextMenu: () => void;\n  resetTooltip: () => void;\n  updateTooltip: (\n    runUuid: string,\n    hoverData?: any,\n    event?: MouseEvent,\n    additionalData?: any,\n  ) => void;\n} | null>(null);\n\nexport enum ContextMenuVisibility {\n  HIDDEN,\n  HOVER,\n  VISIBLE,\n}\n\n/**\n * Extract first ancestor HTML element in the hierarchy, even if the target is an SVG element.\n * Necessary for proper behavior of '.contains()'\n */\nconst extractHTMLAncestorElement = (element: Element | EventTarget | null) => {\n  if (element === null || !(element instanceof Element)) {\n    return null;\n  }\n  if (element instanceof HTMLElement) {\n    return element;\n  }\n\n  let currentElement: Element | null = element;\n  while (currentElement && !(currentElement instanceof HTMLElement)) {\n    currentElement = currentElement.parentElement;\n  }\n\n  return currentElement;\n};\n\n/**\n * Context and DOM container necessary for chart context menu to work.\n * Can wrap multiple charts.\n */\nexport const CompareRunsTooltipWrapper = <\n  // Type for the context data passed to the tooltip, e.g. list of all runs\n  TContext = any,\n  // Type for local hover data passed to the tooltip, e.g. configuration of particular chart\n  THover = any,\n>({\n  className,\n  children,\n  contextData,\n  component: Component,\n  hoverOnly = false,\n}: React.PropsWithChildren<{\n  className?: string;\n  contextData: TContext;\n  component: React.ComponentType<CompareRunsTooltipBodyProps<TContext, THover>>;\n  hoverOnly?: boolean;\n}>) => {\n  // A reference to the viewport-wide element containing the context menu\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // A reference to the tooltip/context-menu element\n  const ctxMenuRef = useRef<HTMLDivElement>(null);\n\n  // Mutable value containing current mouse position\n  const currentPos = useRef<{ x: number; y: number }>({ x: 0, y: 0 });\n\n  // Current visibility of the tooltip/context-menu\n  const [contextMenuShown, setContextMenuShown] = useState<ContextMenuVisibility>(\n    ContextMenuVisibility.HIDDEN,\n  );\n\n  const [tooltipDisplayParams, setTooltipDisplayParams] = useState<any | null>(null);\n  const [hoveredRunUuid, setHoveredRunUuid] = useState<string>('');\n\n  // Apart from run uuid, It's also possible to set bonus axis data (helpful for line charts with data lineage)\n  const [additionalAxisData, setAdditionalAxisData] = useState<any>(null);\n\n  // Stores data about the run that has been clicked, but mouse has not been released.\n  const focusedRunData = useRef<{ x: number; y: number; runUuid: string } | null>(null);\n\n  // Mutable version of certain state values, used in processes outside the React event lifecycle\n  const mutableContextMenuShownRef = useRef<ContextMenuVisibility>(contextMenuShown);\n  const mutableHoveredRunUuid = useRef(hoveredRunUuid);\n  const mutableTooltipDisplayParams = useRef(tooltipDisplayParams);\n\n  // This method applies the tooltip position basing on the mouse position\n  const applyPositioning = useCallback(() => {\n    if (!ctxMenuRef.current || !containerRef.current) {\n      return;\n    }\n\n    let targetX = currentPos.current.x;\n    let targetY = currentPos.current.y;\n\n    const menuRect = ctxMenuRef.current.getBoundingClientRect();\n    const containerRect = containerRef.current.getBoundingClientRect();\n\n    if (currentPos.current.x + menuRect.width >= containerRect.width) {\n      targetX -= menuRect.width;\n    }\n\n    if (currentPos.current.y + menuRect.height >= containerRect.height) {\n      targetY -= menuRect.height;\n    }\n    ctxMenuRef.current.style.left = '0px';\n    ctxMenuRef.current.style.top = '0px';\n    ctxMenuRef.current.style.transform = `translate3d(${targetX + 1}px, ${targetY + 1}px, 0)`;\n  }, []);\n\n  // Save mutable visibility each time a stateful one changes\n  useEffect(() => {\n    mutableContextMenuShownRef.current = contextMenuShown;\n  }, [contextMenuShown]);\n\n  // This function returns X and Y of the target element relative to the container\n  const getCoordinatesForTargetElement = useCallback(\n    (targetElement: HTMLElement, event: MouseEvent) => {\n      const targetRect = targetElement.getBoundingClientRect();\n      const containerRect = containerRef.current?.getBoundingClientRect() || { left: 0, top: 0 };\n      const x = event.offsetX + (targetRect.left - containerRect.left);\n      const y = event.offsetY + (targetRect.top - containerRect.top);\n      return { x, y };\n    },\n    [],\n  );\n\n  const mouseMove: React.MouseEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      // Apply only if the tooltip is in the hover mode\n      if (\n        mutableContextMenuShownRef.current === ContextMenuVisibility.HOVER &&\n        ctxMenuRef.current &&\n        containerRef.current\n      ) {\n        focusedRunData.current = null;\n        const targetElement = extractHTMLAncestorElement(event.target);\n        if (targetElement) {\n          currentPos.current = getCoordinatesForTargetElement(targetElement, event.nativeEvent);\n          applyPositioning();\n        }\n      }\n    },\n    [applyPositioning, getCoordinatesForTargetElement],\n  );\n\n  // This callback is being fired on every new run being hovered\n  const updateTooltip = useCallback(\n    (runUuid: string, hoverData?: any, _?: Event, additionalRunData?: any) => {\n      mutableHoveredRunUuid.current = runUuid;\n      mutableTooltipDisplayParams.current = hoverData;\n\n      // If the tooltip is visible and hardwired to the position, don't change it\n      if (mutableContextMenuShownRef.current === ContextMenuVisibility.VISIBLE) {\n        return;\n      }\n\n      // Update the event-specific data in the state\n      setTooltipDisplayParams(hoverData);\n\n      // If the mouse button has been clicked on a run but hover\n      // has been lost, do nothing\n      if (!runUuid && focusedRunData.current?.runUuid) {\n        return;\n      }\n\n      // Update the currently hovered run\n      setHoveredRunUuid((currentRunUuid) => {\n        if (additionalRunData) {\n          setAdditionalAxisData(additionalRunData);\n        }\n        // If the tooltip was hidden or it's shown but it's another run,\n        // make sure that the state is updated\n        if (\n          mutableContextMenuShownRef.current === ContextMenuVisibility.HIDDEN ||\n          (mutableContextMenuShownRef.current === ContextMenuVisibility.HOVER &&\n            runUuid !== currentRunUuid)\n        ) {\n          setContextMenuShown(ContextMenuVisibility.HOVER);\n          return runUuid;\n        }\n        return currentRunUuid;\n      });\n    },\n    [],\n  );\n\n  const mouseDownCapture: React.MouseEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (hoverOnly) {\n        return;\n      }\n      // Saves the current position and hovered run ID after lowering the mouse button,\n      // we use it afterwards to confirm that user has clicked on the same run and scrubbing/zooming\n      // didn't occur in the meanwhile\n      if (event.button === 0 && mutableHoveredRunUuid.current) {\n        focusedRunData.current = {\n          x: event.nativeEvent.pageX,\n          y: event.nativeEvent.pageY,\n          runUuid: mutableHoveredRunUuid.current,\n        };\n      }\n    },\n    [hoverOnly],\n  );\n\n  // Callback for the click event for the tooltip area, checks if context menu needs to be shown.\n  // We're not using `mouseup` because plotly.js hijacks the event by appending drag cover to the document on `mousedown`.\n  const tooltipAreaClicked: React.MouseEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      // We're interested in displaying the context menu only if\n      // mouse is in the same position as when lowering the button,\n      // this way we won't display it when zooming on the chart.\n      if (\n        focusedRunData.current?.runUuid &&\n        event.nativeEvent.pageX === focusedRunData.current.x &&\n        event.nativeEvent.pageY === focusedRunData.current.y\n      ) {\n        // If the context menu is already visible, we need to reposition it and provide\n        // the updated run UUID\n        if (mutableContextMenuShownRef.current === ContextMenuVisibility.VISIBLE) {\n          setHoveredRunUuid(focusedRunData.current.runUuid);\n          const targetElement = extractHTMLAncestorElement(event.nativeEvent.target);\n          if (targetElement) {\n            currentPos.current = getCoordinatesForTargetElement(targetElement, event.nativeEvent);\n            applyPositioning();\n          }\n        } else {\n          // If the context menu was not visible before (it was a tooltip), just enable it.\n          setContextMenuShown(ContextMenuVisibility.VISIBLE);\n        }\n        event.stopPropagation();\n      }\n      // Since the mouse button is up, reset the currently focused run\n      focusedRunData.current = null;\n    },\n    [applyPositioning, getCoordinatesForTargetElement],\n  );\n\n  // Exposed function used to hide the context menu\n  const closeContextMenu = useCallback(() => setContextMenuShown(ContextMenuVisibility.HIDDEN), []);\n\n  // Set up main listeners in the useLayoutEffect hook\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return undefined;\n    }\n\n    // Find the DOM root - it can be either document or a shadow root\n    const domRoot = containerRef.current.getRootNode() as Document;\n\n    // This function is being called on every click in the document,\n    // it's used to dismiss the shown context menu\n    const rootClickListener = (e: MouseEvent) => {\n      // We're interested only in dismissing context menu mode, tooltip is fine\n      if (mutableContextMenuShownRef.current !== ContextMenuVisibility.VISIBLE) {\n        return;\n      }\n\n      const targetElement = extractHTMLAncestorElement(e.target);\n\n      if (!targetElement) {\n        return;\n      }\n\n      // Check if the click event occurred within the\n      // context menu\n      const contextMenuClicked =\n        targetElement instanceof HTMLElement &&\n        ctxMenuRef?.current instanceof HTMLElement &&\n        ctxMenuRef.current.contains(targetElement);\n\n      // Dismiss the context menu only if click didn't occur on\n      // the context menu content or on another run\n      if (!contextMenuClicked && !focusedRunData.current?.runUuid) {\n        setContextMenuShown(ContextMenuVisibility.HIDDEN);\n      }\n    };\n    domRoot.addEventListener('click', rootClickListener, { capture: true });\n\n    return () => {\n      domRoot.removeEventListener('click', rootClickListener, { capture: true });\n    };\n  }, [getCoordinatesForTargetElement, applyPositioning]);\n\n  // Callback used to reset the tooltip, fired when the mouse leaves the run\n  const resetTooltip = useCallback(() => {\n    mutableHoveredRunUuid.current = '';\n    if (\n      focusedRunData.current?.runUuid ||\n      mutableContextMenuShownRef.current === ContextMenuVisibility.VISIBLE\n    ) {\n      return;\n    }\n    setHoveredRunUuid('');\n    setContextMenuShown(ContextMenuVisibility.HIDDEN);\n  }, []);\n\n  // Export the currently selected run ID. Set to \"null\" if there is nothing selected.\n  const selectedRunUuid = useMemo(() => {\n    if (contextMenuShown !== ContextMenuVisibility.VISIBLE) {\n      return null;\n    }\n    return hoveredRunUuid;\n  }, [contextMenuShown, hoveredRunUuid]);\n\n  const contextValue = useMemo(\n    () => ({ updateTooltip, resetTooltip, selectedRunUuid, closeContextMenu }),\n    [updateTooltip, resetTooltip, selectedRunUuid, closeContextMenu],\n  );\n\n  return (\n    <CompareRunsTooltipContext.Provider value={contextValue}>\n      {/* The element below wraps all the children (where charts are expected to be mounted)\n      and tracks mouse movement inside */}\n      <div\n        onMouseMove={mouseMove}\n        onMouseDownCapture={mouseDownCapture}\n        onClickCapture={tooltipAreaClicked}\n      >\n        {children}\n      </div>\n      {/* The element below houses the tooltip/context menu */}\n      <div css={styles.contextMenuContainer} className={className} ref={containerRef}>\n        {contextMenuShown !== ContextMenuVisibility.HIDDEN && hoveredRunUuid && (\n          <div\n            ref={ctxMenuRef}\n            css={styles.contextMenuWrapper}\n            data-testid='tooltip-container'\n            style={{\n              userSelect: contextMenuShown === ContextMenuVisibility.HOVER ? 'none' : 'unset',\n              pointerEvents: contextMenuShown === ContextMenuVisibility.HOVER ? 'none' : 'all',\n            }}\n          >\n            {/* A tooltip body component passed from the props */}\n            <Component\n              runUuid={hoveredRunUuid}\n              additionalAxisData={additionalAxisData}\n              hoverData={tooltipDisplayParams}\n              contextData={contextData}\n              isHovering={contextMenuShown === ContextMenuVisibility.HOVER}\n              closeContextMenu={closeContextMenu}\n            />\n          </div>\n        )}\n      </div>\n    </CompareRunsTooltipContext.Provider>\n  );\n};\n\n/**\n * This hook is used to wire up tooltip to particular compare runs chart.\n * Returns \"setTooltip\" and \"resetTooltip\" functions that should be called\n * upon chart's \"onHover\" and \"onUnhover\" events. \"setTooltip\" function consumes\n * the runUuid that was hovered on.\n */\nexport const useCompareRunsTooltip = <\n  // Type for local hover data passed to the tooltip, e.g. configuration of particular chart\n  THover = any,\n  TAxisData = any,\n>(\n  hoverData?: THover,\n) => {\n  const contextValue = useContext(CompareRunsTooltipContext);\n\n  if (!contextValue) {\n    throw new Error(\n      'You must invoke useCompareRunsTooltip() in a component being ancestor of <CompareRunsTooltipWrapper />!',\n    );\n  }\n\n  const { updateTooltip, resetTooltip, selectedRunUuid, closeContextMenu } = contextValue;\n\n  const setTooltip = useCallback(\n    (runUuid = '', event?: MouseEvent, additionalAxisData?: TAxisData) => {\n      updateTooltip(runUuid, hoverData, event, additionalAxisData);\n    },\n    [updateTooltip, hoverData],\n  );\n\n  return { setTooltip, resetTooltip, selectedRunUuid, closeContextMenu };\n};\n\nconst styles = {\n  contextMenuContainer: {\n    overflow: 'hidden',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    position: 'fixed',\n    pointerEvents: 'none',\n  } as Interpolation<Theme>,\n  contextMenuWrapper: (theme: Theme) => ({\n    zIndex: 1,\n    position: 'absolute' as const,\n    padding: theme.spacing.sm,\n    backgroundColor: 'white',\n    border: `1px solid ${theme.colors.border}`,\n    left: -999,\n    top: -999,\n  }),\n  overlayElement: (): Interpolation<Theme> => ({\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'transparent',\n    },\n  }),\n};\n","import { Button, DropdownMenu, OverflowIcon, Typography } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { PropsWithChildren } from 'react';\n\nexport interface ChartCardWrapperProps {\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n  onEdit: () => void;\n  onDelete: () => void;\n  fullWidth?: boolean;\n}\n\n/**\n * Wrapper components for all chart cards. Provides styles and adds\n * a dropdown menu with actions for configure and delete.\n */\nexport const RunsCompareChartCardWrapper = ({\n  title,\n  subtitle,\n  onDelete,\n  onEdit,\n  children,\n  fullWidth = false,\n}: PropsWithChildren<ChartCardWrapperProps>) => (\n  <div css={styles.chartEntry(fullWidth)} data-testid='experiment-view-compare-runs-card'>\n    <div css={styles.chartEntryTitle}>\n      <div>\n        <Typography.Title level={4} css={{ marginBottom: 0 }}>\n          {title}\n        </Typography.Title>\n        {subtitle && <span css={styles.subtitle}>{subtitle}</span>}\n      </div>\n      <DropdownMenu.Root modal={false}>\n        <DropdownMenu.Trigger asChild>\n          <Button\n            type='tertiary'\n            icon={<OverflowIcon />}\n            data-testid='experiment-view-compare-runs-card-menu'\n          />\n        </DropdownMenu.Trigger>\n        <DropdownMenu.Content align='end' minWidth={100}>\n          <DropdownMenu.Item onClick={onEdit} data-testid='experiment-view-compare-runs-card-edit'>\n            Configure\n          </DropdownMenu.Item>\n          <DropdownMenu.Item\n            onClick={onDelete}\n            data-testid='experiment-view-compare-runs-card-delete'\n          >\n            Delete\n          </DropdownMenu.Item>\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    </div>\n    {children}\n  </div>\n);\n\nconst styles = {\n  chartEntry:\n    (fullWidth = false) =>\n    (theme: Theme) => ({\n      height: 360,\n      maxWidth: fullWidth ? 'unset' : 800,\n      overflow: 'hidden',\n      display: 'grid',\n      gridTemplateRows: 'auto 1fr',\n      backgroundColor: theme.colors.backgroundPrimary,\n      padding: theme.spacing.md,\n      border: `1px solid ${theme.colors.border}`,\n      borderRadius: theme.general.borderRadiusBase,\n    }),\n  chartComponentWrapper: () => ({\n    overflow: 'hidden',\n  }),\n  chartEntryTitle: () => ({\n    display: 'grid' as const,\n    gridTemplateColumns: '1fr auto',\n    alignItems: 'flex-start',\n  }),\n  subtitle: (theme: Theme) => ({\n    color: theme.colors.textSecondary,\n    fontSize: 11,\n  }),\n};\n","import { useMemo } from 'react';\nimport type { CompareChartRunData } from '../charts/CompareRunsCharts.common';\nimport { CompareRunsMetricsBarPlot } from '../charts/CompareRunsMetricsBarPlot';\nimport { useCompareRunsTooltip } from '../hooks/useCompareRunsTooltip';\nimport type { RunsCompareBarCardConfig } from '../runs-compare.types';\nimport { RunsCompareChartCardWrapper } from './ChartCard.common';\n\nexport interface RunsCompareBarChartCardProps {\n  config: RunsCompareBarCardConfig;\n  chartRunData: CompareChartRunData[];\n\n  onDelete: () => void;\n  onEdit: () => void;\n}\n\nexport const barChartCardDefaultMargin = {\n  t: 24,\n  b: 48,\n  r: 0,\n  l: 4,\n  pad: 0,\n};\n\nexport const RunsCompareBarChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n}: RunsCompareBarChartCardProps) => {\n  const slicedRuns = useMemo(\n    () => chartRunData.slice(0, config.runsCountToCompare || 10).reverse(),\n    [chartRunData, config],\n  );\n  const { setTooltip, resetTooltip, selectedRunUuid } = useCompareRunsTooltip(config);\n\n  return (\n    <RunsCompareChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={config.metricKey}\n      // TODO: add i18n after making decision on the final wording\n      subtitle={<>Comparing first {slicedRuns.length} runs</>}\n    >\n      <div css={styles.barChartCardWrapper}>\n        <CompareRunsMetricsBarPlot\n          runsData={slicedRuns}\n          metricKey={config.metricKey}\n          displayRunNames={false}\n          displayMetricKey={false}\n          useDefaultHoverBox={false}\n          margin={barChartCardDefaultMargin}\n          onHover={setTooltip}\n          onUnhover={resetTooltip}\n          selectedRunUuid={selectedRunUuid}\n        />\n      </div>\n    </RunsCompareChartCardWrapper>\n  );\n};\n\nconst styles = {\n  barChartCardWrapper: {\n    overflow: 'hidden',\n  },\n};\n","var _path, _path2, _g, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgParallelChartPlaceholder(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 80,\n    height: 42,\n    viewBox: \"0 0 80 42\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.28418 2.34094L39.4998 17.0908L76.3746 7.87216\",\n    stroke: \"#CF797B\",\n    strokeLinecap: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.95459 20.443L40.1702 25.1361L77.045 21.1134M1.95459 36.5338L40.1702 35.1929L77.045 25.1361\",\n    stroke: \"#A88E6F\",\n    strokeLinecap: \"round\"\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.8\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.28418 1V40.3341\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.6189 2.07251V39.9763\",\n    stroke: \"#338ECC\",\n    strokeLinecap: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M77.7156 2.07251V39.9763\",\n    stroke: \"url(#paint0_linear_2781_406689)\",\n    strokeWidth: 4,\n    strokeLinecap: \"square\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear_2781_406689\",\n    x1: 78.2156,\n    y1: 2.07251,\n    x2: 78.2156,\n    y2: 39.9763,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#D04F5E\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#4D9734\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgParallelChartPlaceholder);\nexport default __webpack_public_path__ + \"static/media/parallel-chart-placeholder.234ef0c5b220ef2a5a6fa5bafff173f7.svg\";\nexport { ForwardRef as ReactComponent };","import { Skeleton } from '@databricks/design-system';\nimport React, { Suspense } from 'react';\nimport { CompareChartRunData } from './CompareRunsCharts.common';\n\nconst ParallelCoordinatesPlot = React.lazy(() => import('./ParallelCoordinatesPlot'));\n\nconst LazyParallelCoordinatesPlot = (props: any) => {\n  return (\n    <Suspense fallback={<Skeleton />}>\n      <ParallelCoordinatesPlot {...props}></ParallelCoordinatesPlot>\n    </Suspense>\n  );\n};\n\n// Map all metrics, params and run uuid\n// Filter data to only keep the selected params and metrics from each run\nexport function processData(\n  chartRunData: CompareChartRunData[],\n  selectedParams: string[],\n  selectedMetrics: string[],\n) {\n  return chartRunData.map((run) => {\n    const result: Record<string, string | number | null> = {\n      uuid: run.runInfo.run_uuid,\n    };\n    function computeSelectedAttrs(attrs: string[], runvalue: Record<string, any>) {\n      if (Array.isArray(attrs)) {\n        for (const attr of attrs) {\n          if (attr in runvalue) {\n            result[attr] = runvalue[attr].value;\n          } else {\n            result[attr] = null;\n          }\n        }\n      }\n    }\n    computeSelectedAttrs(selectedParams, run.params);\n    computeSelectedAttrs(selectedMetrics, run.metrics);\n    return result;\n  });\n}\nexport default LazyParallelCoordinatesPlot;\n","import { Button, Typography } from '@databricks/design-system';\nimport { useMemo } from 'react';\nimport { ReactComponent as ParallelChartSvg } from '../../../../common/static/parallel-chart-placeholder.svg';\nimport type { CompareChartRunData } from '../charts/CompareRunsCharts.common';\nimport LazyParallelCoordinatesPlot, { processData } from '../charts/LazyParallelCoordinatesPlot';\nimport { useCompareRunsTooltip } from '../hooks/useCompareRunsTooltip';\nimport type { RunsCompareParallelCardConfig } from '../runs-compare.types';\nimport { RunsCompareChartCardWrapper } from './ChartCard.common';\n\nexport interface RunsCompareParallelChartCardProps {\n  config: RunsCompareParallelCardConfig;\n  chartRunData: CompareChartRunData[];\n\n  onDelete: () => void;\n  onEdit: () => void;\n}\n\n/**\n * A placeholder component displayed before parallel coords chart is being configured by user\n */\nconst EmptyParallelCoordsPlaceholder = ({ onEdit }: { onEdit: () => void }) => {\n  return (\n    <div css={{ display: 'flex', flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <div css={{ display: 'flex', flexDirection: 'column', alignItems: 'center', maxWidth: 360 }}>\n        <ParallelChartSvg />\n        <Typography.Title css={{ marginTop: 16 }} color='secondary' level={3}>\n          Compare parameter importance\n        </Typography.Title>\n        <Typography.Text css={{ marginBottom: 16 }} color='secondary'>\n          Use the parallel coordinates chart to compare how various parameters in model affect your\n          model metrics.\n        </Typography.Text>\n        <Button type='primary' onClick={onEdit}>\n          Configure chart\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport const RunsCompareParallelChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n}: RunsCompareParallelChartCardProps) => {\n  const [isConfigured, parallelCoordsData] = useMemo(() => {\n    const selectedParamsCount = config.selectedParams?.length || 0;\n    const selectedMetricsCount = config.selectedMetrics?.length || 0;\n\n    const configured = selectedParamsCount + selectedMetricsCount >= 2;\n\n    // Prepare the data in the parcoord-es format\n    const data = configured\n      ? processData(chartRunData, config.selectedParams, config.selectedMetrics)\n      : [];\n\n    return [configured, data];\n  }, [config, chartRunData]);\n\n  const { setTooltip, resetTooltip, selectedRunUuid, closeContextMenu } =\n    useCompareRunsTooltip(config);\n\n  return (\n    <RunsCompareChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={'Parallel Coordinates'}\n      subtitle={isConfigured ? <>Comparing {chartRunData.length} runs</> : null}\n      fullWidth\n    >\n      {!isConfigured ? (\n        <EmptyParallelCoordsPlaceholder onEdit={onEdit} />\n      ) : parallelCoordsData.length ? (\n        // Avoid displaying empty set, otherwise parcoord-es goes crazy\n        <div css={styles.parallelChartCardWrapper}>\n          <LazyParallelCoordinatesPlot\n            data={parallelCoordsData}\n            selectedParams={config.selectedParams}\n            selectedMetrics={config.selectedMetrics}\n            onHover={setTooltip}\n            onUnhover={resetTooltip}\n            axesRotateThreshold={8}\n            selectedRunUuid={selectedRunUuid}\n            closeContextMenu={closeContextMenu}\n          />\n        </div>\n      ) : null}\n    </RunsCompareChartCardWrapper>\n  );\n};\n\nconst styles = {\n  parallelChartCardWrapper: {\n    // Set \"display: flex\" here (and \"flex: 1\" in the child element)\n    // so the chart will grow in width and height\n    display: 'flex',\n    overflow: 'hidden',\n    cursor: 'pointer',\n  },\n};\n","import { useTheme } from '@emotion/react';\nimport { Data, Datum, Layout, PlotMouseEvent } from 'plotly.js';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { LazyPlot } from '../../LazyPlot';\nimport { useMutableHoverCallback } from '../hooks/useMutableHoverCallback';\nimport {\n  highlightScatterTraces,\n  useCompareRunsTraceHighlight,\n} from '../hooks/useCompareRunsTraceHighlight';\nimport {\n  commonRunsChartStyles,\n  CompareChartRunData,\n  CompareRunsChartAxisDef,\n  compareRunsChartDefaultMargin,\n  compareRunsChartHoverlabel,\n  CompareRunsCommonPlotProps,\n  useDynamicPlotSize,\n} from './CompareRunsCharts.common';\n\nexport interface CompareRunsScatterPlotProps extends CompareRunsCommonPlotProps {\n  /**\n   * Horizontal axis with a metric or a param\n   */\n  xAxis: CompareRunsChartAxisDef;\n\n  /**\n   * Vertical axis with a metric or a param\n   */\n  yAxis: CompareRunsChartAxisDef;\n\n  /**\n   * Array of runs data with corresponding values\n   */\n  runsData: CompareChartRunData[];\n}\n\nconst PLOT_CONFIG = {\n  displaylogo: false,\n  scrollZoom: true,\n};\n\nexport const createTooltipTemplate = () =>\n  '<b>%{customdata[1]}:</b><br>' +\n  '<b>%{xaxis.title.text}:</b> %{x:.2f}<br>' +\n  '<b>%{yaxis.title.text}:</b> %{y:.2f}<br>' +\n  '<extra></extra>';\n\n/**\n * Implementation of plotly.js chart displaying\n * scatter plot comparing values for a given\n * set of experiments runs\n */\nexport const CompareRunsScatterPlot = React.memo(\n  ({\n    runsData,\n    xAxis,\n    yAxis,\n    markerSize = 10,\n    className,\n    margin = compareRunsChartDefaultMargin,\n    onUpdate,\n    onHover,\n    onUnhover,\n    width,\n    height,\n    useDefaultHoverBox = true,\n    selectedRunUuid,\n  }: CompareRunsScatterPlotProps) => {\n    const theme = useTheme();\n\n    const { layoutHeight, layoutWidth, setContainerDiv, containerDiv, isDynamicSizeSupported } =\n      useDynamicPlotSize();\n\n    const plotData = useMemo(() => {\n      // Prepare empty values\n      const xValues: (number | string)[] = [];\n      const yValues: (number | string)[] = [];\n      const colors: (number | string)[] = [];\n      const tooltipData: Datum[] = [];\n\n      // Iterate through all the runs and aggregate selected metrics/params\n      for (const runData of runsData) {\n        const {\n          runInfo: { run_uuid, run_name },\n          metrics,\n          params,\n          color,\n        } = runData;\n        const xAxisData = xAxis.type === 'METRIC' ? metrics : params;\n        const yAxisData = yAxis.type === 'METRIC' ? metrics : params;\n\n        const x = xAxisData?.[xAxis.key]?.value || undefined;\n        const y = yAxisData?.[yAxis.key]?.value || undefined;\n\n        if (x && y) {\n          xValues.push(x);\n          yValues.push(y);\n          colors.push(color || theme.colors.primary);\n          tooltipData.push([run_uuid, run_name || run_uuid] as any);\n        }\n      }\n\n      return [\n        {\n          x: xValues,\n          y: yValues,\n          customdata: tooltipData,\n          hovertemplate: useDefaultHoverBox ? createTooltipTemplate() : undefined,\n          hoverinfo: useDefaultHoverBox ? undefined : 'none',\n          hoverlabel: useDefaultHoverBox ? compareRunsChartHoverlabel : undefined,\n          type: 'scatter',\n          mode: 'markers',\n          marker: {\n            size: markerSize,\n            color: colors,\n          },\n        } as Data,\n      ];\n    }, [runsData, xAxis, yAxis, theme, markerSize, useDefaultHoverBox]);\n\n    const [layout, setLayout] = useState<Partial<Layout>>({\n      width: width || layoutWidth,\n      height: height || layoutHeight,\n      margin,\n      xaxis: { title: xAxis.key },\n      yaxis: { title: yAxis.key },\n    });\n\n    useEffect(() => {\n      setLayout((current) => {\n        const newLayout = {\n          ...current,\n          width: width || layoutWidth,\n          height: height || layoutHeight,\n          margin,\n        };\n\n        if (newLayout.xaxis) {\n          newLayout.xaxis.title = xAxis.key;\n        }\n\n        if (newLayout.yaxis) {\n          newLayout.yaxis.title = yAxis.key;\n        }\n\n        return newLayout;\n      });\n    }, [layoutWidth, layoutHeight, margin, xAxis.key, yAxis.key, width, height]);\n\n    const { setHoveredPointIndex } = useCompareRunsTraceHighlight(\n      containerDiv,\n      selectedRunUuid,\n      runsData,\n      highlightScatterTraces,\n    );\n\n    const hoverCallback = useCallback(\n      ({ points }: PlotMouseEvent) => {\n        // Find the corresponding run UUID by basing on \"customdata\" field set in the trace data.\n        // Plotly TS typings don't support custom fields so we need to cast to \"any\" first\n        const pointCustomDataRunUuid = (points[0] as any)?.customdata?.[0];\n        setHoveredPointIndex(points[0]?.pointIndex ?? -1);\n\n        if (pointCustomDataRunUuid) {\n          onHover?.(pointCustomDataRunUuid);\n        }\n      },\n      [onHover, setHoveredPointIndex],\n    );\n\n    const unhoverCallback = useCallback(() => {\n      onUnhover?.();\n      setHoveredPointIndex(-1);\n    }, [onUnhover, setHoveredPointIndex]);\n\n    /**\n     * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n     * so in order to achieve updated behavior we need to wrap its most recent implementation\n     * in the immutable callback.\n     */\n    const mutableHoverCallback = useMutableHoverCallback(hoverCallback);\n\n    return (\n      <div\n        css={[\n          commonRunsChartStyles.chartWrapper,\n          commonRunsChartStyles.scatterChartHighlightStyles,\n        ]}\n        className={className}\n        ref={setContainerDiv}\n      >\n        <LazyPlot\n          data={plotData}\n          useResizeHandler={!isDynamicSizeSupported}\n          css={commonRunsChartStyles.chart}\n          layout={layout}\n          config={PLOT_CONFIG}\n          onUpdate={onUpdate}\n          onHover={mutableHoverCallback}\n          onUnhover={unhoverCallback}\n        />\n      </div>\n    );\n  },\n);\n","import { useMemo } from 'react';\nimport type { CompareChartRunData } from '../charts/CompareRunsCharts.common';\nimport type { RunsCompareScatterCardConfig } from '../runs-compare.types';\nimport { RunsCompareChartCardWrapper } from './ChartCard.common';\nimport { CompareRunsScatterPlot } from '../charts/CompareRunsScatterPlot';\nimport { useCompareRunsTooltip } from '../hooks/useCompareRunsTooltip';\n\nexport interface RunsCompareScatterChartCardProps {\n  config: RunsCompareScatterCardConfig;\n  chartRunData: CompareChartRunData[];\n\n  onDelete: () => void;\n  onEdit: () => void;\n}\n\nexport const RunsCompareScatterChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n}: RunsCompareScatterChartCardProps) => {\n  const slicedRuns = useMemo(\n    () => chartRunData.slice(0, config.runsCountToCompare || 10).reverse(),\n    [chartRunData, config],\n  );\n\n  const { setTooltip, resetTooltip, selectedRunUuid } = useCompareRunsTooltip(config);\n\n  return (\n    <RunsCompareChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={`${config.xaxis.key} vs. ${config.yaxis.key}`}\n      // TODO: add i18n after making decision on the final wording\n      subtitle={<>Comparing first {slicedRuns.length} runs</>}\n    >\n      <div css={styles.scatterChartCardWrapper}>\n        <CompareRunsScatterPlot\n          runsData={slicedRuns}\n          xAxis={config.xaxis}\n          yAxis={config.yaxis}\n          onHover={setTooltip}\n          onUnhover={resetTooltip}\n          useDefaultHoverBox={false}\n          selectedRunUuid={selectedRunUuid}\n        />\n      </div>\n    </RunsCompareChartCardWrapper>\n  );\n};\n\nconst styles = {\n  scatterChartCardWrapper: {\n    overflow: 'hidden',\n  },\n};\n","import { useTheme } from '@emotion/react';\nimport { Data, Datum, Layout, PlotMouseEvent } from 'plotly.js';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { LazyPlot } from '../../LazyPlot';\nimport { useMutableHoverCallback } from '../hooks/useMutableHoverCallback';\nimport {\n  highlightScatterTraces,\n  useCompareRunsTraceHighlight,\n} from '../hooks/useCompareRunsTraceHighlight';\nimport {\n  commonRunsChartStyles,\n  CompareChartRunData,\n  CompareRunsChartAxisDef,\n  compareRunsChartDefaultContourMargin,\n  compareRunsChartHoverlabel,\n  CompareRunsCommonPlotProps,\n  useDynamicPlotSize,\n} from './CompareRunsCharts.common';\n\nexport interface CompareRunsContourPlotProps extends CompareRunsCommonPlotProps {\n  /**\n   * Horizontal axis with a metric or a param\n   */\n  xAxis: CompareRunsChartAxisDef;\n\n  /**\n   * Vertical axis with a metric or a param\n   */\n  yAxis: CompareRunsChartAxisDef;\n\n  /**\n   * Depth dimension with a metric or a param\n   */\n  zAxis: CompareRunsChartAxisDef;\n\n  /**\n   * Array of runs data with corresponding values\n   */\n  runsData: CompareChartRunData[];\n\n  /**\n   * Sets the color scale in [[0.35, 'rgb(40,60,190)'],[0.5, 'rgb(70,100,245)'],...] format.\n   * Leave unset to use the defualt scale.\n   */\n  colorScale?: [number, string][];\n\n  /**\n   * Set to `true` in order to reverse the color scale.\n   */\n  reverseScale?: boolean;\n}\n\nconst PLOT_CONFIG = {\n  displaylogo: false,\n  scrollZoom: true,\n};\n\nconst DEFAULT_COLOR_SCALE: [number, string][] = [\n  [0, 'rgb(5,10,172)'],\n  [0.35, 'rgb(40,60,190)'],\n  [0.5, 'rgb(70,100,245)'],\n  [0.6, 'rgb(90,120,245)'],\n  [0.7, 'rgb(106,137,247)'],\n  [1, 'rgb(220,220,220)'],\n];\n\nexport const createTooltipTemplate = (zAxisTitle: string) =>\n  '<b>%{customdata[1]}:</b><br>' +\n  '<b>%{xaxis.title.text}:</b> %{x:.2f}<br>' +\n  '<b>%{yaxis.title.text}:</b> %{y:.2f}<br>' +\n  `<b>${zAxisTitle}:</b> %{customdata[2]:.2f}` +\n  '<extra></extra>';\n\n/**\n * Implementation of plotly.js chart displaying\n * contour plot comparing values for a given\n * set of experiments runs\n */\nexport const CompareRunsContourPlot = React.memo(\n  ({\n    runsData,\n    xAxis,\n    yAxis,\n    zAxis,\n    markerSize = 10,\n    className,\n    reverseScale,\n    margin = compareRunsChartDefaultContourMargin,\n    colorScale = DEFAULT_COLOR_SCALE,\n    onUpdate,\n    onHover,\n    onUnhover,\n    width,\n    height,\n    useDefaultHoverBox = true,\n    selectedRunUuid,\n  }: CompareRunsContourPlotProps) => {\n    const theme = useTheme();\n\n    const { layoutHeight, layoutWidth, setContainerDiv, containerDiv, isDynamicSizeSupported } =\n      useDynamicPlotSize();\n\n    const plotData = useMemo(() => {\n      // Prepare empty values\n      const xValues: (number | string)[] = [];\n      const yValues: (number | string)[] = [];\n      const zValues: (number | string)[] = [];\n      const colors: (number | string)[] = [];\n      const tooltipData: Datum[] = [];\n\n      // Iterate through all the runs and aggregate selected metrics/params\n      for (const runData of runsData) {\n        const {\n          runInfo: { run_uuid, run_name },\n          metrics,\n          params,\n          color,\n        } = runData;\n        const xAxisData = xAxis.type === 'METRIC' ? metrics : params;\n        const yAxisData = yAxis.type === 'METRIC' ? metrics : params;\n        const zAxisData = zAxis.type === 'METRIC' ? metrics : params;\n\n        const x = xAxisData?.[xAxis.key]?.value || undefined;\n        const y = yAxisData?.[yAxis.key]?.value || undefined;\n        const z = zAxisData?.[zAxis.key]?.value || undefined;\n\n        if (x && y && z) {\n          xValues.push(x);\n          yValues.push(y);\n          zValues.push(z);\n          colors.push(color || theme.colors.primary);\n          tooltipData.push([run_uuid, run_name || run_uuid, z] as any);\n        }\n      }\n\n      // Let's compile chart layers\n      const layers = [\n        // The top layer with the scatter plot (dots)\n        {\n          x: xValues,\n          y: yValues,\n          customdata: tooltipData,\n          hovertemplate: useDefaultHoverBox ? createTooltipTemplate(zAxis.key) : undefined,\n          hoverinfo: useDefaultHoverBox ? undefined : 'none',\n          hoverlabel: useDefaultHoverBox ? compareRunsChartHoverlabel : undefined,\n          type: 'scatter',\n          mode: 'markers',\n          marker: {\n            size: markerSize,\n            color: colors,\n            line: {\n              color: 'black',\n              width: 1,\n            },\n          },\n        },\n      ] as Data[];\n\n      // If there are at least two runs, add a contour chart layer\n      if (runsData.length > 1) {\n        layers.unshift({\n          x: xValues,\n          y: yValues,\n          z: zValues,\n          type: 'contour',\n          connectgaps: true,\n          hoverinfo: 'none',\n          contours: {\n            coloring: 'heatmap',\n          },\n          colorscale: colorScale,\n          reversescale: reverseScale,\n        } as Data);\n      }\n      return layers;\n    }, [\n      colorScale,\n      reverseScale,\n      markerSize,\n      runsData,\n      xAxis.type,\n      xAxis.key,\n      yAxis.type,\n      yAxis.key,\n      zAxis.type,\n      zAxis.key,\n      theme.colors.primary,\n      useDefaultHoverBox,\n    ]);\n\n    const [layout, setLayout] = useState<Partial<Layout>>({\n      width: width || layoutWidth,\n      height: height || layoutHeight,\n      margin,\n      xaxis: { title: xAxis.key },\n      yaxis: { ticks: 'inside', title: { standoff: 32, text: yAxis.key } },\n    });\n\n    useEffect(() => {\n      setLayout((current) => {\n        const newLayout = {\n          ...current,\n          width: width || layoutWidth,\n          height: height || layoutHeight,\n          margin,\n        };\n\n        if (newLayout.xaxis) {\n          newLayout.xaxis.title = xAxis.key;\n        }\n\n        if (newLayout.yaxis) {\n          newLayout.yaxis.title = { standoff: 32, text: yAxis.key };\n        }\n\n        return newLayout;\n      });\n    }, [layoutWidth, layoutHeight, margin, xAxis.key, yAxis.key, width, height]);\n\n    const { setHoveredPointIndex } = useCompareRunsTraceHighlight(\n      containerDiv,\n      selectedRunUuid,\n      runsData,\n      highlightScatterTraces,\n    );\n\n    const hoverCallback = useCallback(\n      ({ points }: PlotMouseEvent) => {\n        // Find hover event corresponding to the second curve (scatter plot) only\n        const scatterPoints = points.find(({ curveNumber }) => curveNumber === 1);\n\n        setHoveredPointIndex(scatterPoints?.pointIndex ?? -1);\n\n        if (!scatterPoints) {\n          return;\n        }\n\n        // Find the corresponding run UUID by basing on \"customdata\" field set in the trace data.\n        // Plotly TS typings don't support custom fields so we need to cast to \"any\" first\n        const pointCustomDataRunUuid = (scatterPoints as any)?.customdata?.[0];\n        if (pointCustomDataRunUuid) {\n          onHover?.(pointCustomDataRunUuid);\n        }\n      },\n      [onHover, setHoveredPointIndex],\n    );\n\n    const unhoverCallback = useCallback(() => {\n      onUnhover?.();\n      setHoveredPointIndex(-1);\n    }, [onUnhover, setHoveredPointIndex]);\n\n    /**\n     * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n     * so in order to achieve updated behavior we need to wrap its most recent implementation\n     * in the immutable callback.\n     */\n    const mutableHoverCallback = useMutableHoverCallback(hoverCallback);\n\n    return (\n      <div\n        css={[\n          commonRunsChartStyles.chartWrapper,\n          commonRunsChartStyles.scatterChartHighlightStyles,\n        ]}\n        className={className}\n        ref={setContainerDiv}\n      >\n        <LazyPlot\n          data={plotData}\n          useResizeHandler={!isDynamicSizeSupported}\n          css={commonRunsChartStyles.chart}\n          onUpdate={onUpdate}\n          layout={layout}\n          config={PLOT_CONFIG}\n          onHover={mutableHoverCallback}\n          onUnhover={unhoverCallback}\n        />\n      </div>\n    );\n  },\n);\n","import { useMemo } from 'react';\nimport type { CompareChartRunData } from '../charts/CompareRunsCharts.common';\nimport type { RunsCompareContourCardConfig } from '../runs-compare.types';\nimport { RunsCompareChartCardWrapper } from './ChartCard.common';\nimport { CompareRunsContourPlot } from '../charts/CompareRunsContourPlot';\nimport { useCompareRunsTooltip } from '../hooks/useCompareRunsTooltip';\n\nexport interface RunsCompareContourChartCardProps {\n  config: RunsCompareContourCardConfig;\n  chartRunData: CompareChartRunData[];\n\n  onDelete: () => void;\n  onEdit: () => void;\n}\n\nexport const RunsCompareContourChartCard = ({\n  config,\n  chartRunData,\n  onDelete,\n  onEdit,\n}: RunsCompareContourChartCardProps) => {\n  const slicedRuns = useMemo(\n    () => chartRunData.slice(0, config.runsCountToCompare || 10).reverse(),\n    [chartRunData, config],\n  );\n\n  const { setTooltip, resetTooltip, selectedRunUuid } = useCompareRunsTooltip(config);\n\n  return (\n    <RunsCompareChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={`${config.xaxis.key} vs. ${config.yaxis.key} vs. ${config.zaxis.key}`}\n      // TODO: add i18n after making decision on the final wording\n      subtitle={<>Comparing first {slicedRuns.length} runs</>}\n    >\n      <div css={styles.contourChartCardWrapper}>\n        <CompareRunsContourPlot\n          runsData={slicedRuns}\n          xAxis={config.xaxis}\n          yAxis={config.yaxis}\n          zAxis={config.zaxis}\n          useDefaultHoverBox={false}\n          onHover={setTooltip}\n          onUnhover={resetTooltip}\n          selectedRunUuid={selectedRunUuid}\n        />\n      </div>\n    </RunsCompareChartCardWrapper>\n  );\n};\n\nconst styles = {\n  contourChartCardWrapper: {\n    overflow: 'hidden',\n  },\n};\n","import { minBy } from 'lodash';\nimport { Config, Data, Layout, LayoutAxis } from 'plotly.js';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { MetricEntity } from '../../../types';\nimport { LazyPlot } from '../../LazyPlot';\nimport { useMutableHoverCallback } from '../hooks/useMutableHoverCallback';\nimport {\n  highlightLineTraces,\n  useCompareRunsTraceHighlight,\n} from '../hooks/useCompareRunsTraceHighlight';\nimport {\n  commonRunsChartStyles,\n  CompareChartRunData,\n  compareRunsChartDefaultMargin,\n  compareRunsChartHoverlabel,\n  CompareRunsCommonPlotProps,\n  normalizeChartValue,\n  useDynamicPlotSize,\n} from './CompareRunsCharts.common';\n\nexport interface CompareRunsMetricsLinePlotProps extends CompareRunsCommonPlotProps {\n  /**\n   * Determines which metric are we comparing by\n   */\n  metricKey: string;\n\n  /**\n   * Y axis mode\n   */\n  scaleType?: 'linear' | 'log';\n\n  /**\n   * Use spline or polyline. Spline is default mode.\n   */\n  lineShape?: 'linear' | 'spline';\n\n  /**\n   * Choose X axis mode - numeric step or absolute time\n   */\n  xAxisKey?: 'step' | 'time' | 'time-relative';\n\n  /**\n   * Array of runs data with corresponding values\n   */\n  runsData: CompareChartRunData[];\n}\n\nconst PLOT_CONFIG: Partial<Config> = {\n  displaylogo: false,\n  doubleClick: 'autosize',\n  scrollZoom: true,\n};\n\nexport const createTooltipTemplate = (runName: string) =>\n  `<b>${runName}</b>:<br>` +\n  '<b>%{xaxis.title.text}:</b> %{x}<br>' +\n  '<b>%{yaxis.title.text}:</b> %{y:.2f}<br>' +\n  '<extra></extra>';\n\n/**\n * Prepares dataset's X axis according to selected visualization type: step, time-wall and time-relative\n */\nconst prepareMetricHistoryByAxisType = (\n  metricHistory?: MetricEntity[],\n  axisType?: CompareRunsMetricsLinePlotProps['xAxisKey'],\n) => {\n  if (!metricHistory) {\n    return [];\n  }\n  if (axisType === 'time-relative') {\n    const { timestamp: minTimestamp } = minBy(metricHistory, 'timestamp') || {};\n    if (minTimestamp) {\n      return metricHistory.map((e) => (e.timestamp - minTimestamp) / 1000); // Milliseconds -> seconds\n    }\n  } else if (axisType === 'time') {\n    return metricHistory.map((e) => e.timestamp);\n  }\n\n  return metricHistory.map((e) => e.step);\n};\n\n/**\n * Implementation of plotly.js chart displaying\n * line plot comparing metrics' history for a given\n * set of experiments runs\n */\nexport const CompareRunsMetricsLinePlot = React.memo(\n  ({\n    runsData,\n    metricKey,\n    scaleType = 'linear',\n    xAxisKey = 'step',\n    className,\n    margin = compareRunsChartDefaultMargin,\n    lineShape = 'spline',\n    onUpdate,\n    onHover,\n    onUnhover,\n    width,\n    height,\n    useDefaultHoverBox = true,\n    selectedRunUuid,\n  }: CompareRunsMetricsLinePlotProps) => {\n    const plotData = useMemo(\n      () =>\n        // Generate separate data trace for each run\n        runsData.map((runEntry) => {\n          if (runEntry.metricsHistory) {\n            return {\n              // Let's add UUID to each run so it can be distinguished later (e.g. on hover)\n              uuid: runEntry.runInfo.run_uuid,\n              name: runEntry.runInfo.run_name,\n              x: prepareMetricHistoryByAxisType(runEntry.metricsHistory[metricKey], xAxisKey),\n              // The actual value is on Y axis\n              y: runEntry.metricsHistory[metricKey]?.map((e) => normalizeChartValue(e.value)),\n              hovertext: runEntry.runInfo.run_name,\n              text: 'x',\n              textposition: 'outside',\n              textfont: {\n                size: 11,\n              },\n              hovertemplate: useDefaultHoverBox\n                ? createTooltipTemplate(runEntry.runInfo.run_name)\n                : undefined,\n              hoverinfo: useDefaultHoverBox ? undefined : 'none',\n              hoverlabel: useDefaultHoverBox ? compareRunsChartHoverlabel : undefined,\n              type: 'scatter',\n              line: { shape: lineShape },\n              marker: {\n                color: runEntry.color,\n              },\n            } as Data;\n          }\n\n          return {};\n        }),\n      [runsData, lineShape, xAxisKey, metricKey, useDefaultHoverBox],\n    );\n\n    const { layoutHeight, layoutWidth, setContainerDiv, containerDiv, isDynamicSizeSupported } =\n      useDynamicPlotSize();\n\n    const { formatMessage } = useIntl();\n\n    const { setHoveredPointIndex } = useCompareRunsTraceHighlight(\n      containerDiv,\n      selectedRunUuid,\n      runsData,\n      highlightLineTraces,\n    );\n\n    const xAxisKeyLabel = useMemo(() => {\n      if (xAxisKey === 'time') {\n        return formatMessage({\n          defaultMessage: 'Time',\n          description:\n            'Label for X axis in compare runs metrics when values are displayed by absolute time',\n        });\n      }\n      if (xAxisKey === 'time-relative') {\n        return formatMessage({\n          defaultMessage: 'Time (s)',\n          description:\n            'Label for X axis in compare runs metrics when values are displayed by relative time in seconds',\n        });\n      }\n      return formatMessage({\n        defaultMessage: 'Step',\n        description:\n          'Label for X axis in compare runs metrics when values are displayed by metric history step',\n      });\n    }, [formatMessage, xAxisKey]);\n\n    const yAxisParams: Partial<LayoutAxis> = useMemo(\n      () => ({\n        tickfont: { size: 11 },\n        type: scaleType === 'log' ? 'log' : 'linear',\n      }),\n      [scaleType],\n    );\n\n    const [layout, setLayout] = useState<Partial<Layout>>({\n      width: width || layoutWidth,\n      height: height || layoutHeight,\n      margin,\n      xaxis: { title: xAxisKeyLabel },\n      yaxis: yAxisParams,\n    });\n\n    useEffect(() => {\n      setLayout((current) => ({\n        ...current,\n        width: width || layoutWidth,\n        height: height || layoutHeight,\n        margin,\n        yaxis: yAxisParams,\n        showlegend: false,\n      }));\n    }, [layoutWidth, layoutHeight, margin, yAxisParams, width, height, xAxisKeyLabel]);\n\n    const hoverCallback = useCallback(\n      ({ points, event }) => {\n        setHoveredPointIndex(points[0]?.curveNumber ?? -1);\n        const runUuid = (points[0]?.data as any).uuid;\n\n        // Apart from \"y\" value, we also want to send the \"x\" data so it can\n        // be reflected in the tooltip\n        const xAxisData = {\n          // Value of the \"x\" axis\n          value: points[0]?.x,\n          // The index of the X datum\n          index: points[0]?.pointIndex,\n          // Current label (\"Step\", \"Time\" etc.)\n          label: xAxisKeyLabel,\n        };\n        if (runUuid) {\n          onHover?.(runUuid, event, xAxisData);\n        }\n      },\n      [onHover, setHoveredPointIndex, xAxisKeyLabel],\n    );\n\n    const unhoverCallback = useCallback(() => {\n      onUnhover?.();\n      setHoveredPointIndex(-1);\n    }, [onUnhover, setHoveredPointIndex]);\n\n    // When switching axis title, Plotly.js mutates its layout object\n    // internally which leads to desync problems and automatic axis range\n    // ends up with an invalid value. In order to fix it, we are mutating\n    // axis object and injecting metric key as title in\n    // the render phase.\n    // It could be fixed by wrapping plotly.js directly instead of using\n    // react-plotly.js - but the effort does not correspond to the plan of\n    // moving away from plotly soon.\n    const immediateLayout = layout;\n    if (immediateLayout.xaxis) {\n      immediateLayout.xaxis.title = xAxisKeyLabel;\n      immediateLayout.xaxis.type = xAxisKey === 'time' ? 'date' : undefined;\n    }\n    if (immediateLayout.yaxis) {\n      immediateLayout.yaxis.title = metricKey;\n    }\n\n    /**\n     * Unfortunately plotly.js memorizes first onHover callback given on initial render,\n     * so in order to achieve updated behavior we need to wrap its most recent implementation\n     * in the immutable callback.\n     */\n    const mutableHoverCallback = useMutableHoverCallback(hoverCallback);\n\n    return (\n      <div\n        css={[commonRunsChartStyles.chartWrapper, styles.highlightStyles]}\n        className={className}\n        ref={setContainerDiv}\n      >\n        <LazyPlot\n          data={plotData}\n          useResizeHandler={!isDynamicSizeSupported}\n          css={commonRunsChartStyles.chart}\n          onUpdate={onUpdate}\n          layout={immediateLayout}\n          config={PLOT_CONFIG}\n          onHover={mutableHoverCallback}\n          onUnhover={unhoverCallback}\n        />\n      </div>\n    );\n  },\n);\n\nconst styles = {\n  highlightStyles: {\n    '.scatterlayer g.trace': {\n      transition: 'var(--trace-transition)',\n    },\n    '.scatterlayer.is-highlight g.trace': {\n      opacity: 'var(--trace-opacity-dimmed-low) !important',\n    },\n    '.scatterlayer g.trace.is-hover-highlight': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n    },\n    '.scatterlayer g.trace.is-selection-highlight': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n    },\n    '.scatterlayer g.trace.is-selection-highlight path.point': {\n      stroke: 'var(--trace-stroke-color)',\n      strokeWidth: 'var(--trace-stroke-width) !important',\n    },\n  },\n};\n","import { Skeleton } from '@databricks/design-system';\nimport { useMemo } from 'react';\nimport { CompareChartRunData } from '../charts/CompareRunsCharts.common';\nimport { CompareRunsMetricsLinePlot } from '../charts/CompareRunsMetricsLinePlot';\nimport { useCompareRunsTooltip } from '../hooks/useCompareRunsTooltip';\nimport type { RunsCompareLineCardConfig } from '../runs-compare.types';\nimport { RunsCompareChartCardWrapper } from './ChartCard.common';\n\nexport interface RunsCompareLineChartCardProps {\n  config: RunsCompareLineCardConfig;\n  chartRunData: CompareChartRunData[];\n\n  isMetricHistoryLoading?: boolean;\n\n  onDelete: () => void;\n  onEdit: () => void;\n}\n\nexport const RunsCompareLineChartCard = ({\n  config,\n  chartRunData,\n  isMetricHistoryLoading,\n  onDelete,\n  onEdit,\n}: RunsCompareLineChartCardProps) => {\n  const slicedRuns = useMemo(\n    () => chartRunData.slice(0, config.runsCountToCompare || 10).reverse(),\n    [chartRunData, config],\n  );\n\n  const { setTooltip, resetTooltip, selectedRunUuid } = useCompareRunsTooltip(config);\n\n  return (\n    <RunsCompareChartCardWrapper\n      onEdit={onEdit}\n      onDelete={onDelete}\n      title={config.metricKey}\n      // TODO: add i18n after making decision on the final wording\n      subtitle={<>Comparing first {slicedRuns.length} runs</>}\n    >\n      <div css={styles.lineChartCardWrapper}>\n        {isMetricHistoryLoading ? (\n          <Skeleton />\n        ) : (\n          <CompareRunsMetricsLinePlot\n            runsData={slicedRuns}\n            metricKey={config.metricKey}\n            scaleType={config.scaleType}\n            xAxisKey={config.xAxisKey}\n            useDefaultHoverBox={false}\n            onHover={setTooltip}\n            onUnhover={resetTooltip}\n            selectedRunUuid={selectedRunUuid}\n          />\n        )}\n      </div>\n    </RunsCompareChartCardWrapper>\n  );\n};\n\nconst styles = {\n  lineChartCardWrapper: {\n    overflow: 'hidden',\n  },\n};\n","import { useMemo } from 'react';\nimport { Theme } from '@emotion/react';\nimport { RunsCompareBarChartCard } from './cards/RunsCompareBarChartCard';\nimport { RunsCompareParallelChartCard } from './cards/RunsCompareParallelChartCard';\nimport type { CompareChartRunData } from './charts/CompareRunsCharts.common';\nimport type {\n  RunsCompareBarCardConfig,\n  RunsCompareCardConfig,\n  RunsCompareContourCardConfig,\n  RunsCompareLineCardConfig,\n  RunsCompareParallelCardConfig,\n  RunsCompareScatterCardConfig,\n} from './runs-compare.types';\n\nimport { RunsCompareChartType } from './runs-compare.types';\nimport { RunsCompareScatterChartCard } from './cards/RunsCompareScatterChartCard';\nimport { RunsCompareContourChartCard } from './cards/RunsCompareContourChartCard';\nimport { RunsCompareLineChartCard } from './cards/RunsCompareLineChartCard';\n\nexport interface RunsCompareChartsProps {\n  chartRunData: CompareChartRunData[];\n  cardsConfig: RunsCompareCardConfig[];\n  isMetricHistoryLoading?: boolean;\n  onRemoveChart: (chart: RunsCompareCardConfig) => void;\n  onStartEditChart: (chart: RunsCompareCardConfig) => void;\n}\n\nexport const RunsCompareCharts = ({\n  chartRunData,\n  cardsConfig,\n  isMetricHistoryLoading,\n  onRemoveChart,\n  onStartEditChart,\n}: RunsCompareChartsProps) => {\n  const [parallelChartCards, remainingChartCards] = useMemo(() => {\n    // Play it safe in case that cards config somehow failed to load\n    if (!Array.isArray(cardsConfig)) {\n      return [[], []];\n    }\n    return [\n      cardsConfig.filter((c) => c.type === RunsCompareChartType.PARALLEL),\n      cardsConfig.filter((c) => c.type !== RunsCompareChartType.PARALLEL),\n    ];\n  }, [cardsConfig]);\n  return (\n    <>\n      {parallelChartCards.length ? (\n        <div css={styles.parallelChartsWrapper}>\n          {parallelChartCards.map((cardConfig) => (\n            <RunsCompareParallelChartCard\n              config={cardConfig as RunsCompareParallelCardConfig}\n              chartRunData={chartRunData}\n              onEdit={() => onStartEditChart(cardConfig)}\n              onDelete={() => onRemoveChart(cardConfig)}\n            />\n          ))}\n        </div>\n      ) : null}\n      <div css={styles.chartsWrapper}>\n        {remainingChartCards.map((cardConfig) => {\n          if (cardConfig.type === RunsCompareChartType.BAR) {\n            return (\n              <RunsCompareBarChartCard\n                config={cardConfig as RunsCompareBarCardConfig}\n                chartRunData={chartRunData}\n                onEdit={() => onStartEditChart(cardConfig)}\n                onDelete={() => onRemoveChart(cardConfig)}\n              />\n            );\n          } else if (cardConfig.type === RunsCompareChartType.LINE) {\n            return (\n              <RunsCompareLineChartCard\n                config={cardConfig as RunsCompareLineCardConfig}\n                chartRunData={chartRunData}\n                onEdit={() => onStartEditChart(cardConfig)}\n                onDelete={() => onRemoveChart(cardConfig)}\n                isMetricHistoryLoading={isMetricHistoryLoading}\n              />\n            );\n          } else if (cardConfig.type === RunsCompareChartType.SCATTER) {\n            return (\n              <RunsCompareScatterChartCard\n                config={cardConfig as RunsCompareScatterCardConfig}\n                chartRunData={chartRunData}\n                onEdit={() => onStartEditChart(cardConfig)}\n                onDelete={() => onRemoveChart(cardConfig)}\n              />\n            );\n          } else if (cardConfig.type === RunsCompareChartType.CONTOUR) {\n            return (\n              <RunsCompareContourChartCard\n                config={cardConfig as RunsCompareContourCardConfig}\n                chartRunData={chartRunData}\n                onEdit={() => onStartEditChart(cardConfig)}\n                onDelete={() => onRemoveChart(cardConfig)}\n              />\n            );\n          }\n\n          return null;\n        })}\n      </div>\n    </>\n  );\n};\n\nconst styles = {\n  chartGroupWrapper: (theme: Theme) => ({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    gap: theme.spacing.md,\n  }),\n  parallelChartsWrapper: (theme: Theme) => ({\n    display: 'flex',\n    flexDirection: 'column' as const,\n    gap: theme.spacing.md,\n    marginBottom: theme.spacing.md,\n  }),\n  chartsWrapper: (theme: Theme) => ({\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(520px, 1fr))',\n    gap: theme.spacing.md,\n  }),\n};\n","import { Select, Typography } from '@databricks/design-system';\nimport React, { ComponentProps, PropsWithChildren } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { makeCanonicalSortKey } from '../../experiment-page/utils/experimentPage.column-utils';\n\n/**\n * Represents a field in the compare run charts configuration modal.\n * Displays a title and content with proper margins.\n */\nexport const RunsCompareConfigureField = ({\n  title,\n  children,\n}: PropsWithChildren<{\n  title: string;\n}>) => {\n  return (\n    <div\n      css={(theme) => ({ marginBottom: theme.spacing.md * 2 })}\n      data-testid='experiment-view-compare-runs-config-field'\n    >\n      <Typography.Title level={4}>{title}:</Typography.Title>\n      {children}\n    </div>\n  );\n};\n\n/**\n * A searchable select for selecting metric or param from a categorized list.\n */\nexport const RunsCompareMetricParamSelect = ({\n  value,\n  onChange,\n  metricKeyList,\n  paramKeyList,\n}: {\n  value: string;\n  onChange: ComponentProps<typeof Select>['onChange'];\n  metricKeyList?: string[];\n  paramKeyList?: string[];\n}) => {\n  const { formatMessage } = useIntl();\n\n  const isEmpty = !paramKeyList?.length && !metricKeyList?.length;\n\n  return (\n    <Select\n      css={styles.selectFull}\n      value={\n        isEmpty\n          ? formatMessage({\n              description:\n                'Message displayed when no metrics or params are available in the compare runs chart configure modal',\n              defaultMessage: 'No metrics or parameters available',\n            })\n          : value\n      }\n      disabled={isEmpty}\n      onChange={onChange}\n      dangerouslySetAntdProps={{ showSearch: true }}\n    >\n      {metricKeyList?.length ? (\n        <Select.OptGroup\n          label={formatMessage({\n            defaultMessage: 'Metrics',\n            description:\n              \"Label for 'metrics' option group in the compare runs chart configure modal\",\n          })}\n        >\n          {metricKeyList.map((metric) => (\n            <Select.Option\n              key={makeCanonicalSortKey('METRIC', metric)}\n              value={makeCanonicalSortKey('METRIC', metric)}\n            >\n              {metric}\n            </Select.Option>\n          ))}\n        </Select.OptGroup>\n      ) : null}\n      {paramKeyList?.length ? (\n        <Select.OptGroup\n          label={formatMessage({\n            defaultMessage: 'Params',\n            description:\n              \"Label for 'params' option group in the compare runs chart configure modal\",\n          })}\n        >\n          {paramKeyList.map((param) => (\n            <Select.Option\n              key={makeCanonicalSortKey('PARAM', param)}\n              value={makeCanonicalSortKey('PARAM', param)}\n            >\n              {param}\n            </Select.Option>\n          ))}\n        </Select.OptGroup>\n      ) : null}\n    </Select>\n  );\n};\n\nexport const RunsCompareRunNumberSelect = ({\n  onChange,\n  value,\n  options,\n}: {\n  value?: number;\n  onChange: ComponentProps<typeof Select<number>>['onChange'];\n  options: (number | { value: number; label: React.ReactNode })[];\n}) => {\n  const { formatMessage } = useIntl();\n  return (\n    <RunsCompareConfigureField\n      title={formatMessage({\n        defaultMessage: 'Max. no of runs shown',\n        description:\n          'Label for the control allowing selection of number of runs displayed in a compare runs chart',\n      })}\n    >\n      <Select<number> css={styles.selectFull} value={value} onChange={onChange}>\n        {options.map((countOption) => {\n          const optionValue = typeof countOption === 'number' ? countOption : countOption.value;\n          const label = typeof countOption === 'number' ? countOption : countOption.label;\n          return (\n            <Select.Option key={optionValue} value={optionValue}>\n              {label}\n            </Select.Option>\n          );\n        })}\n      </Select>\n    </RunsCompareConfigureField>\n  );\n};\n\nexport const runsCompareRunCountDefaultOptions: { value: number; label: React.ReactNode }[] = [\n  // We're not using any procedural generation so react-intl extractor can parse it\n  {\n    value: 5,\n    label: (\n      <FormattedMessage\n        defaultMessage='5'\n        description='Label for 5 first runs visible in run count selector within runs compare configuration modal'\n      />\n    ),\n  },\n  {\n    value: 10,\n    label: (\n      <FormattedMessage\n        defaultMessage='10'\n        description='Label for 10 first runs visible in run count selector within runs compare configuration modal'\n      />\n    ),\n  },\n  {\n    value: 20,\n    label: (\n      <FormattedMessage\n        defaultMessage='20'\n        description='Label for 20 first runs visible in run count selector within runs compare configuration modal'\n      />\n    ),\n  },\n];\n\nconst styles = { selectFull: { width: '100%' } };\n","import { Select } from '@databricks/design-system';\nimport { useCallback, useEffect } from 'react';\nimport type { RunsCompareCardConfig, RunsCompareBarCardConfig } from '../runs-compare.types';\nimport {\n  RunsCompareConfigureField,\n  runsCompareRunCountDefaultOptions,\n  RunsCompareRunNumberSelect,\n} from './RunsCompareConfigure.common';\n\n/**\n * Form containing configuration controls for runs compare charts.\n */\nexport const RunsCompareConfigureBarChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n}: {\n  metricKeyList: string[];\n  state: Partial<RunsCompareBarCardConfig>;\n  onStateChange: (setter: (current: RunsCompareCardConfig) => RunsCompareBarCardConfig) => void;\n}) => {\n  /**\n   * Callback for updating metric key\n   */\n  const updateMetric = useCallback(\n    (metricKey: string) => {\n      onStateChange((current) => ({ ...(current as RunsCompareBarCardConfig), metricKey }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * Callback for updating run count\n   */\n  const updateVisibleRunCount = useCallback(\n    (runsCountToCompare: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsCompareBarCardConfig),\n        runsCountToCompare,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * If somehow metric key is not predetermined, automatically\n   * select the first one so it's not empty\n   */\n  useEffect(() => {\n    if (!state.metricKey && metricKeyList?.[0]) {\n      updateMetric(metricKeyList[0]);\n    }\n  }, [state.metricKey, updateMetric, metricKeyList]);\n\n  const emptyMetricsList = metricKeyList.length === 0;\n\n  return (\n    <>\n      <RunsCompareConfigureField title='Metric'>\n        <Select\n          css={styles.selectFull}\n          value={emptyMetricsList ? 'No metrics available' : state.metricKey}\n          onChange={updateMetric}\n          disabled={emptyMetricsList}\n        >\n          {metricKeyList.map((metric) => (\n            <Select.Option key={metric} value={metric} data-testid={`metric-${metric}`}>\n              {metric}\n            </Select.Option>\n          ))}\n        </Select>\n      </RunsCompareConfigureField>\n      <RunsCompareRunNumberSelect\n        value={state.runsCountToCompare}\n        onChange={updateVisibleRunCount}\n        options={runsCompareRunCountDefaultOptions}\n      />\n    </>\n  );\n};\n\nconst styles = { selectFull: { width: '100%' } };\n","import { Select } from '@databricks/design-system';\nimport { useCallback } from 'react';\nimport type { RunsCompareCardConfig, RunsCompareParallelCardConfig } from '../runs-compare.types';\nimport { RunsCompareConfigureField } from './RunsCompareConfigure.common';\n\n/**\n * Form containing configuration controls for runs compare charts.\n */\nexport const RunsCompareConfigureParallelChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  paramKeyList,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  state: Partial<RunsCompareParallelCardConfig>;\n  onStateChange: (\n    setter: (current: RunsCompareCardConfig) => RunsCompareParallelCardConfig,\n  ) => void;\n}) => {\n  /**\n   * Callback for updating selected metrics and params\n   */\n\n  const updateSelectedParams = useCallback(\n    (selectedParams: string[]) => {\n      onStateChange((current) => ({\n        ...(current as RunsCompareParallelCardConfig),\n        selectedParams,\n      }));\n    },\n    [onStateChange],\n  );\n\n  const updateSelectedMetrics = useCallback(\n    (selectedMetrics: string[]) => {\n      onStateChange((current) => ({\n        ...(current as RunsCompareParallelCardConfig),\n        selectedMetrics,\n      }));\n    },\n    [onStateChange],\n  );\n\n  const emptyMetricsList = metricKeyList.length === 0;\n  const emptyParamsList = paramKeyList.length === 0;\n\n  return (\n    <>\n      <RunsCompareConfigureField title='Params'>\n        <Select\n          mode={emptyParamsList ? undefined : 'multiple'}\n          onChange={updateSelectedParams}\n          style={{\n            width: 300,\n          }}\n          value={emptyParamsList ? ('No parameters available' as any) : state.selectedParams}\n          disabled={emptyParamsList}\n        >\n          {paramKeyList.map((param) => (\n            <Select.Option value={param}>{param}</Select.Option>\n          ))}\n        </Select>\n      </RunsCompareConfigureField>\n      <RunsCompareConfigureField title='Metrics'>\n        <Select\n          mode={emptyMetricsList ? undefined : 'multiple'}\n          onChange={updateSelectedMetrics}\n          style={{\n            width: 300,\n          }}\n          value={emptyMetricsList ? ('No metrics available' as any) : state.selectedMetrics}\n          disabled={emptyMetricsList}\n        >\n          {metricKeyList.map((metric) => (\n            <Select.Option value={metric}>{metric}</Select.Option>\n          ))}\n        </Select>\n      </RunsCompareConfigureField>\n    </>\n  );\n};\n","import { Radio, Select, Switch, Tooltip, QuestionMarkIcon } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { useCallback, useEffect } from 'react';\nimport type { RunsCompareCardConfig, RunsCompareLineCardConfig } from '../runs-compare.types';\nimport {\n  RunsCompareConfigureField,\n  RunsCompareRunNumberSelect,\n} from './RunsCompareConfigure.common';\n\n/**\n * Form containing configuration controls for runs compare charts.\n */\nexport const RunsCompareConfigureLineChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n}: {\n  metricKeyList: string[];\n  state: Partial<RunsCompareLineCardConfig>;\n  onStateChange: (setter: (current: RunsCompareCardConfig) => RunsCompareLineCardConfig) => void;\n}) => {\n  /**\n   * Callback for updating metric key\n   */\n  const updateMetric = useCallback(\n    (metricKey: string) => {\n      onStateChange((current) => ({ ...(current as RunsCompareLineCardConfig), metricKey }));\n    },\n    [onStateChange],\n  );\n\n  const updateXAxisKey = useCallback(\n    (xAxisKey: RunsCompareLineCardConfig['xAxisKey']) => {\n      onStateChange((current) => ({\n        ...(current as RunsCompareLineCardConfig),\n        xAxisKey,\n      }));\n    },\n    [onStateChange],\n  );\n\n  const updateYAxisType = useCallback(\n    (isLogType: boolean) =>\n      onStateChange((current) => ({\n        ...(current as RunsCompareLineCardConfig),\n        scaleType: isLogType ? 'log' : 'linear',\n      })),\n    [onStateChange],\n  );\n  /**\n   * Callback for updating run count\n   */\n  const updateVisibleRunCount = useCallback(\n    (runsCountToCompare: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsCompareLineCardConfig),\n        runsCountToCompare,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * If somehow metric key is not predetermined, automatically\n   * select the first one so it's not empty\n   */\n  useEffect(() => {\n    if (!state.metricKey && metricKeyList?.[0]) {\n      updateMetric(metricKeyList[0]);\n    }\n  }, [state.metricKey, updateMetric, metricKeyList]);\n\n  const emptyMetricsList = metricKeyList.length === 0;\n\n  return (\n    <>\n      <RunsCompareConfigureField title='Metric (Y-axis)'>\n        <Select\n          css={styles.selectFull}\n          value={emptyMetricsList ? 'No metrics available' : state.metricKey}\n          onChange={updateMetric}\n          disabled={emptyMetricsList}\n        >\n          {metricKeyList.map((metric) => (\n            <Select.Option key={metric} value={metric} data-testid={`metric-${metric}`}>\n              {metric}\n            </Select.Option>\n          ))}\n        </Select>\n      </RunsCompareConfigureField>\n      <RunsCompareConfigureField title='X-axis'>\n        <Radio.Group\n          value={state.xAxisKey}\n          onChange={({ target: { value } }) => updateXAxisKey(value)}\n        >\n          <Radio value='step'>Step</Radio>\n          <Radio value='time'>\n            Time (wall)\n            <Tooltip\n              title={\n                <FormattedMessage\n                  defaultMessage='Absolute date and time'\n                  description='A tooltip line chart configuration for the step function of wall time'\n                />\n              }\n              placement='right'\n            >\n              {' '}\n              <QuestionMarkIcon css={styles.timeStepQuestionMarkIcon} />\n            </Tooltip>\n          </Radio>\n          <Radio value='time-relative'>\n            Time (relative)\n            <Tooltip\n              title={\n                <FormattedMessage\n                  defaultMessage='Amount of time that has passed since the first metric value was logged'\n                  description='A tooltip line chart configuration for the step function of relative time'\n                />\n              }\n              placement='right'\n            >\n              {' '}\n              <QuestionMarkIcon css={styles.timeStepQuestionMarkIcon} />\n            </Tooltip>\n          </Radio>\n        </Radio.Group>\n      </RunsCompareConfigureField>\n      <RunsCompareConfigureField title='Y-axis log scale'>\n        <Switch checked={state.scaleType === 'log'} onChange={updateYAxisType} label='Enabled' />\n      </RunsCompareConfigureField>\n      <RunsCompareRunNumberSelect\n        value={state.runsCountToCompare}\n        onChange={updateVisibleRunCount}\n        options={[5, 10, 20]}\n      />\n    </>\n  );\n};\n\nconst styles = {\n  selectFull: { width: '100%' },\n  timeStepQuestionMarkIcon: () => ({\n    svg: { width: 12, height: 12 },\n  }),\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { getMetricHistoryApiBulk } from '../../../actions';\nimport type { MetricHistoryByName } from '../../../types';\nimport { useAsyncDispatch } from '../../experiment-page/hooks/useAsyncDispatch';\nimport type { CompareChartRunData } from '../charts/CompareRunsCharts.common';\n\n/**\n * Automatically fetches metric history for runs, used in compare runs charts.\n * After updating list of metrics or runs, optimizes the request and fetches\n * only the missing entries.\n */\nexport const useFetchCompareRunsMetricHistory = (\n  // We can fetch multiple metrics at once\n  metricKeys: string[],\n  runsData: CompareChartRunData[],\n  currentStoreMetrics: Record<string, MetricHistoryByName>,\n) => {\n  const dispatch = useAsyncDispatch();\n\n  const [error, setError] = useState<any>(null);\n  const [requests, setRequests] = useState<Record<string, boolean>>({});\n\n  /**\n   * We store pending requests in \"<run-id>-<metric-key>\" format,\n   * the function below changes the state of pending requests\n   */\n  const setRequestsPending = useCallback(\n    (runUuids: string[], metric: string, value: boolean) => {\n      setRequests((currentRequests) => {\n        const result = { ...currentRequests };\n        for (const uuid of runUuids) {\n          const key = `${uuid}-${metric}`;\n          result[key] = value;\n        }\n        return result;\n      });\n    },\n    [setRequests],\n  );\n\n  const addRequests = useCallback(\n    (runUuids: string[], metric: string) => setRequestsPending(runUuids, metric, true),\n    [setRequestsPending],\n  );\n\n  const settleRequests = useCallback(\n    (runUuids: string[], metric: string) => setRequestsPending(runUuids, metric, false),\n    [setRequestsPending],\n  );\n\n  const isLoading = useMemo(() => {\n    const runUuids = runsData.map((r) => r.runInfo.run_uuid);\n    for (const uuid of runUuids) {\n      for (const metric of metricKeys) {\n        const isPendingRequest = requests[`${uuid}-${metric}`];\n        if (isPendingRequest) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }, [metricKeys, requests, runsData]);\n\n  useEffect(() => {\n    if (!metricKeys.length) {\n      return;\n    }\n\n    for (const metricKey of metricKeys) {\n      if (!metricKey) {\n        continue;\n      }\n\n      // Determine which runs does not have corresponding\n      // metric history entries already fetched and stored\n      const runUuids = runsData.map((r) => r.runInfo.run_uuid);\n      const runUuidsToFetch = runUuids.filter((runUuid) => {\n        const isInStore = Boolean(currentStoreMetrics[runUuid]?.[metricKey]);\n        const isPendingRequest = requests[`${runUuid}-${metricKey}`];\n        return !isInStore && !isPendingRequest;\n      });\n\n      if (!runUuidsToFetch.length) {\n        continue;\n      }\n\n      // Register request for history in the internal state\n      addRequests(runUuidsToFetch, metricKey);\n\n      // Dispatch the action\n      dispatch(getMetricHistoryApiBulk(runUuidsToFetch, metricKey))\n        .then(() => {\n          // Settle request in the internal state if it's resolved\n          settleRequests(runUuidsToFetch, metricKey);\n        })\n        .catch((e) => {\n          // Set the internal state error if occurred\n          setError(e);\n        });\n    }\n  }, [addRequests, currentStoreMetrics, dispatch, settleRequests, metricKeys, requests, runsData]);\n\n  return { isLoading, error };\n};\n","import { Skeleton } from '@databricks/design-system';\nimport { useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { StateWithEntities } from '../../../../redux-types';\nimport { MetricHistoryByName } from '../../../types';\nimport type { CompareChartRunData } from '../charts/CompareRunsCharts.common';\nimport { CompareRunsMetricsLinePlot } from '../charts/CompareRunsMetricsLinePlot';\nimport { useCompareRunsTooltip } from '../hooks/useCompareRunsTooltip';\nimport { useFetchCompareRunsMetricHistory } from '../hooks/useFetchCompareRunsMetricHistory';\nimport { RunsCompareLineCardConfig } from '../runs-compare.types';\n\nexport const RunsCompareConfigureLineChartPreviewImpl = ({\n  previewData,\n  cardConfig,\n  metricsByRunUuid,\n}: {\n  previewData: CompareChartRunData[];\n  cardConfig: RunsCompareLineCardConfig;\n\n  metricsByRunUuid: Record<string, MetricHistoryByName>;\n}) => {\n  const metricKeysToFetch = useMemo(() => [cardConfig.metricKey], [cardConfig.metricKey]);\n  const { isLoading, error } = useFetchCompareRunsMetricHistory(\n    metricKeysToFetch,\n    previewData,\n    metricsByRunUuid,\n  );\n\n  const previewDataWithHistory = useMemo<CompareChartRunData[]>(\n    () =>\n      previewData.map((previewRun) => ({\n        ...previewRun,\n        metricsHistory: metricsByRunUuid[previewRun.runInfo.run_uuid],\n      })),\n    [previewData, metricsByRunUuid],\n  );\n\n  const { resetTooltip, setTooltip } = useCompareRunsTooltip(cardConfig);\n\n  if (isLoading) {\n    return <Skeleton />;\n  }\n\n  if (error) {\n    return <>Error occured!</>;\n  }\n\n  return (\n    <CompareRunsMetricsLinePlot\n      runsData={previewDataWithHistory}\n      metricKey={cardConfig.metricKey}\n      scaleType={cardConfig.scaleType}\n      xAxisKey={cardConfig.xAxisKey}\n      useDefaultHoverBox={false}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n    />\n  );\n};\n\nconst mapStateToProps = ({ entities: { metricsByRunUuid } }: StateWithEntities) => ({\n  metricsByRunUuid,\n});\n\n/**\n * Preview of line chart used in compare runs configuration modal\n */\nexport const RunsCompareConfigureLineChartPreview = connect(mapStateToProps, undefined, undefined, {\n  areStatesEqual: (nextState, prevState) =>\n    nextState.entities.metricsByRunUuid === prevState.entities.metricsByRunUuid,\n})(RunsCompareConfigureLineChartPreviewImpl);\n","import { CompareChartRunData } from '../charts/CompareRunsCharts.common';\nimport LazyParallelCoordinatesPlot, { processData } from '../charts/LazyParallelCoordinatesPlot';\nimport { useCompareRunsTooltip } from '../hooks/useCompareRunsTooltip';\nimport { RunsCompareParallelCardConfig } from '../runs-compare.types';\n\nexport const RunsCompareConfigureParallelChartPreview = ({\n  previewData,\n  cardConfig,\n}: {\n  previewData: CompareChartRunData[];\n  cardConfig: RunsCompareParallelCardConfig;\n}) => {\n  const selectedParamsCount = cardConfig.selectedParams?.length || 0;\n  const selectedMetricsCount = cardConfig.selectedMetrics?.length || 0;\n\n  const isConfigured = selectedParamsCount + selectedMetricsCount >= 2;\n\n  const { setTooltip, resetTooltip } = useCompareRunsTooltip(cardConfig);\n\n  const filteredData = isConfigured\n    ? processData(previewData, cardConfig.selectedParams, cardConfig.selectedMetrics)\n    : [];\n\n  if (!isConfigured) {\n    return (\n      <div css={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        Select at least two metrics and params first\n      </div>\n    );\n  }\n\n  return filteredData.length ? (\n    /* Avoid displaying empty set, otherwise parcoord-es crashes */\n    <LazyParallelCoordinatesPlot\n      selectedMetrics={cardConfig.selectedMetrics}\n      selectedParams={cardConfig.selectedParams}\n      data={filteredData}\n      axesRotateThreshold={6}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n    />\n  ) : null;\n};\n","import { useCallback, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n  extractCanonicalSortKey,\n  isCanonicalSortKeyOfType,\n  makeCanonicalSortKey,\n} from '../../experiment-page/utils/experimentPage.column-utils';\nimport type { RunsCompareCardConfig, RunsCompareContourCardConfig } from '../runs-compare.types';\nimport {\n  RunsCompareMetricParamSelect,\n  RunsCompareConfigureField,\n  RunsCompareRunNumberSelect,\n} from './RunsCompareConfigure.common';\n\ntype ValidAxis = keyof Pick<RunsCompareContourCardConfig, 'xaxis' | 'yaxis' | 'zaxis'>;\n\n/**\n * Form containing configuration controls for Contour runs compare chart.\n */\nexport const RunsCompareConfigureContourChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  paramKeyList,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  state: RunsCompareContourCardConfig;\n  onStateChange: (setter: (current: RunsCompareCardConfig) => RunsCompareContourCardConfig) => void;\n}) => {\n  const { formatMessage } = useIntl();\n\n  /**\n   * Callback for updating X or Y axis\n   */\n  const updateAxis = useCallback(\n    (canonicalKey: string, axis: ValidAxis) => {\n      const type = isCanonicalSortKeyOfType(canonicalKey, 'METRIC') ? 'METRIC' : 'PARAM';\n      const key = extractCanonicalSortKey(canonicalKey, type);\n      onStateChange((current) => ({\n        ...(current as RunsCompareContourCardConfig),\n        [axis]: { key, type },\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * Callback for updating run count\n   */\n  const updateVisibleRunCount = useCallback(\n    (runsCountToCompare: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsCompareContourCardConfig),\n        runsCountToCompare,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * If somehow axes are not predetermined, automatically\n   * select the first metric/param so it's not empty\n   */\n  useEffect(() => {\n    const firstMetric = metricKeyList?.[0];\n    const firstParam = paramKeyList?.[0];\n    if (!state.xaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'xaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'xaxis');\n      }\n    }\n    if (!state.yaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'yaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'yaxis');\n      }\n    }\n    if (!state.zaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'zaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'zaxis');\n      }\n    }\n  }, [state.xaxis, state.yaxis, state.zaxis, updateAxis, metricKeyList, paramKeyList]);\n\n  return (\n    <>\n      <RunsCompareConfigureField\n        title={formatMessage({\n          defaultMessage: 'X axis',\n          description:\n            'Label for X axis in Contour chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsCompareMetricParamSelect\n          value={state.xaxis.key ? makeCanonicalSortKey(state.xaxis.type, state.xaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'xaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsCompareConfigureField>\n      <RunsCompareConfigureField\n        title={formatMessage({\n          defaultMessage: 'Y axis',\n          description:\n            'Label for Y axis in Contour chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsCompareMetricParamSelect\n          value={state.yaxis.key ? makeCanonicalSortKey(state.yaxis.type, state.yaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'yaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsCompareConfigureField>\n      <RunsCompareConfigureField\n        title={formatMessage({\n          defaultMessage: 'Z axis',\n          description:\n            'Label for Z axis in Contour chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsCompareMetricParamSelect\n          value={state.zaxis.key ? makeCanonicalSortKey(state.zaxis.type, state.zaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'zaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsCompareConfigureField>\n      <RunsCompareRunNumberSelect\n        value={state.runsCountToCompare}\n        onChange={updateVisibleRunCount}\n        options={[5, 10, 20]}\n      />\n    </>\n  );\n};\n","import { useCallback, useEffect } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n  extractCanonicalSortKey,\n  isCanonicalSortKeyOfType,\n  makeCanonicalSortKey,\n} from '../../experiment-page/utils/experimentPage.column-utils';\nimport type { RunsCompareCardConfig, RunsCompareScatterCardConfig } from '../runs-compare.types';\nimport {\n  RunsCompareMetricParamSelect,\n  RunsCompareConfigureField,\n  RunsCompareRunNumberSelect,\n  runsCompareRunCountDefaultOptions,\n} from './RunsCompareConfigure.common';\n\ntype ValidAxis = keyof Pick<RunsCompareScatterCardConfig, 'xaxis' | 'yaxis'>;\n\nconst scatterPlotDefaultOptions = runsCompareRunCountDefaultOptions;\nscatterPlotDefaultOptions.push(\n  {\n    value: 100,\n    label: (\n      <FormattedMessage\n        defaultMessage='100'\n        description='Label for 100 first runs visible in run count selector within runs compare configuration modal'\n      />\n    ),\n  },\n  {\n    value: 250,\n    label: (\n      <FormattedMessage\n        defaultMessage='250'\n        description='Label for 250 first runs visible in run count selector within runs compare configuration modal'\n      />\n    ),\n  },\n  {\n    value: 500,\n    label: (\n      <FormattedMessage\n        defaultMessage='500'\n        description='Label for 500 first runs visible in run count selector within runs compare configuration modal'\n      />\n    ),\n  },\n);\n\n/**\n * Form containing configuration controls for scatter runs compare chart.\n */\nexport const RunsCompareConfigureScatterChart = ({\n  state,\n  onStateChange,\n  metricKeyList,\n  paramKeyList,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  state: RunsCompareScatterCardConfig;\n  onStateChange: (setter: (current: RunsCompareCardConfig) => RunsCompareScatterCardConfig) => void;\n}) => {\n  const { formatMessage } = useIntl();\n\n  /**\n   * Callback for updating X or Y axis\n   */\n  const updateAxis = useCallback(\n    (canonicalKey: string, axis: ValidAxis) => {\n      const type = isCanonicalSortKeyOfType(canonicalKey, 'METRIC') ? 'METRIC' : 'PARAM';\n      const key = extractCanonicalSortKey(canonicalKey, type);\n      onStateChange((current) => ({\n        ...(current as RunsCompareScatterCardConfig),\n        [axis]: { key, type },\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * Callback for updating run count\n   */\n  const updateVisibleRunCount = useCallback(\n    (runsCountToCompare: number) => {\n      onStateChange((current) => ({\n        ...(current as RunsCompareScatterCardConfig),\n        runsCountToCompare,\n      }));\n    },\n    [onStateChange],\n  );\n\n  /**\n   * If somehow axes are not predetermined, automatically\n   * select the first metric/param so it's not empty\n   */\n  useEffect(() => {\n    const firstMetric = metricKeyList?.[0];\n    const firstParam = paramKeyList?.[0];\n    if (!state.xaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'xaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'xaxis');\n      }\n    }\n    if (!state.yaxis?.key) {\n      if (firstMetric) {\n        updateAxis(makeCanonicalSortKey('METRIC', firstMetric), 'yaxis');\n      } else if (firstParam) {\n        updateAxis(makeCanonicalSortKey('PARAM', firstParam), 'yaxis');\n      }\n    }\n  }, [state.xaxis, state.yaxis, updateAxis, metricKeyList, paramKeyList]);\n\n  return (\n    <>\n      <RunsCompareConfigureField\n        title={formatMessage({\n          defaultMessage: 'X axis',\n          description:\n            'Label for X axis in scatter chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsCompareMetricParamSelect\n          value={state.xaxis.key ? makeCanonicalSortKey(state.xaxis.type, state.xaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'xaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsCompareConfigureField>\n      <RunsCompareConfigureField\n        title={formatMessage({\n          defaultMessage: 'Y axis',\n          description:\n            'Label for Y axis in scatter chart configurator in compare runs chart config modal',\n        })}\n      >\n        <RunsCompareMetricParamSelect\n          value={state.yaxis.key ? makeCanonicalSortKey(state.yaxis.type, state.yaxis.key) : ''}\n          onChange={(value) => {\n            updateAxis(value, 'yaxis');\n          }}\n          paramKeyList={paramKeyList}\n          metricKeyList={metricKeyList}\n        />\n      </RunsCompareConfigureField>\n      <RunsCompareRunNumberSelect\n        value={state.runsCountToCompare}\n        onChange={updateVisibleRunCount}\n        options={scatterPlotDefaultOptions}\n      />\n    </>\n  );\n};\n","import {\n  Button,\n  CloseIcon,\n  PinIcon,\n  PinFillIcon,\n  Tooltip,\n  VisibleIcon,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport Routes from '../../routes';\nimport { useExperimentIds } from '../experiment-page/hooks/useExperimentIds';\nimport { CompareChartRunData, truncateString } from './charts/CompareRunsCharts.common';\nimport { CompareRunsTooltipBodyProps } from './hooks/useCompareRunsTooltip';\nimport {\n  RunsCompareBarCardConfig,\n  RunsCompareCardConfig,\n  RunsCompareChartType,\n  RunsCompareScatterCardConfig,\n  RunsCompareContourCardConfig,\n  RunsCompareLineCardConfig,\n  RunsCompareParallelCardConfig,\n} from './runs-compare.types';\n\ninterface LineXAxisValues {\n  value: number;\n  index: number;\n  label: string;\n}\n\ninterface CompareChartContextMenuContentDataType {\n  runs: CompareChartRunData[];\n  onTogglePin?: (runUuid: string) => void;\n  onHideRun?: (runUuid: string) => void;\n}\n\ntype CompareChartContextMenuHoverDataType = RunsCompareCardConfig;\n\nconst normalizeValue = (value: string | number, decimalPlaces = 6) => {\n  if (typeof value === 'number') {\n    return value.toFixed(decimalPlaces);\n  }\n  // cast to numbers that have for values that have been previously stringified\n  const castToNumber = Number(value);\n  if (!isNaN(castToNumber)) {\n    return castToNumber.toFixed(decimalPlaces);\n  }\n  // truncate strings that are too long\n  return truncateString(value, 8);\n};\n\nconst createBarChartValuesBox = (\n  cardConfig: RunsCompareBarCardConfig,\n  activeRun: CompareChartRunData,\n) => {\n  const { metricKey } = cardConfig;\n  const metric = activeRun?.metrics[metricKey];\n\n  if (!metric) {\n    return null;\n  }\n\n  return (\n    <div css={styles.value}>\n      <strong>{metric.key}:</strong> {normalizeValue(metric.value)}\n    </div>\n  );\n};\n\nconst createScatterChartValuesBox = (\n  cardConfig: RunsCompareScatterCardConfig,\n  activeRun: CompareChartRunData,\n) => {\n  const { xaxis, yaxis } = cardConfig;\n  const xKey = xaxis.key;\n  const yKey = yaxis.key;\n\n  const xValue =\n    xaxis.type === 'METRIC' ? activeRun.metrics[xKey]?.value : activeRun.params[xKey]?.value;\n\n  const yValue =\n    yaxis.type === 'METRIC' ? activeRun.metrics[yKey]?.value : activeRun.params[yKey]?.value;\n\n  return (\n    <>\n      {xValue && (\n        <div css={styles.value}>\n          <strong>X ({xKey}):</strong> {normalizeValue(xValue)}\n        </div>\n      )}\n      {yValue && (\n        <div css={styles.value}>\n          <strong>Y ({yKey}):</strong> {normalizeValue(yValue)}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst createContourChartValuesBox = (\n  cardConfig: RunsCompareContourCardConfig,\n  activeRun: CompareChartRunData,\n) => {\n  const { xaxis, yaxis, zaxis } = cardConfig;\n  const xKey = xaxis.key;\n  const yKey = yaxis.key;\n  const zKey = zaxis.key;\n\n  const xValue =\n    xaxis.type === 'METRIC' ? activeRun.metrics[xKey]?.value : activeRun.params[xKey]?.value;\n\n  const yValue =\n    yaxis.type === 'METRIC' ? activeRun.metrics[yKey]?.value : activeRun.params[yKey]?.value;\n\n  const zValue =\n    zaxis.type === 'METRIC' ? activeRun.metrics[zKey]?.value : activeRun.params[zKey]?.value;\n\n  return (\n    <>\n      {xValue && (\n        <div css={styles.value}>\n          <strong>X ({xKey}):</strong> {normalizeValue(xValue)}\n        </div>\n      )}\n      {yValue && (\n        <div css={styles.value}>\n          <strong>Y ({yKey}):</strong> {normalizeValue(yValue)}\n        </div>\n      )}\n      {zValue && (\n        <div css={styles.value}>\n          <strong>Z ({zKey}):</strong> {normalizeValue(zValue)}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst createLineChartValuesBox = (\n  cardConfig: RunsCompareLineCardConfig,\n  activeRun: CompareChartRunData,\n  xAxisValues?: LineXAxisValues,\n) => {\n  const { metricKey } = cardConfig;\n  const metric =\n    // If there's available value from x axis (step or time), extract entry from\n    // metric history instead of latest metric.\n    (xAxisValues && activeRun?.metricsHistory?.[metricKey]?.[xAxisValues?.index]) ??\n    activeRun?.metrics[metricKey];\n\n  if (!metric) {\n    return null;\n  }\n\n  return (\n    <>\n      {xAxisValues && (\n        <div css={styles.value}>\n          <strong>{xAxisValues.label}:</strong> {xAxisValues.value}\n        </div>\n      )}\n      <div css={styles.value}>\n        <strong>{metric.key}:</strong> {normalizeValue(metric.value)}\n      </div>\n    </>\n  );\n};\n\nconst createParallelChartValuesBox = (\n  cardConfig: RunsCompareParallelCardConfig,\n  activeRun: CompareChartRunData,\n  isHovering?: boolean,\n) => {\n  const { selectedParams, selectedMetrics } = cardConfig as RunsCompareParallelCardConfig;\n  const paramsList = selectedParams.map((paramKey) => {\n    const param = activeRun?.params[paramKey];\n    if (param) {\n      return (\n        <div>\n          <strong>{param.key}:</strong> {normalizeValue(param.value)}\n        </div>\n      );\n    }\n    return true;\n  });\n  const metricsList = selectedMetrics.map((metricKey) => {\n    const metric = activeRun?.metrics[metricKey];\n    if (metric) {\n      return (\n        <div>\n          <strong>{metric.key}:</strong> {normalizeValue(metric.value)}\n        </div>\n      );\n    }\n    return true;\n  });\n\n  // show only first 3 params and primary metric if hovering, else show all\n  if (isHovering) {\n    return (\n      <>\n        {paramsList.slice(0, 3)}\n        {metricsList[metricsList.length - 1]}\n        {(paramsList.length > 3 || metricsList.length > 1) && <div>...</div>}\n      </>\n    );\n  } else {\n    return (\n      <>\n        {paramsList}\n        {metricsList}\n      </>\n    );\n  }\n};\n\n/**\n * Internal component that displays metrics/params - its final design\n * is a subject to change\n */\nconst ValuesBox = ({\n  activeRun,\n  cardConfig,\n  isHovering,\n  xAxisValues,\n}: {\n  activeRun: CompareChartRunData;\n  cardConfig: RunsCompareCardConfig;\n  isHovering?: boolean;\n  xAxisValues?: LineXAxisValues;\n}) => {\n  if (cardConfig.type === RunsCompareChartType.BAR) {\n    return createBarChartValuesBox(cardConfig as RunsCompareBarCardConfig, activeRun);\n  }\n\n  if (cardConfig.type === RunsCompareChartType.SCATTER) {\n    return createScatterChartValuesBox(cardConfig as RunsCompareScatterCardConfig, activeRun);\n  }\n\n  if (cardConfig.type === RunsCompareChartType.CONTOUR) {\n    return createContourChartValuesBox(cardConfig as RunsCompareContourCardConfig, activeRun);\n  }\n\n  if (cardConfig.type === RunsCompareChartType.LINE) {\n    return createLineChartValuesBox(\n      cardConfig as RunsCompareLineCardConfig,\n      activeRun,\n      xAxisValues,\n    );\n  }\n\n  if (cardConfig.type === RunsCompareChartType.PARALLEL) {\n    return createParallelChartValuesBox(\n      cardConfig as RunsCompareParallelCardConfig,\n      activeRun,\n      isHovering,\n    );\n  }\n\n  return null;\n};\n\nexport const RunsCompareTooltipBody = ({\n  closeContextMenu,\n  contextData,\n  additionalAxisData,\n  hoverData: cardConfig,\n  runUuid,\n  isHovering,\n}: CompareRunsTooltipBodyProps<\n  CompareChartContextMenuContentDataType,\n  CompareChartContextMenuHoverDataType\n>) => {\n  const { runs, onTogglePin, onHideRun } = contextData;\n  const [experimentId] = useExperimentIds();\n  const activeRun = runs?.find((run) => run.runInfo.run_uuid === runUuid);\n\n  if (!activeRun) {\n    return null;\n  }\n\n  return (\n    <div>\n      <div css={styles.contentWrapper}>\n        <div css={styles.header}>\n          <div css={styles.colorPill} style={{ backgroundColor: activeRun.color }} />\n          <Link\n            to={Routes.getRunPageRoute(experimentId, runUuid)}\n            target='_blank'\n            css={styles.runLink}\n            onClick={closeContextMenu}\n          >\n            {activeRun.runInfo.run_name || activeRun.runInfo.run_uuid}\n          </Link>\n        </div>\n        {!isHovering && <Button size='small' onClick={closeContextMenu} icon={<CloseIcon />} />}\n      </div>\n\n      <ValuesBox\n        isHovering={isHovering}\n        activeRun={activeRun}\n        cardConfig={cardConfig}\n        xAxisValues={additionalAxisData}\n      />\n\n      <div css={styles.actionsWrapper}>\n        {activeRun.pinnable && onTogglePin && (\n          <Tooltip\n            title={\n              activeRun.pinned ? (\n                <FormattedMessage\n                  defaultMessage='Unpin run'\n                  description='A tooltip for the pin icon button in the runs table next to the pinned run'\n                />\n              ) : (\n                <FormattedMessage\n                  defaultMessage='Click to pin the run'\n                  description='A tooltip for the pin icon button in the runs chart tooltip next to the not pinned run'\n                />\n              )\n            }\n            placement='bottom'\n          >\n            <Button\n              size='small'\n              onClick={() => {\n                onTogglePin(runUuid);\n                closeContextMenu();\n              }}\n              icon={activeRun.pinned ? <PinFillIcon /> : <PinIcon />}\n            />\n          </Tooltip>\n        )}\n        {onHideRun && (\n          <Tooltip\n            title={\n              <FormattedMessage\n                defaultMessage='Click to hide the run'\n                description='A tooltip for the \"hide\" icon button in the runs chart tooltip'\n              />\n            }\n            placement='bottom'\n          >\n            <Button\n              data-testid='experiment-view-compare-runs-tooltip-visibility-button'\n              size='small'\n              onClick={() => {\n                onHideRun(runUuid);\n                closeContextMenu();\n              }}\n              icon={<VisibleIcon />}\n            />\n          </Tooltip>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  runLink: (theme: Theme) => ({\n    color: theme.colors.primary,\n    '&:hover': {},\n  }),\n  actionsWrapper: {\n    marginTop: 8,\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n  },\n  header: {\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n  },\n  value: {\n    maxWidth: 300,\n    whiteSpace: 'nowrap' as const,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n  contentWrapper: {\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n    marginBottom: 12,\n    justifyContent: 'space-between',\n    height: 24,\n  },\n  colorPill: { width: 12, height: 12, borderRadius: '100%' },\n};\n","/**\n * TODO: implement actual UI for this modal, it's a crude placeholder with minimal logic for now\n */\nimport { Modal, Select } from '@databricks/design-system';\nimport { Interpolation, Theme } from '@emotion/react';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n  RunsCompareBarCardConfig,\n  RunsCompareCardConfig,\n  RunsCompareChartType,\n  RunsCompareLineCardConfig,\n  RunsCompareContourCardConfig,\n  RunsCompareScatterCardConfig,\n  RunsCompareParallelCardConfig,\n} from './runs-compare.types';\n\nimport { ReactComponent as ChartBarIcon } from '../../../common/static/chart-bar.svg';\nimport { ReactComponent as ChartContourIcon } from '../../../common/static/chart-contour.svg';\nimport { ReactComponent as ChartLineIcon } from '../../../common/static/chart-line.svg';\nimport { ReactComponent as ChartParallelIcon } from '../../../common/static/chart-parallel.svg';\nimport { ReactComponent as ChartScatterIcon } from '../../../common/static/chart-scatter.svg';\nimport { RunsCompareConfigureBarChart } from './config/RunsCompareConfigureBarChart';\nimport { RunsCompareConfigureParallelChart } from './config/RunsCompareConfigureParallelChart';\nimport type { CompareChartRunData } from './charts/CompareRunsCharts.common';\nimport { RunsCompareConfigureField } from './config/RunsCompareConfigure.common';\nimport { RunsCompareConfigureLineChart } from './config/RunsCompareConfigureLineChart';\nimport { RunsCompareConfigureLineChartPreview } from './config/RunsCompareConfigureLineChart.preview';\nimport { RunsCompareConfigureBarChartPreview } from './config/RunsCompareConfigureBarChart.preview';\nimport { RunsCompareConfigureContourChartPreview } from './config/RunsCompareConfigureContourChart.preview';\nimport { RunsCompareConfigureScatterChartPreview } from './config/RunsCompareConfigureScatterChart.preview';\nimport { RunsCompareConfigureParallelChartPreview } from './config/RunsCompareConfigureParallelChart.preview';\nimport { RunsCompareConfigureContourChart } from './config/RunsCompareConfigureContourChart';\nimport { RunsCompareConfigureScatterChart } from './config/RunsCompareConfigureScatterChart';\nimport { RunsCompareTooltipBody } from './RunsCompareTooltipBody';\nimport { CompareRunsTooltipWrapper } from './hooks/useCompareRunsTooltip';\n\nconst previewComponentsMap: Record<\n  RunsCompareChartType,\n  React.FC<{\n    previewData: CompareChartRunData[];\n    cardConfig: any;\n  }>\n> = {\n  [RunsCompareChartType.BAR]: RunsCompareConfigureBarChartPreview,\n  [RunsCompareChartType.CONTOUR]: RunsCompareConfigureContourChartPreview,\n  [RunsCompareChartType.LINE]: RunsCompareConfigureLineChartPreview,\n  [RunsCompareChartType.PARALLEL]: RunsCompareConfigureParallelChartPreview,\n  [RunsCompareChartType.SCATTER]: RunsCompareConfigureScatterChartPreview,\n};\n\nexport const RunsCompareConfigureModal = ({\n  onCancel,\n  onSubmit,\n  config,\n  chartRunData,\n  metricKeyList,\n  paramKeyList,\n}: {\n  metricKeyList: string[];\n  paramKeyList: string[];\n  config: RunsCompareCardConfig;\n  chartRunData: CompareChartRunData[];\n  onCancel: () => void;\n  onSubmit: (formData: Partial<RunsCompareCardConfig>) => void;\n}) => {\n  const [currentFormState, setCurrentFormState] = useState<RunsCompareCardConfig>(config);\n\n  const isEditing = Boolean(currentFormState.uuid);\n\n  const updateChartType = useCallback((type?: RunsCompareChartType) => {\n    if (!type) {\n      return;\n    }\n    const emptyChartCard = RunsCompareCardConfig.getEmptyChartCardByType(type);\n    if (emptyChartCard) {\n      setCurrentFormState(emptyChartCard);\n    }\n  }, []);\n\n  const renderConfigOptionsforChartType = (type?: RunsCompareChartType) => {\n    if (type === RunsCompareChartType.BAR) {\n      return (\n        <RunsCompareConfigureBarChart\n          metricKeyList={metricKeyList}\n          state={currentFormState as RunsCompareBarCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (type === RunsCompareChartType.CONTOUR) {\n      return (\n        <RunsCompareConfigureContourChart\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          state={currentFormState as RunsCompareContourCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (type === RunsCompareChartType.LINE) {\n      return (\n        <RunsCompareConfigureLineChart\n          metricKeyList={metricKeyList}\n          state={currentFormState as RunsCompareLineCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (type === RunsCompareChartType.PARALLEL) {\n      return (\n        <RunsCompareConfigureParallelChart\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          state={currentFormState as RunsCompareParallelCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    if (type === RunsCompareChartType.SCATTER) {\n      return (\n        <RunsCompareConfigureScatterChart\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          state={currentFormState as RunsCompareScatterCardConfig}\n          onStateChange={setCurrentFormState}\n        />\n      );\n    }\n    return null;\n  };\n\n  const previewData = useMemo(\n    () => chartRunData.slice(0, currentFormState.runsCountToCompare).reverse(),\n    [chartRunData, currentFormState.runsCountToCompare],\n  );\n\n  const renderPreviewChartType = (type?: RunsCompareChartType) => {\n    if (!type) {\n      return null;\n    }\n    const PreviewComponent = previewComponentsMap[type];\n    if (!PreviewComponent) {\n      return null;\n    }\n    return <PreviewComponent previewData={previewData} cardConfig={currentFormState} />;\n  };\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Modal\n      visible\n      onCancel={onCancel}\n      onOk={() => onSubmit(currentFormState)}\n      title={\n        isEditing\n          ? formatMessage({\n              defaultMessage: 'Edit chart',\n              description: 'Title of the modal when editing a runs comparison chart',\n            })\n          : formatMessage({\n              defaultMessage: 'Add new chart',\n              description: 'Title of the modal when adding a new runs comparison chart',\n            })\n      }\n      okButtonProps={{ 'data-testid': 'experiment-view-compare-runs-chart-modal-confirm' }}\n      cancelText={formatMessage({\n        defaultMessage: 'Cancel',\n        description:\n          'Cancel button label within a modal for adding/editing a new runs comparison chart',\n      })}\n      okText={\n        isEditing\n          ? formatMessage({\n              defaultMessage: 'Save changes',\n              description:\n                'Confirm button label within a modal when editing a runs comparison chart',\n            })\n          : formatMessage({\n              defaultMessage: 'Add chart',\n              description:\n                'Confirm button label within a modal when adding a new runs comparison chart',\n            })\n      }\n      size='wide'\n      css={{ width: 1280 }}\n    >\n      <div css={styles.wrapper}>\n        <div>\n          {!isEditing && (\n            <RunsCompareConfigureField title='Type'>\n              <Select<RunsCompareChartType>\n                css={{ width: '100%' }}\n                value={currentFormState.type}\n                onChange={updateChartType}\n              >\n                <Select.Option value={RunsCompareChartType.BAR}>\n                  <div css={styles.chartTypeOption}>\n                    <ChartBarIcon />\n                    Bar chart\n                  </div>\n                </Select.Option>\n                <Select.Option value={RunsCompareChartType.SCATTER}>\n                  <div css={styles.chartTypeOption}>\n                    <ChartScatterIcon />\n                    Scatter chart\n                  </div>\n                </Select.Option>\n                <Select.Option value={RunsCompareChartType.LINE}>\n                  <div css={styles.chartTypeOption}>\n                    <ChartLineIcon />\n                    Line chart\n                  </div>\n                </Select.Option>\n                <Select.Option value={RunsCompareChartType.PARALLEL}>\n                  <div css={styles.chartTypeOption}>\n                    <ChartParallelIcon />\n                    Parallel coordinates\n                  </div>\n                </Select.Option>\n                <Select.Option value={RunsCompareChartType.CONTOUR}>\n                  <div css={styles.chartTypeOption}>\n                    <ChartContourIcon />\n                    Contour chart\n                  </div>\n                </Select.Option>\n              </Select>\n            </RunsCompareConfigureField>\n          )}\n          {renderConfigOptionsforChartType(currentFormState.type)}\n        </div>\n        <CompareRunsTooltipWrapper\n          contextData={{ runs: chartRunData }}\n          component={RunsCompareTooltipBody}\n          hoverOnly\n        >\n          <div css={styles.chartWrapper}>{renderPreviewChartType(currentFormState.type)}</div>\n        </CompareRunsTooltipWrapper>\n      </div>\n    </Modal>\n  );\n};\n\nconst styles = {\n  chartTypeOption: (theme: Theme) =>\n    ({\n      display: 'grid',\n      gridTemplateColumns: `${theme.general.iconSize + theme.spacing.xs}px 1fr`,\n      gap: theme.spacing.xs,\n      alignItems: 'center',\n    } as Interpolation<Theme>),\n  wrapper: {\n    // TODO: wait for modal dimensions decision\n    display: 'grid',\n    gridTemplateColumns: '300px 1fr',\n    gap: 32,\n  } as Interpolation<Theme>,\n  field: {\n    // TODO: wait for modal dimensions decision\n    display: 'grid',\n    gridTemplateColumns: '80px 1fr',\n    marginBottom: 16,\n  } as Interpolation<Theme>,\n  chartWrapper: {\n    height: 400,\n  },\n};\n","import { barChartCardDefaultMargin } from '../cards/RunsCompareBarChartCard';\nimport { CompareChartRunData } from '../charts/CompareRunsCharts.common';\nimport { CompareRunsMetricsBarPlot } from '../charts/CompareRunsMetricsBarPlot';\nimport { useCompareRunsTooltip } from '../hooks/useCompareRunsTooltip';\nimport { RunsCompareBarCardConfig } from '../runs-compare.types';\n\nexport const RunsCompareConfigureBarChartPreview = ({\n  previewData,\n  cardConfig,\n}: {\n  previewData: CompareChartRunData[];\n  cardConfig: RunsCompareBarCardConfig;\n}) => {\n  const { resetTooltip, setTooltip } = useCompareRunsTooltip(cardConfig);\n\n  return (\n    <CompareRunsMetricsBarPlot\n      useDefaultHoverBox={false}\n      displayRunNames={false}\n      displayMetricKey={false}\n      metricKey={cardConfig.metricKey}\n      runsData={previewData}\n      margin={barChartCardDefaultMargin}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n    />\n  );\n};\n","import { CompareChartRunData } from '../charts/CompareRunsCharts.common';\nimport { CompareRunsContourPlot } from '../charts/CompareRunsContourPlot';\nimport { useCompareRunsTooltip } from '../hooks/useCompareRunsTooltip';\nimport { RunsCompareContourCardConfig } from '../runs-compare.types';\n\nexport const RunsCompareConfigureContourChartPreview = ({\n  previewData,\n  cardConfig,\n}: {\n  previewData: CompareChartRunData[];\n  cardConfig: RunsCompareContourCardConfig;\n}) => {\n  const { resetTooltip, setTooltip } = useCompareRunsTooltip(cardConfig);\n\n  return (\n    <CompareRunsContourPlot\n      xAxis={cardConfig.xaxis}\n      yAxis={cardConfig.yaxis}\n      zAxis={cardConfig.zaxis}\n      runsData={previewData}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n      useDefaultHoverBox={false}\n    />\n  );\n};\n","import { CompareChartRunData } from '../charts/CompareRunsCharts.common';\nimport { CompareRunsScatterPlot } from '../charts/CompareRunsScatterPlot';\nimport { useCompareRunsTooltip } from '../hooks/useCompareRunsTooltip';\nimport { RunsCompareScatterCardConfig } from '../runs-compare.types';\n\nexport const RunsCompareConfigureScatterChartPreview = ({\n  previewData,\n  cardConfig,\n}: {\n  previewData: CompareChartRunData[];\n  cardConfig: RunsCompareScatterCardConfig;\n}) => {\n  const { resetTooltip, setTooltip } = useCompareRunsTooltip(cardConfig);\n\n  return (\n    <CompareRunsScatterPlot\n      xAxis={cardConfig.xaxis}\n      yAxis={cardConfig.yaxis}\n      runsData={previewData}\n      onHover={setTooltip}\n      onUnhover={resetTooltip}\n      useDefaultHoverBox={false}\n    />\n  );\n};\n","import { Skeleton } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { connect } from 'react-redux';\nimport type {\n  ExperimentStoreEntities,\n  KeyValueEntity,\n  MetricEntitiesByName,\n  MetricHistoryByName,\n  UpdateExperimentSearchFacetsFn,\n} from '../../types';\nimport { RunRowType } from '../experiment-page/utils/experimentPage.row-types';\nimport { RunsCompareCardConfig } from './runs-compare.types';\nimport type { RunsCompareChartType } from './runs-compare.types';\nimport { RunsCompareAddChartMenu } from './RunsCompareAddChartMenu';\nimport { RunsCompareCharts } from './RunsCompareCharts';\nimport { SearchExperimentRunsFacetsState } from '../experiment-page/models/SearchExperimentRunsFacetsState';\nimport { RunsCompareConfigureModal } from './RunsCompareConfigureModal';\nimport { getUUID } from '../../../common/utils/ActionUtils';\nimport type { CompareChartRunData } from './charts/CompareRunsCharts.common';\nimport {\n  AUTOML_EVALUATION_METRIC_TAG,\n  MLFLOW_EXPERIMENT_PRIMARY_METRIC_NAME,\n} from '../../constants';\nimport { RunsCompareTooltipBody } from './RunsCompareTooltipBody';\nimport { CompareRunsTooltipWrapper } from './hooks/useCompareRunsTooltip';\nimport { useMultipleChartsMetricHistory } from './hooks/useMultipleChartsMetricHistory';\n\nexport interface RunsCompareProps {\n  comparedRuns: RunRowType[];\n  isLoading: boolean;\n  metricKeyList: string[];\n  paramKeyList: string[];\n  experimentTags: Record<string, KeyValueEntity>;\n  searchFacetsState: SearchExperimentRunsFacetsState;\n  updateSearchFacets: UpdateExperimentSearchFacetsFn;\n\n  // Provided by redux connect().\n  paramsByRunUuid: Record<string, Record<string, KeyValueEntity>>;\n  latestMetricsByRunUuid: Record<string, MetricEntitiesByName>;\n  metricsByRunUuid: Record<string, MetricHistoryByName>;\n}\n\n/**\n * Component displaying comparison charts and differences (and in future artifacts) between experiment runs.\n * Intended to be mounted next to runs table.\n *\n * This component extracts params/metrics from redux store by itself for quicker access, however\n * it needs a provided list of compared run entries using same model as runs table.\n */\nexport const RunsCompareImpl = ({\n  comparedRuns,\n  isLoading,\n  searchFacetsState,\n  updateSearchFacets,\n  latestMetricsByRunUuid,\n  metricsByRunUuid,\n  paramsByRunUuid,\n  metricKeyList,\n  paramKeyList,\n  experimentTags,\n}: RunsCompareProps) => {\n  const [initiallyLoaded, setInitiallyLoaded] = useState(false);\n  const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsCompareCardConfig | null>(\n    null,\n  );\n\n  const addNewChartCard = useCallback((type: RunsCompareChartType) => {\n    // TODO: pass existing runs data and get pre-configured initial setup for every chart type\n    setConfiguredCardConfig(RunsCompareCardConfig.getEmptyChartCardByType(type));\n  }, []);\n\n  const startEditChart = useCallback((chartCard: RunsCompareCardConfig) => {\n    setConfiguredCardConfig(chartCard);\n  }, []);\n\n  useEffect(() => {\n    if (!initiallyLoaded && !isLoading) {\n      setInitiallyLoaded(true);\n    }\n  }, [initiallyLoaded, isLoading]);\n\n  const primaryMetricKey = useMemo(() => {\n    const automlEntry = experimentTags[AUTOML_EVALUATION_METRIC_TAG];\n    const mlflowPrimaryEntry = experimentTags[MLFLOW_EXPERIMENT_PRIMARY_METRIC_NAME];\n    return automlEntry?.value || mlflowPrimaryEntry?.value || metricKeyList[0] || '';\n  }, [experimentTags, metricKeyList]);\n\n  // Set chart cards to the user-facing base config if there is no other information.\n  useEffect(() => {\n    if (!searchFacetsState.compareRunCharts) {\n      updateSearchFacets(\n        (current) => ({\n          ...current,\n          compareRunCharts: RunsCompareCardConfig.getBaseChartConfigs(primaryMetricKey),\n        }),\n        { replaceHistory: true },\n      );\n    }\n  }, [searchFacetsState.compareRunCharts, primaryMetricKey, updateSearchFacets]);\n\n  const onTogglePin = useCallback(\n    (runUuid: string) => {\n      updateSearchFacets((existingFacets) => ({\n        ...existingFacets,\n        runsPinned: !existingFacets.runsPinned.includes(runUuid)\n          ? [...existingFacets.runsPinned, runUuid]\n          : existingFacets.runsPinned.filter((r) => r !== runUuid),\n      }));\n    },\n    [updateSearchFacets],\n  );\n\n  const onHideRun = useCallback(\n    (runUuid: string) => {\n      updateSearchFacets((existingFacets) => ({\n        ...existingFacets,\n        runsHidden: [...existingFacets.runsHidden, runUuid],\n      }));\n    },\n    [updateSearchFacets],\n  );\n\n  const submitForm = (configuredCard: Partial<RunsCompareCardConfig>) => {\n    // TODO: implement validation\n    const serializedCard = RunsCompareCardConfig.serialize({\n      ...configuredCard,\n      uuid: getUUID(),\n    });\n\n    // Creating new chart\n    if (!configuredCard.uuid) {\n      updateSearchFacets((current) => ({\n        ...current,\n        // This condition ensures that chart collection will remain undefined if not set previously\n        compareRunCharts: current.compareRunCharts && [...current.compareRunCharts, serializedCard],\n      }));\n    } /* Editing existing chart */ else {\n      updateSearchFacets((current) => ({\n        ...current,\n        compareRunCharts: current.compareRunCharts?.map((existingChartCard) => {\n          if (existingChartCard.uuid === configuredCard.uuid) {\n            return serializedCard;\n          }\n          return existingChartCard;\n        }),\n      }));\n    }\n\n    // Hide the modal\n    setConfiguredCardConfig(null);\n  };\n\n  const removeChart = (configToDelete: RunsCompareCardConfig) => {\n    updateSearchFacets((current) => ({\n      ...current,\n      compareRunCharts: current.compareRunCharts?.filter(\n        (setup) => setup.uuid !== configToDelete.uuid,\n      ),\n    }));\n  };\n\n  /**\n   * Dataset generated for all charts in a single place\n   */\n  const chartRunData: CompareChartRunData[] = useMemo(\n    () =>\n      comparedRuns\n        .filter((run) => !run.hidden)\n        .map((run) => ({\n          runInfo: run.runInfo,\n          metrics: latestMetricsByRunUuid[run.runUuid] || {},\n          params: paramsByRunUuid[run.runUuid] || {},\n          color: run.color,\n          pinned: run.pinned,\n          pinnable: run.pinnable,\n          metricsHistory: {},\n        })),\n    [comparedRuns, latestMetricsByRunUuid, paramsByRunUuid],\n  );\n\n  const { isLoading: isMetricHistoryLoading, chartRunDataWithHistory } =\n    useMultipleChartsMetricHistory(\n      searchFacetsState.compareRunCharts || [],\n      chartRunData,\n      metricsByRunUuid,\n    );\n\n  /**\n   * Data utilized by the tooltip system:\n   * runs data and toggle pin callback\n   */\n  const tooltipContextValue = useMemo(\n    () => ({ runs: chartRunDataWithHistory, onTogglePin, onHideRun }),\n    [chartRunDataWithHistory, onHideRun, onTogglePin],\n  );\n\n  if (!initiallyLoaded) {\n    return (\n      <div css={styles.wrapper}>\n        <Skeleton />\n      </div>\n    );\n  }\n\n  return (\n    <div css={styles.wrapper} data-testid='experiment-view-compare-runs-chart-area'>\n      <div css={styles.controlsWrapper}>\n        <RunsCompareAddChartMenu onAddChart={addNewChartCard} />\n      </div>\n      <CompareRunsTooltipWrapper\n        contextData={tooltipContextValue}\n        component={RunsCompareTooltipBody}\n      >\n        <RunsCompareCharts\n          chartRunData={chartRunDataWithHistory}\n          cardsConfig={searchFacetsState.compareRunCharts || []}\n          onStartEditChart={startEditChart}\n          onRemoveChart={removeChart}\n          isMetricHistoryLoading={isMetricHistoryLoading}\n        />\n      </CompareRunsTooltipWrapper>\n      {configuredCardConfig && (\n        <RunsCompareConfigureModal\n          chartRunData={chartRunDataWithHistory}\n          metricKeyList={metricKeyList}\n          paramKeyList={paramKeyList}\n          config={configuredCardConfig}\n          onSubmit={submitForm}\n          onCancel={() => setConfiguredCardConfig(null)}\n        />\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  controlsWrapper: (theme: Theme) => ({\n    marginBottom: theme.spacing.md,\n    display: 'flex' as const,\n    justifyContent: 'flex-end',\n  }),\n  wrapper: (theme: Theme) => ({\n    // Same height as \"Show N matching runs\" label.\n    // Going to be fixed after switching to grid's fixed viewport height mode.\n\n    // Let's cover 1 pixel of the grid's border for the sleek look\n    marginLeft: -1,\n\n    position: 'relative' as const,\n    backgroundColor: theme.colors.backgroundSecondary,\n    padding: theme.spacing.md,\n    borderLeft: `1px solid ${theme.colors.border}`,\n    zIndex: 1,\n    overflowY: 'auto' as const,\n  }),\n};\n\nconst mapStateToProps = ({ entities }: { entities: ExperimentStoreEntities }) => {\n  const { paramsByRunUuid, latestMetricsByRunUuid, metricsByRunUuid } = entities;\n  return { paramsByRunUuid, latestMetricsByRunUuid, metricsByRunUuid };\n};\n\nexport const RunsCompare = connect(\n  mapStateToProps,\n  // mapDispatchToProps function (not provided):\n  undefined,\n  // mergeProps function (not provided):\n  undefined,\n  {\n    // We're interested only in \"entities\" sub-tree so we won't\n    // re-render on other state changes (e.g. API request IDs)\n    areStatesEqual: (nextState, prevState) => nextState.entities === prevState.entities,\n  },\n)(RunsCompareImpl);\n","import { max } from 'lodash';\nimport { useMemo } from 'react';\nimport { MetricHistoryByName } from '../../../types';\nimport { CompareChartRunData } from '../charts/CompareRunsCharts.common';\nimport {\n  RunsCompareCardConfig,\n  RunsCompareChartType,\n  RunsCompareLineCardConfig,\n} from '../runs-compare.types';\nimport { useFetchCompareRunsMetricHistory } from './useFetchCompareRunsMetricHistory';\n\n/**\n * This hook aggregates demands from multiple charts requiring metric\n * history and invokes necessary fetch actions using another designated hook.\n * When metric history is available, it enriches runs and returns them.\n */\nexport const useMultipleChartsMetricHistory = (\n  cardsConfig: RunsCompareCardConfig[],\n  chartRunData: CompareChartRunData[],\n  metricsByRunUuid: Record<string, MetricHistoryByName>,\n) => {\n  // First, determine which cards require metric history\n  const cardsRequiringMetricHistory = useMemo(\n    () =>\n      cardsConfig.filter(\n        // For the time being, only line charts require metric history\n        (c) => c.type === RunsCompareChartType.LINE,\n      ) as RunsCompareLineCardConfig[],\n    [cardsConfig],\n  );\n\n  // Next, determine runs requiring history\n  const runsRequiringMetricHistory = useMemo(() => {\n    if (!cardsRequiringMetricHistory.length) {\n      return [];\n    }\n    const maxRunCount = max(cardsRequiringMetricHistory.map((c) => c.runsCountToCompare || 10));\n    return chartRunData.slice(0, maxRunCount);\n  }, [cardsRequiringMetricHistory, chartRunData]);\n\n  // Determine which metrics need history to be fetched\n  const metricsRequiringHistory = useMemo(\n    () => Array.from(new Set(cardsRequiringMetricHistory.map((card) => card.metricKey))),\n    [cardsRequiringMetricHistory],\n  );\n\n  // Invoke the hook that actually fetches the history\n  const { isLoading } = useFetchCompareRunsMetricHistory(\n    metricsRequiringHistory,\n    runsRequiringMetricHistory,\n    metricsByRunUuid,\n  );\n\n  // Enrich the input data with the metric history and return it\n  const chartRunDataWithHistory = useMemo<CompareChartRunData[]>(() => {\n    // If there are no runs requiring metric history, just pass runs through\n    if (!runsRequiringMetricHistory.length) {\n      return chartRunData;\n    }\n    return chartRunData.map((baseRun) => ({\n      ...baseRun,\n      metricsHistory: metricsByRunUuid[baseRun.runInfo.run_uuid] || undefined,\n    }));\n  }, [runsRequiringMetricHistory, metricsByRunUuid, chartRunData]);\n\n  return { isLoading, chartRunDataWithHistory };\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  ExperimentEntity,\n  ExperimentStoreEntities,\n  LIFECYCLE_FILTER,\n  MODEL_VERSION_FILTER,\n  UpdateExperimentViewStateFn,\n} from '../../../../types';\nimport {\n  experimentRunsSelector,\n  ExperimentRunsSelectorParams,\n  ExperimentRunsSelectorResult,\n} from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunsControls } from './ExperimentViewRunsControls';\nimport { ExperimentViewRunsTable } from './ExperimentViewRunsTable';\n\nimport { searchModelVersionsApi } from '../../../../../model-registry/actions';\nimport { loadMoreRunsApi, searchRunsApi, searchRunsPayload } from '../../../../actions';\nimport { GetExperimentRunsContextProvider } from '../../contexts/GetExperimentRunsContext';\nimport { useFetchExperimentRuns } from '../../hooks/useFetchExperimentRuns';\nimport { SearchExperimentRunsViewState } from '../../models/SearchExperimentRunsViewState';\nimport Utils from '../../../../../common/utils/Utils';\nimport { ATTRIBUTE_COLUMN_SORT_KEY } from '../../../../constants';\nimport { RunRowType } from '../../utils/experimentPage.row-types';\nimport { prepareRunsGridData } from '../../utils/experimentPage.row-utils';\nimport { RunsCompare } from '../../../runs-compare/RunsCompare';\n\nexport interface ExperimentViewRunsOwnProps {\n  experiments: ExperimentEntity[];\n  modelVersionFilter?: MODEL_VERSION_FILTER;\n  lifecycleFilter?: LIFECYCLE_FILTER;\n}\n\nexport interface ExperimentViewRunsProps extends ExperimentViewRunsOwnProps {\n  runsData: ExperimentRunsSelectorResult;\n}\n\n/**\n * Creates time with milliseconds set to zero, usable in calculating\n * relative time\n */\nconst createCurrentTime = () => {\n  const mountTime = new Date();\n  mountTime.setMilliseconds(0);\n  return mountTime;\n};\n\nexport const ExperimentViewRunsImpl = React.memo((props: ExperimentViewRunsProps) => {\n  const { experiments, runsData } = props;\n\n  // Persistable sort/filter model state is taken from the context\n  const {\n    searchFacetsState,\n    updateSearchFacets,\n    fetchExperimentRuns,\n    isLoadingRuns,\n    loadMoreRuns,\n    moreRunsAvailable,\n    requestError,\n  } = useFetchExperimentRuns();\n\n  const [visibleRuns, setVisibleRuns] = useState<RunRowType[]>([]);\n\n  // Non-persistable view model state is being created locally\n  const [viewState, setViewState] = useState(new SearchExperimentRunsViewState());\n\n  // Initial fetch of runs after mounting\n  useEffect(() => {\n    fetchExperimentRuns();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const {\n    paramKeyList,\n    metricKeyList,\n    tagsList,\n    modelVersionsByRunUuid,\n    paramsList,\n    metricsList,\n    runInfos,\n    runUuidsMatchingFilter,\n  } = runsData;\n\n  const updateViewState = useCallback<UpdateExperimentViewStateFn>(\n    (newPartialViewState) =>\n      setViewState((currentViewState) => ({ ...currentViewState, ...newPartialViewState })),\n    [],\n  );\n\n  const addColumnClicked = useCallback(() => {\n    updateViewState({ columnSelectorVisible: true });\n  }, [updateViewState]);\n\n  const { orderByKey, searchFilter, runsExpanded, runsPinned, isComparingRuns, runsHidden } =\n    searchFacetsState;\n\n  const shouldNestChildrenAndFetchParents = useMemo(\n    () => (!orderByKey && !searchFilter) || orderByKey === ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n    [orderByKey, searchFilter],\n  );\n\n  // Value used a reference for the \"date\" column\n  const [referenceTime, setReferenceTime] = useState(createCurrentTime);\n\n  // We're setting new reference date only when new runs data package has arrived\n  useEffect(() => {\n    setReferenceTime(createCurrentTime);\n  }, [runInfos]);\n\n  const filteredTagKeys = useMemo(() => Utils.getVisibleTagKeyList(tagsList), [tagsList]);\n\n  useEffect(() => {\n    if (isLoadingRuns) {\n      return;\n    }\n    const runs = prepareRunsGridData({\n      experiments,\n      paramKeyList,\n      metricKeyList,\n      modelVersionsByRunUuid,\n      runsExpanded,\n      tagKeyList: filteredTagKeys,\n      nestChildren: shouldNestChildrenAndFetchParents,\n      referenceTime,\n      runData: runInfos.map((runInfo, index) => ({\n        runInfo,\n        params: paramsList[index],\n        metrics: metricsList[index],\n        tags: tagsList[index],\n      })),\n      runUuidsMatchingFilter,\n      runsPinned,\n      runsHidden,\n    });\n\n    setVisibleRuns(runs);\n  }, [\n    isLoadingRuns,\n    experiments,\n    metricKeyList,\n    metricsList,\n    modelVersionsByRunUuid,\n    paramKeyList,\n    paramsList,\n    runInfos,\n    runsExpanded,\n    tagsList,\n    filteredTagKeys,\n    shouldNestChildrenAndFetchParents,\n    referenceTime,\n    runsPinned,\n    runsHidden,\n    runUuidsMatchingFilter,\n    requestError,\n  ]);\n\n  const loadMoreRunsCallback = useCallback(() => {\n    if (moreRunsAvailable && !isLoadingRuns) {\n      // Don't do this if we're loading runs\n      // to prevent too many requests from being\n      // sent out\n      loadMoreRuns();\n    }\n  }, [moreRunsAvailable, isLoadingRuns, loadMoreRuns]);\n\n  return (\n    <>\n      <ExperimentViewRunsControls\n        viewState={viewState}\n        updateViewState={updateViewState}\n        runsData={runsData}\n        searchFacetsState={searchFacetsState}\n        updateSearchFacets={updateSearchFacets}\n        requestError={requestError}\n      />\n      <div css={styles.createRunsTableWrapper(isComparingRuns)}>\n        <ExperimentViewRunsTable\n          experiments={experiments}\n          runsData={runsData}\n          searchFacetsState={searchFacetsState}\n          viewState={viewState}\n          isLoading={isLoadingRuns}\n          updateSearchFacets={updateSearchFacets}\n          updateViewState={updateViewState}\n          onAddColumnClicked={addColumnClicked}\n          rowsData={visibleRuns}\n          loadMoreRunsFunc={loadMoreRunsCallback}\n          moreRunsAvailable={moreRunsAvailable}\n        />\n        {isComparingRuns && (\n          <RunsCompare\n            isLoading={isLoadingRuns}\n            comparedRuns={visibleRuns}\n            metricKeyList={runsData.metricKeyList}\n            paramKeyList={runsData.paramKeyList}\n            experimentTags={runsData.experimentTags}\n            searchFacetsState={searchFacetsState}\n            updateSearchFacets={updateSearchFacets}\n          />\n        )}\n      </div>\n    </>\n  );\n});\n\nconst styles = {\n  createRunsTableWrapper: (isComparingRuns: boolean) => ({\n    minHeight: 225, // This is the exact height for displaying a minimum five rows and table header\n    height: '100%',\n    display: 'grid',\n    position: 'relative' as const,\n    // When comparing runs, we fix the table width to 310px.\n    // We can consider making it resizable by a user.\n    gridTemplateColumns: isComparingRuns ? '310px 1fr' : '1fr',\n  }),\n  loadingFooter: () => ({\n    justifyContent: 'center',\n    alignItems: 'center',\n    display: 'flex',\n    height: '72px',\n  }),\n};\n\n/**\n * Concrete actions for GetExperimentRuns context provider\n */\nconst getExperimentRunsActions = {\n  searchRunsApi,\n  loadMoreRunsApi,\n  searchRunsPayload,\n  searchModelVersionsApi,\n};\n\n/**\n * Function mapping redux state used in connect()\n */\nconst mapStateToProps = (\n  state: { entities: ExperimentStoreEntities },\n  params: ExperimentRunsSelectorParams,\n) => {\n  return { runsData: experimentRunsSelector(state, params) };\n};\n\n/**\n * Component responsible for displaying runs table with its set of\n * respective sort and filter controls on the experiment page.\n */\nexport const ExperimentViewRunsConnect: React.ComponentType<ExperimentViewRunsOwnProps> = connect(\n  // mapStateToProps function:\n  mapStateToProps,\n  // mapDispatchToProps function (not provided):\n  undefined,\n  // mergeProps function (not provided):\n  undefined,\n  {\n    // We're interested only in certain entities sub-tree so we won't\n    // re-render on other state changes (e.g. API request IDs or metric history)\n    areStatesEqual: (nextState, prevState) =>\n      nextState.entities.experimentTagsByExperimentId ===\n        prevState.entities.experimentTagsByExperimentId &&\n      nextState.entities.latestMetricsByRunUuid === prevState.entities.latestMetricsByRunUuid &&\n      nextState.entities.modelVersionsByRunUuid === prevState.entities.modelVersionsByRunUuid &&\n      nextState.entities.paramsByRunUuid === prevState.entities.paramsByRunUuid &&\n      nextState.entities.runInfosByUuid === prevState.entities.runInfosByUuid &&\n      nextState.entities.runUuidsMatchingFilter === prevState.entities.runUuidsMatchingFilter &&\n      nextState.entities.tagsByRunUuid === prevState.entities.tagsByRunUuid,\n  },\n)(ExperimentViewRunsImpl);\n\n/**\n * This component serves as a layer for injecting props necessary for connect() to work\n */\nexport const ExperimentViewRunsInjectFilters = (props: ExperimentViewRunsOwnProps) => {\n  const { searchFacetsState } = useFetchExperimentRuns();\n  return (\n    <ExperimentViewRunsConnect\n      {...props}\n      modelVersionFilter={searchFacetsState.modelVersionFilter as MODEL_VERSION_FILTER}\n      lifecycleFilter={searchFacetsState.lifecycleFilter as LIFECYCLE_FILTER}\n    />\n  );\n};\n\n/**\n * This component serves as a layer for creating context for searching runs\n * and provides implementations of necessary redux actions.\n */\nexport const ExperimentViewRunsInjectContext = (props: ExperimentViewRunsOwnProps) => (\n  <GetExperimentRunsContextProvider actions={getExperimentRunsActions}>\n    <ExperimentViewRunsInjectFilters {...props} />\n  </GetExperimentRunsContextProvider>\n);\n\n/**\n * Export context injection layer as a main entry point\n */\nexport const ExperimentViewRuns = ExperimentViewRunsInjectContext;\n","import { Skeleton } from '@databricks/design-system';\n\nimport { useEffect } from 'react';\nimport { ErrorCodes } from '../../../common/constants';\nimport NotFoundPage from '../NotFoundPage';\nimport { PermissionDeniedView } from '../PermissionDeniedView';\nimport { ExperimentViewDescriptions } from './components/ExperimentViewDescriptions';\nimport { ExperimentViewNotes } from './components/ExperimentViewNotes';\nimport { ExperimentViewHeader } from './components/header/ExperimentViewHeader';\nimport { ExperimentViewHeaderCompare } from './components/header/ExperimentViewHeaderCompare';\nimport { ExperimentViewRuns } from './components/runs/ExperimentViewRuns';\nimport { useExperimentIds } from './hooks/useExperimentIds';\nimport { useExperiments } from './hooks/useExperiments';\nimport { useFetchExperiments } from './hooks/useFetchExperiments';\n\nexport const ExperimentView = () => {\n  const experimentIds = useExperimentIds();\n  const experiments = useExperiments(experimentIds);\n\n  const [firstExperiment] = experiments;\n\n  const { fetchExperiments, isLoadingExperiment, requestError } = useFetchExperiments();\n\n  useEffect(() => {\n    fetchExperiments(experimentIds);\n  }, [fetchExperiments, experimentIds]);\n\n  const isComparingExperiments = experimentIds.length > 1;\n\n  if (requestError && requestError.getErrorCode() === ErrorCodes.PERMISSION_DENIED) {\n    return <PermissionDeniedView errorMessage={requestError.getMessageField()} />;\n  }\n\n  if (requestError && requestError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST) {\n    return <NotFoundPage />;\n  }\n\n  if (isLoadingExperiment || !firstExperiment) {\n    return <Skeleton active />;\n  }\n\n  return (\n    <div css={styles.experimentViewWrapper}>\n      {isComparingExperiments ? (\n        <ExperimentViewHeaderCompare experiments={experiments} />\n      ) : (\n        <>\n          <ExperimentViewHeader experiment={firstExperiment} />\n          <ExperimentViewDescriptions experiment={firstExperiment} />\n          <ExperimentViewNotes experiment={firstExperiment} />\n        </>\n      )}\n\n      <ExperimentViewRuns experiments={experiments} />\n    </div>\n  );\n};\n\nconst styles = {\n  experimentViewWrapper: { height: '100%', display: 'flex', flexDirection: 'column' as const },\n};\n\nexport default ExperimentView;\n","import { isEqual } from 'lodash';\nimport { useSelector } from 'react-redux';\nimport type { ExperimentEntity, ExperimentStoreEntities } from '../../../types';\n\nexport type UseExperimentsResult = ExperimentEntity[];\n\n/**\n * Hook that returns data and functions necessary for rendering\n * experiment(s) details - name, title, tags etc.\n */\nexport const useExperiments = (ids: (number | string)[]): UseExperimentsResult =>\n  useSelector(\n    (state: { entities: ExperimentStoreEntities }) =>\n      ids.map((id) => state.entities.experimentsById[id]).filter(Boolean),\n    (oldExperiments, newExperiments) => isEqual(oldExperiments, newExperiments),\n  );\n","import { useEffect } from 'react';\nimport { useIntl } from 'react-intl';\n// prettier-ignore\nimport {\n  getExperimentApi,\n  setCompareExperiments,\n  setExperimentTagApi,\n} from '../../actions';\nimport Utils from '../../../common/utils/Utils';\nimport { GetExperimentsContextProvider } from './contexts/GetExperimentsContext';\nimport { ExperimentView } from './ExperimentView';\n\n/**\n * Concrete actions for GetExperiments context\n */\nconst getExperimentActions = {\n  setExperimentTagApi,\n  getExperimentApi,\n  setCompareExperiments,\n};\n\n/**\n * Main entry point for the experiment page. This component\n * provides underlying structure with context containing\n * concrete versions of store actions.\n */\nexport const ExperimentPage = () => {\n  const { formatMessage } = useIntl();\n\n  useEffect(() => {\n    const pageTitle = formatMessage({\n      defaultMessage: 'Experiment Runs - Databricks',\n      description: 'Title on a page used to manage MLflow experiments runs',\n    });\n    Utils.updatePageTitle(pageTitle);\n  });\n\n  return (\n    <GetExperimentsContextProvider actions={getExperimentActions}>\n      <ExperimentView />\n    </GetExperimentsContextProvider>\n  );\n};\n\nexport default ExperimentPage;\n","import { throttle } from 'lodash';\nimport { Layout, Margin } from 'plotly.js';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { PlotParams } from 'react-plotly.js';\nimport {\n  KeyValueEntity,\n  MetricEntitiesByName,\n  MetricHistoryByName,\n  RunInfoEntity,\n} from '../../../types';\n\n/**\n * Common props for all charts used in compare runs\n */\nexport interface CompareRunsCommonPlotProps {\n  /**\n   * A scatter layer marker size\n   */\n  markerSize?: number;\n\n  /**\n   * Additional class name passed to the chart wrapper\n   */\n  className?: string;\n\n  /**\n   * Plotly.js-compatible margin object\n   */\n  margin?: Partial<Margin>;\n\n  /**\n   * Callback fired when a run is hovered\n   */\n  onHover?: (runUuid: string, event?: MouseEvent, additionalAxisData?: any) => void;\n\n  /**\n   * Callback fired when no run is hovered anymore\n   */\n  onUnhover?: () => void;\n\n  /**\n   * Callback fired when the either plot's data or its layout has changed\n   */\n  onUpdate?: PlotParams['onUpdate'];\n\n  /**\n   * Width in pixels. If not provided, chart uses auto-sizing.\n   */\n  width?: number;\n\n  /**\n   * Height in pixels. If not provided, chart uses auto-sizing.\n   */\n  height?: number;\n\n  /**\n   * If true, renders default plotly.js powered hover box with run data\n   */\n  useDefaultHoverBox?: boolean;\n\n  /**\n   * Indicates which run is currently selected in the global context and should be highlighted\n   */\n  selectedRunUuid?: string | null;\n}\n\n/**\n * Defines single axis used in compare run charts\n */\nexport interface CompareRunsChartAxisDef {\n  key: string;\n  type: 'METRIC' | 'PARAM';\n}\n\nexport interface CompareChartRunData {\n  /**\n   * Run's RunInfo object containing the metadata\n   */\n  runInfo: RunInfoEntity;\n  /**\n   * Object containing latest run's metrics by key\n   */\n  metrics: MetricEntitiesByName;\n  /**\n   * Dictionary with the metrics by name. This field is optional\n   * as it's used only by certain chart types.\n   */\n  metricsHistory?: MetricHistoryByName;\n  /**\n   * Object containing run's params by key\n   */\n  params: Record<string, KeyValueEntity>;\n  /**\n   * Color corresponding to the run\n   */\n  color?: string;\n  /**\n   * Set to \"true\" if the run is pinned\n   */\n  pinned?: boolean;\n  /**\n   * Set to \"true\" if the run is pinnable (e.g. not a child run)\n   */\n  pinnable?: boolean;\n}\n\n/**\n * By default, Plotly.js is capable of autosizing only on resizing window with\n * no option to observe other constraints (e.g. container resize). This hooks\n * attaches a resize observer to the chart wrapper and dynamically returns its dimensions\n * so it can be passed to the chart's layout in order to correctly maintain responsive size.\n */\nexport const useDynamicPlotSize = (throttleMs = 100) => {\n  const [layoutWidth, setLayoutWidth] = useState<undefined | number>(undefined);\n  const [layoutHeight, setLayoutHeight] = useState<undefined | number>(undefined);\n\n  const isDynamicSizeSupported = Boolean(window.ResizeObserver);\n\n  const setDimensions = useCallback((width: number, height: number) => {\n    setLayoutWidth(width);\n    setLayoutHeight(height);\n  }, []);\n\n  const setDimensionsThrottled = useMemo(\n    () =>\n      throttle(setDimensions, throttleMs, {\n        leading: true,\n      }),\n    [setDimensions, throttleMs],\n  );\n\n  const [containerDiv, setContainerDiv] = useState<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    let unmounted = false;\n    if (!containerDiv || !window.ResizeObserver) {\n      return undefined;\n    }\n    const observer = new ResizeObserver(([observerEntry]) => {\n      if (unmounted) {\n        return;\n      }\n\n      setDimensionsThrottled(\n        Math.round(observerEntry.contentRect.width),\n        Math.round(observerEntry.contentRect.height),\n      );\n    });\n\n    observer.observe(containerDiv);\n    return () => {\n      unmounted = true;\n      observer.disconnect();\n    };\n  }, [containerDiv, setDimensionsThrottled]);\n\n  return { containerDiv, setContainerDiv, layoutWidth, layoutHeight, isDynamicSizeSupported };\n};\n\nexport type UseMemoizedChartLayoutParams<T = any> = Pick<CompareRunsCommonPlotProps, 'margin'> & {\n  resetViewOn: T[];\n  xAxisKey: string;\n  yAxisKey: string;\n  layoutWidth?: number;\n  layoutHeight?: number;\n  additionalXAxisParams?: Partial<Layout['xaxis']>;\n  additionalYAxisParams?: Partial<Layout['yaxis']>;\n};\n\n/**\n * Styles used in all compare run charts\n */\nexport const commonRunsChartStyles = {\n  // Styles used for highlighting traces in both scatter and contour chart types\n  scatterChartHighlightStyles: {\n    '.trace.scatter path.point': {\n      transition: 'var(--trace-transition)',\n    },\n    '.trace.scatter.is-highlight path.point': {\n      opacity: 'var(--trace-opacity-dimmed-low) !important',\n    },\n    '.trace.scatter path.point.is-hover-highlight': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n    },\n    '.trace.scatter path.point.is-selection-highlight': {\n      opacity: 'var(--trace-opacity-highlighted) !important',\n      stroke: 'var(--trace-stroke-color)',\n      strokeWidth: 'var(--trace-stroke-width) !important',\n    },\n  },\n  chartWrapper: () => ({\n    width: '100%',\n    height: '100%',\n    overflow: 'hidden',\n    position: 'relative' as const,\n    fontSize: 0,\n    lineHeight: 0,\n    '.js-plotly-plot .plotly .cursor-ew-resize, .js-plotly-plot .plotly .cursor-crosshair': {\n      cursor: 'pointer',\n    },\n    // Add a little stroke to the Y axis text so if despite the margin\n    // tick texts would overlay the axis label, it would still look decent\n    '.js-plotly-plot g.infolayer > g.g-ytitle > text': {\n      stroke: 'white',\n      strokeWidth: 16,\n      paintOrder: 'stroke',\n    },\n    // Variable used by chart trace highlighting\n    '--trace-transition': 'opacity .16s',\n    '--trace-opacity-highlighted': '1',\n    '--trace-opacity-dimmed-low': '0.45',\n    '--trace-opacity-dimmed-high': '0.55',\n    '--trace-stroke-color': 'black',\n    '--trace-stroke-width': '1',\n  }),\n  chart: { width: '100%', height: '100%' },\n};\n\n/**\n * Default margin for all compare run charts but contour\n */\nexport const compareRunsChartDefaultMargin: Partial<Margin> = {\n  t: 0,\n  b: 48,\n  r: 0,\n  l: 48,\n  pad: 0,\n};\n\n/**\n * Default margin for contour compare run charts\n */\nexport const compareRunsChartDefaultContourMargin: Partial<Margin> = {\n  t: 0,\n  b: 48,\n  r: 0,\n  l: 80,\n  pad: 0,\n};\n\n/**\n * Default hover label style for all compare run charts\n */\nexport const compareRunsChartHoverlabel = {\n  bgcolor: 'white',\n  bordercolor: '#ccc',\n  font: {\n    color: 'black',\n  },\n};\n\n/**\n * Function that makes sure that extreme values e.g. infinities masked as 1.79E+308\n * are normalized to be displayed properly in charts.\n */\nexport const normalizeChartValue = (value?: number | string) => {\n  const parsedValue = typeof value === 'string' ? parseFloat(value) : value;\n\n  // Return all falsy values as-is\n  if (!parsedValue) {\n    return parsedValue;\n  }\n  if (!Number.isFinite(parsedValue) || Number.isNaN(parsedValue)) {\n    return undefined;\n  }\n  if (Math.abs(parsedValue) === Number.MAX_VALUE) {\n    return Number.POSITIVE_INFINITY * Math.sign(parsedValue);\n  }\n\n  return value;\n};\n\nexport const truncateString = (fullStr: string, strLen: number) => {\n  if (fullStr.length <= strLen) return fullStr;\n\n  const separator = '...';\n\n  const sepLen = separator.length,\n    charsToShow = strLen - sepLen,\n    frontChars = Math.ceil(charsToShow / 2),\n    backChars = Math.floor(charsToShow / 2);\n\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\n"],"names":["useIntl","intl","React","Context","invariantIntlContext","useAsyncDispatch","useDispatch","GetExperimentsContext","createContext","GetExperimentsContextProvider","children","actions","fetchExperimentsRequestIds","setFetchExperimentsRequestIds","useState","isLoadingExperiment","setIsLoadingExperiment","requestError","setRequestError","dispatch","fetchExperiments","useCallback","experimentIds","newRequestIds","map","experimentId","requestAction","getExperimentApi","catch","e","Utils","meta","id","requestIds","isEqual","fetchFn","contextValue","useMemo","Provider","value","RequestStateWrapper","shouldOptimisticallyRender","_isLoading","_renderError","requests","some","r","includes","active","forEach","request","error","PermissionDeniedView","errorMessage","theme","useDesignSystemTheme","className","style","height","marginTop","src","permissionDeniedLock","alt","paddingTop","css","color","colors","textSecondary","ExperimentViewArtifactLocation","artifactLocation","ExperimentViewDescriptions","experiment","styles","container","T","defaultMessage","experiment_id","artifact_location","display","gap","spacing","lg","useFetchExperiments","getExperimentsContext","useContext","Error","ExperimentViewNotes","storedNote","useSelector","state","tags","getExperimentTags","Object","values","find","t","getKey","NOTE_CONTENT_TAG","undefined","extractNoteFromTags","showNotesEditor","setShowNotesEditor","setExperimentTagApi","handleSubmitEditNote","updatedNote","action","then","CollapsibleSection","title","collapsibleSectionHeader","B","type","onClick","forceOpen","defaultCollapsed","EditableNote","defaultMarkdown","onSubmit","onCancel","showEditor","lineHeight","ExperimentViewCopyTitle","size","dangerouslySetAntdProps","copyable","text","name","icon","tooltips","formatMessage","CopyButton","copyText","showTooltip","setShowTooltip","visible","navigator","clipboard","writeText","setTimeout","onMouseLeave","CopyBox","readOnly","GetLinkModal","link","ExperimentViewHeaderShareButton","showGetLinkModal","setShowGetLinkModal","window","top","location","href","ExperimentViewHeader","normalizedExperimentName","split","pop","feedbackFormUrl","useExperimentPageFeedbackUrl","PageHeader","headerWrapper","Boolean","shouldUseNextRunsComparisonUI","target","rel","breadcrumbs","sendFeedbackPopoverContent","maxWidth","flexDirection","alignItems","sm","ExperimentViewHeaderCompare","experiments","pageTitle","numExperiments","length","LIFECYCLE_FILTER","MODEL_VERSION_FILTER","experimentRunsSelector","params","comparingExperiments","runUuids","entities","runInfosByUuid","filter","run_uuid","modelVersionsByRunUuid","runUuidsMatchingFilter","runInfos","lifecycleFilter","ACTIVE","modelVersionFilter","ALL_RUNS","run_id","getRunInfo","rInfo","lifecycle_stage","WITH_MODEL_VERSIONS","WTIHOUT_MODEL_VERSIONS","console","warn","extractRunInfos","metricKeysSet","Set","paramKeysSet","metricsList","runInfo","metricsByRunUuid","getLatestMetrics","metrics","metric","add","key","paramsList","paramValues","getParams","param","tagsList","getRunTags","firstExperimentId","experimentTags","metricKeyList","Array","from","sort","paramKeyList","ColumnHeaderCell","handleSortBy","canonicalSortKey","orderByAsc","orderByKey","this","props","newOrderByAsc","onSortBy","render","enableSorting","displayName","getClassName","role","headerLabelWrapper","sortable","width","justifyContent","padding","svg","actionTertiaryTextHover","headerSortIcon","marginRight","ErrorIcon","textValidationDanger","FinishedIcon","textValidationSuccess","getRunStatusIcon","status","DateCellRenderer","startTime","referenceTime","runStatus","cellWrapper","ExperimentNameCellRenderer","data","to","Routes","basename","TrimmedText","maxSize","allowShowMore","trimmedText","substr","showMore","setShowMore","expandButton","ModelsCellRenderer","registeredModels","loggedModels","runUuid","models","modelToRender","modelDiv","registeredModelName","registeredModelVersion","registeredModelSvg","getModelVersionPageRoute","flavors","loggedModelFlavorText","loggedModelLink","artifactPath","loggedModelSvg","imageWrapper","img","position","SourceCellRenderer","sourceType","VersionCellRenderer","version","formatTimestamp","getDuration","getRunNameFromTags","getSourceType","getSourceName","getUser","toMap","reduce","result","entity","csvEscape","str","test","replace","runInfosToCsv","tagKeyList","columns","i","csv","j","tableToCsv","index","row","start_time","end_time","run_name","paramsMap","metricsMap","tagsMap","paramKey","push","metricKey","tagKey","EXPERIMENT_FIELD_PREFIX_PARAM","EXPERIMENT_FIELD_PREFIX_METRIC","EXPERIMENT_FIELD_PREFIX_TAG","RUNS_VISIBILITY_MODE","getQualifiedEntityName","keyType","keyName","MOUSE_DELAYS","mouseEnterDelay","mouseLeaveDelay","RowActionsCellRenderer","pinned","hidden","actionsContainer","placement","actionCheckbox","checked","onChange","onToggleVisibility","pinnable","onTogglePin","prevProps","nextProps","input","appearance","cursor","grey600","grey400","RowActionsHeaderCellRenderer","modal","asChild","actionButton","HIDEALL","SHOWALL","background","border","RunNameCellRenderer","onExpand","runName","runDateAndNestInfo","hasExpander","expanderOpen","childrenIds","level","renderingAsParent","isNaN","shouldDisplayRunColors","expanderWrapper","nestLevel","expanderButton","runLink","colorPill","backgroundColor","minWidth","typography","fontSizeBase","minHeight","overflow","textOverflow","borderRadius","flexShrink","marginBottom","LoadMoreRowRenderer","loadMoreRunsFunc","getActionsColumnWidth","compactMode","makeCanonicalSortKey","isCanonicalSortKeyOfType","canonicalKey","startsWith","extractCanonicalSortKey","substring","slice","createParamFieldName","createMetricFieldName","createTagFieldName","TAGS_TO_COLUMNS_MAP","ATTRIBUTE_COLUMN_SORT_KEY","COLUMN_TYPES","getRowId","getRowIsLoadMore","rowNode","isLoadMoreRow","ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT","ATTRIBUTE_COLUMN_LABELS","ADJUSTABLE_ATTRIBUTE_COLUMNS","useRunsColumnDefinitions","searchFacetsState","compareExperiments","columnApi","isComparingRuns","selectedColumns","cumulativeColumns","cachedMetricKeys","useRef","cachedParamKeys","cachedTagKeys","paramKeys","current","metricKeys","tagKeys","useCumulativeColumnKeys","columnSet","commonSortOrderProps","getOrderedByClassName","getHeaderClassName","getCellClassName","colDef","headerComponentParams","valueGetter","checkboxSelection","headerComponent","headerCheckboxSelection","headerName","cellClass","cellRenderer","cellRendererParams","resizable","colId","headerTooltip","field","equals","dateInfo1","dateInfo2","initialWidth","experimentName1","experimentName2","initialHide","tags1","tags2","version1","version2","models1","models2","tooltipField","canonicalSortKeys","useEffect","setColumnVisible","EXPERIMENTS_DEFAULT_COLUMN_SETUP","autoSizePadding","menuIcon","suppressMenu","suppressMovable","DeleteRunModalImpl","Component","constructor","super","handleSubmit","bind","deletePromises","selectedRunIds","runId","deleteRunApi","Promise","all","openErrorModal","number","ConfirmModal","isOpen","onClose","helpText","confirmButtonText","mapDispatchToProps","connect","RestoreRunModalImpl","restorePromises","restoreRunApi","useExperimentIds","match","useRouteMatch","useLocation","normalizedLocationSearch","decodeURIComponent","search","compareExperimentIdsQueryParam","queryParams","qs","experimentIdsRaw","toString","JSON","parse","START_TIME_COLUMN_OFFSET","ALL","LAST_HOUR","LAST_24_HOURS","LAST_7_DAYS","LAST_30_DAYS","LAST_YEAR","shouldRefetchRuns","currentSearchFacetsState","newSearchFacetsState","searchFilter","createSearchRunsParams","pageToken","runViewType","ViewType","runsPinned","orderBy","createOrderByExpression","startTimeExpression","offset","createStartTimeExpression","createFilterExpression","shouldFetchParents","shouldNestChildrenAndFetchParents","fetchModelVersionsForRuns","runsPayload","actionCreator","runsWithLogModelHistory","run","chunk","MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER","runsChunk","info","DEFAULT_SELECTED_COLUMNS","clearSearchExperimentsFacetsFilters","SearchExperimentRunsFacetsState","isSearchFacetsFilterUsed","DEFAULT_LIFECYCLE_FILTER","DEFAULT_MODEL_VERSION_FILTER","DEFAULT_START_TIME","DEFAULT_ORDER_BY_KEY","DEFAULT_ORDER_BY_ASC","runsExpanded","runsHidden","compareRunCharts","persistSearchStateFieldSerializers","serializeQueryString","btoa","stringify","deserializeQueryString","parsedResult","atob","isArray","serializeLocalStorage","shouldUseStateSerializer","KNOWN_STATE_KEYS","keys","urlParserDecoder","defaultDecoder","_","mergeFacetsStates","base","object","assign","persistLocalStorage","idKey","localStorageInstance","LocalStorageUtils","sortFilterModelToSave","resultObject","serializeFn","serializeFieldsToLocalStorage","saveComponentState","createPersistedQueryString","serializedSortFilterModelToSave","serializeFieldsToQueryString","QueryString","addQueryPrefix","arrayFormat","encodeValuesOnly","restoreExperimentSearchFacetsState","locationSearch","baseState","rawLocalStorageValue","loadComponentState","model","isObject","localStorageValue","deserializeFn","deserializeLocalStorage","deserializeFieldsFromLocalStorage","rawUrlData","ignoreQueryPrefix","comma","arrayLimit","decoder","restData","stateData","rawURLSearchData","hasOwnProperty","isKnownField","extractExperimentSearchFacetsState","transformedStateData","deserializeFieldsFromQueryString","urlState","queryString","GetExperimentRunsContext","GetExperimentRunsContextProvider","history","useHistory","searchRunsRequestId","setSearchRunsRequestId","isLoadingRuns","setIsLoadingRuns","moreRunsAvailable","setMoreRunsAvailable","experimentIdsHash","setSearchFacetsState","pathname","activeRequests","nextPageToken","isPristineFlag","isPristine","internalFetchExperimentRuns","requestSearchFacetsState","requestExperimentIds","requestReferenceTime","Date","now","requestNextPageToken","loadMore","actionToUse","loadMoreRunsApi","searchRunsApi","next_page_token","runs","searchModelVersionsApi","activeRequest","loadMoreRuns","fetchExperimentRuns","persistState","replaceHistory","newQueryString","currentLocationSearch","currentParameters","persistExperimentSearchFacetsState","newPath","updateSearchFacets","newFilterModel","updateOptions","forceRefresh","preservePristine","oldModel","newModel","isFunction","listen","useFetchExperimentRuns","getExperimentRunsContextValue","ExperimentViewRunModals","showDeleteRunModal","showRestoreRunModal","showRenameRunModal","runsSelected","onCloseDeleteRunModal","onCloseRestoreRunModal","onCloseRenameRunModal","renamedRunName","entries","selected","refreshRuns","DeleteRunModal","RestoreRunModal","RenameRunModal","onSuccess","CompareRunsButtonWrapper","ExperimentViewRunsControlsActions","viewState","runsData","startTimeColumnLabels","getStartTimeColumnDisplayName","setShowDeleteRunModal","setShowRestoreRunModal","setShowRenameRunModal","setRenamedRunName","renameButtonClicked","runsSelectedList","selectedRun","compareButtonClicked","onDeleteRun","onRestoreRun","selectedRunsCount","canRestoreRuns","canRenameRuns","canCompareRuns","showActionButtons","currentLifecycleFilterLabel","currentStartTimeFilterLabel","controlBar","label","labelInValue","newStartTime","virtual","startTimeKey","disabled","danger","buttonSeparator","groupSeparator","flex","borderLeft","marginLeft","xs","borderTop","UnitNumber","_ref","prefixCls","_ref$offset","concat","left","classNames","getOffset","start","end","unit","SingleNumber","unitNodes","offsetStyle","originCount","count","originValue","Number","Math","abs","_React$useState","_React$useState2","_slicedToArray","prevValue","setPrevValue","_React$useState3","_React$useState4","prevCount","setPrevCount","onTransitionEnd","timeout","clearTimeout","_extends","transition","unitNumberList","prevIndex","findIndex","n","singleUnit","transform","__rest","s","p","prototype","call","indexOf","getOwnPropertySymbols","propertyIsEnumerable","_a","customizePrefixCls","motionClassName","show","_a$component","component","restProps","getPrefixCls","ConfigContext","newProps","numberNodes","numberList","String","num","borderColor","boxShadow","cloneElement","oriProps","isPresetColor","PresetColorTypes","_classNames","_ref$placement","_React$useContext","direction","colorInPreset","ribbonCls","_defineProperty","colorStyle","cornerColorStyle","Badge","_classNames2","customizeScrollNumberPrefixCls","scrollNumberPrefixCls","_a$count","_a$overflowCount","overflowCount","_a$dot","dot","_a$size","_a$showZero","showZero","numberedDisplayCount","hasStatus","isZero","showAsDot","mergedCount","isHidden","countRef","livingCount","displayCountRef","displayCount","isDotRef","mergedStyle","parseInt","right","titleNode","statusTextNode","displayNode","_typeof","statusCls","statusStyle","badgeClassName","statusTextColor","CSSMotion","motionName","motionAppear","_classNames3","isDot","scrollNumberCls","scrollNumberStyle","ScrollNumber","Ribbon","ExperimentViewRefreshButtonImpl","searchRunsPayload","lastFetchTime","setLastFetchTime","newRunsCount","setNewRunsCount","interval","setInterval","searchPayloadData","maxResults","MAX_DETECT_NEW_RUNS_RESULTS","newRuns","POLL_INTERVAL","clearInterval","pill","sup","lime","zIndex","ExperimentViewRefreshButton","areStatesEqual","nextState","prevState","GROUP_KEY","GROUP_KEY_ATTRIBUTES","GROUP_KEY_PARAMS","GROUP_KEY_METRICS","GROUP_KEY_TAGS","ATTRIBUTE_COLUMNS","ATTRIBUTE_COLUMNS_COMPARE","findMatching","filterQuery","v","toLowerCase","createHighlightedNode","beforeStr","matchStr","afterStr","ExperimentViewRunsColumnSelectorImpl","columnSelectorVisible","onChangeColumnSelectorVisible","setFilter","searchInputRef","scrollableContainerRef","buttonRef","attributeColumnNames","setCheckedColumns","updateFn","facets","newColumns","uniqueNewColumns","tagsKeyList","canonicalKeyNames","treeData","filteredAttributes","filteredParams","filteredMetrics","filteredTags","attributeKey","toggleGroup","isChecked","keyList","k","toggleSingleKey","requestAnimationFrame","scrollTo","focus","preventScroll","scrollIntoView","block","behavior","onCheck","node","columnType","canonicalKeysForGroup","searchInputKeyDown","treeElement","parent","querySelector","dropdownContent","dropdown","md","prefix","placeholder","allowClear","ref","onKeyDown","scrollableContainer","mode","checkedKeys","defaultExpandedKeys","overlay","trigger","onVisibleChange","C","ExperimentViewRunsColumnSelector","white","maxHeight","overflowY","overflowX","paddingBottom","whiteSpace","ExperimentViewRunsModeSwitch","setIsComparingRuns","ExperimentViewRunsSortSelector","sortOptions","onSortKeyChanged","currentSortSelectValue","SORT_DELIMITER_SYMBOL","COLUMN_SORT_BY_ASC","COLUMN_SORT_BY_DESC","currentSortSelectLabel","sortOption","option","sortOptionLabel","extractedKeyName","sortSelectControl","dropdownStyle","sortSelectDropdown","order","sortMenuArrowWrapper","middleTruncateStr","RunsSearchTooltipContent","whereBold","chunks","ExperimentSearchSyntaxDocUrl","ATTRIBUTE_OPTIONS","boldedText","wholeText","shouldBeBold","textArray","RegExp","item","TOOLTIP_COOKIE_KEY","RunsSearchAutoComplete","setText","autocompleteEnabled","setAutocompleteEnabled","focused","setFocused","lastSetBySelection","setLastSetBySelection","prevRunsDataRef","suggestionLimits","setSuggestionLimits","Metrics","Parameters","Tags","currentEntitiesRef","entityBeingEdited","setEntityBeingEdited","baseOptions","oldRunData","prevRunsData","newRunsData","mergeDedup","list1","list2","getTagNames","flatMap","tagRecord","metricNames","paramNames","tagNamesCleaned","options","m","getOptionsFromRunsData","previousEntities","newEntities","re","clauses","results","lastIndex","exec","clause","startIndex","getClausesAndStartIndex","clauseObj","endIndex","getEntitiesAndIndices","currentEntitiesNames","previousEntitiesNames","trim","filteredOptions","group","newOptions","limitForGroup","ellipsized","getFilteredOptionsFromEntityName","onSelect","groupName","prevSuggestionLimits","suffix","clearSearchFiltersState","storeIdentifier","showTooltipOnError","setShowTooltipOnError","currentTimeSecs","floor","storedItem","getItem","tooltipIcon","setItem","click","noMatches","o","open","triggerSearch","preventDefault","searchBox","dropdownMatchSelectWidth","defaultOpen","defaultActiveFirstOption","dropdownRender","menu","dropdownOverride","searchBarIcon","onBlur","searchInputSuffix","overlayInnerStyle","ExperimentViewRunsControlsFilters","updateViewState","onDownloadCsv","sortKeyChanged","compiledOrderByKey","newOrderBy","newOrderAscending","columnToAdd","isOrderAscending","currentFacets","changeColumnSelectorVisible","groupBar","newIsComparingRuns","gridTemplateColumns","flexWrap","columnSwitch","margin","lifecycleFilters","ExperimentViewRunsControls","filteredParamKeys","filteredMetricKeys","filteredTagKeys","blob","Blob","saveAs","downloadRunsCsv","ColumnSortByOrder","ATTRIBUTE_COLUMN_SORT_LABEL","sortLabelKey","sortLabel","useRunSortOptions","wrapper","MLFlowAgGridImpl","MLFlowAgGridLoader","fallback","cssTheme","S","ExperimentViewRunsEmptyTable","isFiltered","onClearFilters","noResultsWrapper","noResults","button","description","image","LoggingRunsDocUrl","inset","backgroundPrimary","CLASS_OUT_OF_VIEWPORT","CLASS_IS_HIDDEN","CLASS_IS_MINIMIZED","AG_GRID_CLS","ExperimentViewRunsTableAddColumnCTA","gridContainerElement","isInitialized","moreAvailableParamsAndMetricsColumnCount","ctaRef","savedContainerRef","immediateMoreRunsAvailable","initialize","containerElement","ResizeObserver","targetElement","rootElement","refLeftElem","refCenterElem","refHeaderElem","refBodyViewport","gridAreaWidth","leftColContainerWidth","leftColContainerHeight","centerColContainerWidth","colContainerHeight","headerHeight","resizeObserver","entry","contentRect","calculatedLeft","calculatedTop","classList","remove","loadMoreRowHeight","calculatedHeight","observe","disconnect","columnContainer","buttonContainer","buttonIcon","caption","grey200","willChange","pointerEvents","paddingLeft","paddingRight","strong","ExperimentViewRunsTableStatusBar","isLoading","allRunsCount","statusBar","ExperimentViewRunsTable","onAddColumnClicked","rowsData","gridApi","setGridApi","setColumnApi","prevSelectRunUuids","expandersVisible","onSelectionChange","api","selectedUUIDs","getSelectedRows","aggregate","curr","handleRowSelected","event","selectedRows","isSelected","isParent","childrenIdsToSelect","forEachNode","childRunDateInfo","childrenRunUuid","setSelected","newOrderByKey","toggleRowExpanded","parentId","currentRunsExpanded","togglePinnedRow","uuid","existingFacets","getRowNode","redrawRows","rowNodes","toggleRowVisibility","runUuidOrToggle","gridReadyHandler","columnDefs","showLoadingOverlay","hideOverlay","setRowData","uniqueId","allAvailableColumnsCount","hasSelectedAllColumns","moreAvailableParamsAndMetricsColumns","selectedMetricsAndParamsColumns","allMetricsAndParamsColumns","max","displayAddColumnsCTA","useLayoutEffect","deselectAll","sizeColumnsToFit","tableAreaWrapper","cx","agGridOverrides","defaultColDef","rowSelection","onGridReady","onSelectionChanged","rowHeight","onRowSelected","suppressRowClickSelection","suppressColumnMoveAnimation","suppressScrollOnNewData","isFullWidthRow","fullWidthCellRenderer","fullWidthCellRendererParams","suppressFieldDotNotation","enableCellTextSelection","components","agColumnHeader","loadingOverlayComponent","Spinner","suppressNoRowsOverlay","loadingOverlayComponentParams","showImmediately","rowBuffer","gridColors","rowBackground","rowBackgroundHover","rowBackgroundSelected","rowBackgroundHoverSelected","columnSortedBy","blue100","headerBackground","grey100","headerTextColor","headerGroupTextColor","headerBorderColor","checkboxBorderColor","actionDefaultBorderDefault","checkboxBorderColorChecked","checkboxBackgroundColorChecked","actionPrimaryBackgroundDefault","getGridColors","content","opacity","borderRight","borderBottom","SearchExperimentRunsViewState","hiddenChildRunsSelected","getFlatRowRenderMetadata","runData","isPinnable","EXPERIMENT_PARENT_ID_TAG","createKeyValueDataForRunRow","list","isNumber","getStableColorByStringHash","a","b","charCodeAt","prepareRunsGridData","nestChildren","experimentNameMap","rowRenderMetadata","runIdToIndex","treeNodes","foundHierarchy","parentRunId","parentRunIndex","parentIdToChildren","rootIndexes","treeNode","resultRowsMetadata","visited","doDfs","dfsIndex","currLevel","has","currentNodeRunInfo","currentNodeRunId","rowMetadata","cIdx","childrenIndices","dIdx","rootNodeIndex","getNestedRowRenderMetadata","childrenToPin","runInfoMetadata","formattedMetrics","experimentName","user","duration","visibleTags","isCurrentRowHidden","isCurrentRowPinned","isParentPinned","RunsCompareChartType","RunsCompareCardConfig","BAR","runsCountToCompare","static","RunsCompareBarCardConfig","SCATTER","RunsCompareScatterCardConfig","PARALLEL","RunsCompareParallelCardConfig","LINE","RunsCompareLineCardConfig","RunsCompareContourCardConfig","primaryMetricKey","resultChartSet","getEmptyChartCardByType","getUUID","xaxis","yaxis","scaleType","xAxisKey","CONTOUR","zaxis","selectedParams","selectedMetrics","_rect","_rect2","_rect3","_rect4","arguments","source","apply","SvgChartBar","svgRef","titleId","viewBox","fill","xmlns","d","stroke","strokeLinecap","x","y","_path2","_path3","SvgChartContour","SvgChartLine","strokeWidth","strokeLinejoin","_path4","_path5","SvgChartParallel","_ellipse","_ellipse2","_ellipse3","SvgChartScatter","cy","rx","ry","fillOpacity","RunsCompareAddChartMenu","onAddChart","addChartButton","align","iconWrapper","general","iconSize","useMutableHoverCallback","callback","mutableRef","highlightChartTracesFn","traceSelector","parentSelector","hoverIndex","selectIndex","deselected","querySelectorAll","highlightBarTraces","highlightLineTraces","highlightScatterTraces","useCompareRunsTraceHighlight","containerDiv","selectedRunUuid","highlightFn","selectedTraceIndex","hoveredPointIndex","setHoveredPointIndex","PLOT_CONFIG","displaylogo","scrollZoom","doubleClick","showTips","CompareRunsMetricsBarPlot","compareRunsChartDefaultMargin","onUpdate","onHover","onUnhover","barWidth","displayRunNames","useDefaultHoverBox","displayMetricKey","plotData","ids","normalizeChartValue","textValues","val","places","toFixed","getFixedPointValue","containsNegatives","textposition","textfont","hovertemplate","hoverinfo","hoverlabel","compareRunsChartHoverlabel","orientation","marker","layoutHeight","layoutWidth","setContainerDiv","isDynamicSizeSupported","useDynamicPlotSize","layout","setLayout","showticklabels","tickfont","fixedrange","hoverCallback","points","pointIndex","unhoverCallback","mutableHoverCallback","commonRunsChartStyles","highlightStyles","LazyPlot","L","useResizeHandler","config","CompareRunsTooltipContext","ContextMenuVisibility","extractHTMLAncestorElement","element","Element","HTMLElement","currentElement","parentElement","CompareRunsTooltipWrapper","contextData","hoverOnly","containerRef","ctxMenuRef","currentPos","contextMenuShown","setContextMenuShown","HIDDEN","tooltipDisplayParams","setTooltipDisplayParams","hoveredRunUuid","setHoveredRunUuid","additionalAxisData","setAdditionalAxisData","focusedRunData","mutableContextMenuShownRef","mutableHoveredRunUuid","mutableTooltipDisplayParams","applyPositioning","targetX","targetY","menuRect","getBoundingClientRect","containerRect","getCoordinatesForTargetElement","targetRect","offsetX","offsetY","mouseMove","HOVER","nativeEvent","updateTooltip","hoverData","additionalRunData","VISIBLE","currentRunUuid","mouseDownCapture","pageX","pageY","tooltipAreaClicked","stopPropagation","closeContextMenu","domRoot","getRootNode","rootClickListener","contains","addEventListener","capture","removeEventListener","resetTooltip","onMouseMove","onMouseDownCapture","onClickCapture","contextMenuContainer","contextMenuWrapper","userSelect","isHovering","useCompareRunsTooltip","setTooltip","overlayElement","bottom","RunsCompareChartCardWrapper","subtitle","onDelete","onEdit","fullWidth","chartEntry","chartEntryTitle","gridTemplateRows","borderRadiusBase","chartComponentWrapper","fontSize","barChartCardDefaultMargin","l","pad","RunsCompareBarChartCard","chartRunData","slicedRuns","reverse","barChartCardWrapper","_defs","SvgParallelChartPlaceholder","x1","y1","x2","y2","gradientUnits","stopColor","ParallelCoordinatesPlot","processData","computeSelectedAttrs","attrs","runvalue","attr","Suspense","EmptyParallelCoordsPlaceholder","RunsCompareParallelChartCard","isConfigured","parallelCoordsData","configured","parallelChartCardWrapper","axesRotateThreshold","CompareRunsScatterPlot","xAxis","yAxis","markerSize","useTheme","xValues","yValues","tooltipData","xAxisData","yAxisData","primary","customdata","newLayout","pointCustomDataRunUuid","RunsCompareScatterChartCard","scatterChartCardWrapper","DEFAULT_COLOR_SCALE","CompareRunsContourPlot","zAxis","reverseScale","compareRunsChartDefaultContourMargin","colorScale","zValues","zAxisData","z","layers","zAxisTitle","line","unshift","connectgaps","contours","coloring","colorscale","reversescale","ticks","standoff","scatterPoints","curveNumber","RunsCompareContourChartCard","contourChartCardWrapper","prepareMetricHistoryByAxisType","metricHistory","axisType","timestamp","minTimestamp","minBy","step","CompareRunsMetricsLinePlot","lineShape","runEntry","metricsHistory","hovertext","shape","xAxisKeyLabel","yAxisParams","showlegend","immediateLayout","RunsCompareLineChartCard","isMetricHistoryLoading","lineChartCardWrapper","RunsCompareCharts","cardsConfig","onRemoveChart","onStartEditChart","parallelChartCards","remainingChartCards","c","parallelChartsWrapper","cardConfig","chartsWrapper","chartGroupWrapper","RunsCompareConfigureField","RunsCompareMetricParamSelect","isEmpty","selectFull","showSearch","RunsCompareRunNumberSelect","countOption","optionValue","runsCompareRunCountDefaultOptions","RunsCompareConfigureBarChart","onStateChange","updateMetric","updateVisibleRunCount","emptyMetricsList","RunsCompareConfigureParallelChart","updateSelectedParams","updateSelectedMetrics","emptyParamsList","RunsCompareConfigureLineChart","updateXAxisKey","updateYAxisType","isLogType","timeStepQuestionMarkIcon","useFetchCompareRunsMetricHistory","currentStoreMetrics","setError","setRequests","setRequestsPending","currentRequests","addRequests","settleRequests","runUuidsToFetch","isInStore","isPendingRequest","getMetricHistoryApiBulk","RunsCompareConfigureLineChartPreview","previewData","metricKeysToFetch","previewDataWithHistory","previewRun","RunsCompareConfigureContourChart","updateAxis","axis","firstMetric","firstParam","scatterPlotDefaultOptions","RunsCompareConfigureScatterChart","normalizeValue","decimalPlaces","castToNumber","truncateString","ValuesBox","activeRun","xAxisValues","createBarChartValuesBox","xKey","yKey","xValue","yValue","createScatterChartValuesBox","zKey","zValue","createContourChartValuesBox","createLineChartValuesBox","createParallelChartValuesBox","RunsCompareTooltipBody","onHideRun","contentWrapper","header","actionsWrapper","previewComponentsMap","filteredData","RunsCompareConfigureModal","currentFormState","setCurrentFormState","isEditing","updateChartType","emptyChartCard","onOk","okButtonProps","cancelText","okText","chartTypeOption","chartWrapper","PreviewComponent","renderPreviewChartType","controlsWrapper","backgroundSecondary","RunsCompare","paramsByRunUuid","latestMetricsByRunUuid","comparedRuns","initiallyLoaded","setInitiallyLoaded","configuredCardConfig","setConfiguredCardConfig","addNewChartCard","startEditChart","chartCard","automlEntry","AUTOML_EVALUATION_METRIC_TAG","mlflowPrimaryEntry","MLFLOW_EXPERIMENT_PRIMARY_METRIC_NAME","getBaseChartConfigs","chartRunDataWithHistory","cardsRequiringMetricHistory","runsRequiringMetricHistory","maxRunCount","metricsRequiringHistory","card","baseRun","useMultipleChartsMetricHistory","tooltipContextValue","configToDelete","setup","configuredCard","serializedCard","serialize","existingChartCard","createCurrentTime","mountTime","setMilliseconds","ExperimentViewRunsImpl","visibleRuns","setVisibleRuns","setViewState","newPartialViewState","currentViewState","addColumnClicked","setReferenceTime","loadMoreRunsCallback","createRunsTableWrapper","loadingFooter","getExperimentRunsActions","ExperimentViewRunsConnect","experimentTagsByExperimentId","tagsByRunUuid","ExperimentViewRunsInjectFilters","ExperimentViewRuns","ExperimentView","experimentsById","oldExperiments","newExperiments","firstExperiment","isComparingExperiments","getErrorCode","ErrorCodes","getMessageField","NotFoundPage","experimentViewWrapper","getExperimentActions","setCompareExperiments","ExperimentPage","throttleMs","setLayoutWidth","setLayoutHeight","setDimensions","setDimensionsThrottled","throttle","leading","unmounted","observer","observerEntry","round","scatterChartHighlightStyles","paintOrder","chart","bgcolor","bordercolor","font","parsedValue","parseFloat","isFinite","MAX_VALUE","POSITIVE_INFINITY","sign","fullStr","strLen","charsToShow","frontChars","ceil","backChars"],"sourceRoot":""}