{"version":3,"file":"static/js/604.e841f9a2.chunk.js","mappings":"gRAWA,SAASA,EAAcC,EAASC,GAC9B,GAAID,EAAQE,YAAcF,EAAQE,WAAWC,aAAc,CACzD,MAAM,aAAEA,GAAiBH,EAAQE,WACjCD,EAAMG,UAAUD,IAIpB,MAAME,UAA4BC,EAAAA,UAChCC,YAAYC,GACVC,MAAMD,GAAO,KAgBfE,MAAQ,CACNC,SAAS,EACTC,WAAOC,EACPC,cAAUD,GAlBVE,KAAKC,eAAiBD,KAAKC,eAAeC,KAAKF,MAC/CA,KAAKG,gBAAaL,EAClBE,KAAKI,SAAW,MAmBlBC,oBACEL,KAAKC,iBAGPK,mBAAmBC,GAKjB,GAJIP,KAAKP,MAAMe,OAASD,EAAUC,MAAQR,KAAKP,MAAMgB,UAAYF,EAAUE,SACzET,KAAKC,sBAGiBH,IAApBE,KAAKG,YACHH,KAAKG,WAAWO,eAAe,WAAY,CAC7CV,KAAKG,WAAWQ,MAChBX,KAAKG,WAAWS,SAChB,MAAMC,EAAQ,YAAcb,KAAKI,SAAW,WAC5CU,SAASC,uBAAuB,iBAAiB,GAAGC,UAAYH,EAChEb,KAAKG,gBAAaL,EAItB,QAA4BA,IAAxBE,KAAKL,MAAMI,SAAwB,CACrC,MAAMkB,EAAMC,IAAAA,IAAMlB,KAAKI,UAIjBe,EAAW,qDACXC,EAAO,2EAEbF,IAAAA,UAAYC,EAAU,CACpBE,YAAaD,IACZE,MAAML,GAET,MAAMM,EAAeL,IAAAA,QAAUlB,KAAKL,MAAMI,SAAU,CAClDyB,MAAMvC,GACGA,EAAQE,YAAcF,EAAQE,WAAWqC,MAElDC,aAAY,CAACxC,EAASyC,IAChBzC,EAAQE,YAAcF,EAAQE,WAAWqC,MACpCN,IAAAA,aAAeQ,EAAQzC,EAAQE,YAAcF,EAAQE,WAAWqC,OAC9DvC,EAAQE,YAAcF,EAAQE,WAAWwC,KAC3CT,IAAAA,OAASQ,EAAQ,CACtBC,KAAMT,IAAAA,KAAOjC,EAAQE,YAAcF,EAAQE,WAAWwC,QAGnDT,IAAAA,OAASQ,EAAQ,CACtBC,KAAMT,IAAAA,KAAO,CACXU,cAAeC,EACfC,QAASH,EACTI,UAAWC,EACXC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,QAIvBlD,cAAeA,IACdsC,MAAML,GACTA,EAAIkB,UAAUZ,EAAaa,aAC3BpC,KAAKG,WAAac,GAItBoB,SACE,OAAIrC,KAAKL,MAAMC,SACN,eAAK0C,UAAU,4BAA2B,SAAC,eAEhDtC,KAAKL,MAAME,OAEX,eAAKyC,UAAU,0BAAyB,SAAC,2DAMzC,eAAKA,UAAU,gBAAe,UAC5B,eAAKC,GAAIvC,KAAKI,aAOtBH,iBACE,MAAMuC,GAAmBC,EAAAA,EAAAA,GAAOzC,KAAKP,MAAMe,KAAMR,KAAKP,MAAMgB,SAC5DT,KAAKP,MACFiD,YAAYF,GACZG,MAAMC,IACL,MAAMC,EAAiBC,KAAKC,MAAMH,GAClC5C,KAAKgD,SAAS,CAAEjD,SAAU8C,EAAgBjD,SAAS,OAEpDqD,OAAOpD,IACNG,KAAKgD,SAAS,CAAEnD,MAAOA,EAAOD,SAAS,EAAOG,cAAUD,QAjH1DR,EAcG4D,aAAe,CACpBR,YAAaS,EAAAA,IAuGjB","sources":["experiment-tracking/components/artifact-view-components/ShowArtifactMapView.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getSrc } from './ShowArtifactPage';\nimport { getArtifactContent } from '../../../common/utils/ArtifactUtils';\nimport './ShowArtifactMapView.css';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\n\nfunction onEachFeature(feature, layer) {\n  if (feature.properties && feature.properties.popupContent) {\n    const { popupContent } = feature.properties;\n    layer.bindPopup(popupContent);\n  }\n}\n\nclass ShowArtifactMapView extends Component {\n  constructor(props) {\n    super(props);\n    this.fetchArtifacts = this.fetchArtifacts.bind(this);\n    this.leafletMap = undefined;\n    this.mapDivId = 'map';\n  }\n\n  static propTypes = {\n    runUuid: PropTypes.string.isRequired,\n    path: PropTypes.string.isRequired,\n    getArtifact: PropTypes.func,\n  };\n\n  static defaultProps = {\n    getArtifact: getArtifactContent,\n  };\n\n  state = {\n    loading: true,\n    error: undefined,\n    features: undefined,\n  };\n\n  componentDidMount() {\n    this.fetchArtifacts();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.path !== prevProps.path || this.props.runUuid !== prevProps.runUuid) {\n      this.fetchArtifacts();\n    }\n\n    if (this.leafletMap !== undefined) {\n      if (this.leafletMap.hasOwnProperty('_layers')) {\n        this.leafletMap.off();\n        this.leafletMap.remove();\n        const inner = \"<div id='\" + this.mapDivId + \"'></div>\";\n        document.getElementsByClassName('map-container')[0].innerHTML = inner;\n        this.leafletMap = undefined;\n      }\n    }\n\n    if (this.state.features !== undefined) {\n      const map = L.map(this.mapDivId);\n\n      // Load tiles from OSM with the corresponding attribution\n      // Potentially, these could be set in an ENV VAR to use a custom map\n      const tilesURL = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n      const attr = '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors';\n\n      L.tileLayer(tilesURL, {\n        attribution: attr,\n      }).addTo(map);\n\n      const geojsonLayer = L.geoJSON(this.state.features, {\n        style(feature) {\n          return feature.properties && feature.properties.style;\n        },\n        pointToLayer(feature, latlng) {\n          if (feature.properties && feature.properties.style) {\n            return L.circleMarker(latlng, feature.properties && feature.properties.style);\n          } else if (feature.properties && feature.properties.icon) {\n            return L.marker(latlng, {\n              icon: L.icon(feature.properties && feature.properties.icon),\n            });\n          }\n          return L.marker(latlng, {\n            icon: L.icon({\n              iconRetinaUrl: iconRetina,\n              iconUrl: icon,\n              shadowUrl: iconShadow,\n              iconSize: [24, 36],\n              iconAnchor: [12, 36],\n            }),\n          });\n        },\n        onEachFeature: onEachFeature,\n      }).addTo(map);\n      map.fitBounds(geojsonLayer.getBounds());\n      this.leafletMap = map;\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <div className='artifact-map-view-loading'>Loading...</div>;\n    }\n    if (this.state.error) {\n      return (\n        <div className='artifact-map-view-error'>\n          Oops, we couldn't load your file because of an error.\n        </div>\n      );\n    } else {\n      return (\n        <div className='map-container'>\n          <div id={this.mapDivId}></div>\n        </div>\n      );\n    }\n  }\n\n  /** Fetches artifacts and updates component state with the result */\n  fetchArtifacts() {\n    const artifactLocation = getSrc(this.props.path, this.props.runUuid);\n    this.props\n      .getArtifact(artifactLocation)\n      .then((rawFeatures) => {\n        const parsedFeatures = JSON.parse(rawFeatures);\n        this.setState({ features: parsedFeatures, loading: false });\n      })\n      .catch((error) => {\n        this.setState({ error: error, loading: false, features: undefined });\n      });\n  }\n}\n\nexport default ShowArtifactMapView;\n"],"names":["onEachFeature","feature","layer","properties","popupContent","bindPopup","ShowArtifactMapView","Component","constructor","props","super","state","loading","error","undefined","features","this","fetchArtifacts","bind","leafletMap","mapDivId","componentDidMount","componentDidUpdate","prevProps","path","runUuid","hasOwnProperty","off","remove","inner","document","getElementsByClassName","innerHTML","map","L","tilesURL","attr","attribution","addTo","geojsonLayer","style","pointToLayer","latlng","icon","iconRetinaUrl","iconRetina","iconUrl","shadowUrl","iconShadow","iconSize","iconAnchor","fitBounds","getBounds","render","className","id","artifactLocation","getSrc","getArtifact","then","rawFeatures","parsedFeatures","JSON","parse","setState","catch","defaultProps","getArtifactContent"],"sourceRoot":""}