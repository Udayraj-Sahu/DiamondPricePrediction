{"version":3,"file":"static/js/744.84e9b0fc.chunk.js","mappings":"uQAYAA,EAAAA,GAAAA,oBAAAA,UAAuC,+BAEvC,MAAMC,UAA4BC,EAAAA,UAAW,cAAD,yBAC1CC,MAAQ,CACNC,SAAS,EACTC,WAAOC,EACPC,aAASD,EACTE,YAAa,EACbC,SAAU,GACV,KAmCFC,sBAAwB,IAAmB,IAAlB,SAAED,GAAU,EACnCE,KAAKC,SAAS,CAAEH,SAAAA,KAChB,KAEFI,oBAAuBR,IACrBS,EAAAA,EAAAA,sBAA4B,IAAIC,EAAAA,EAAaV,KAC7C,KAEFW,aAAe,CAACC,EAAeC,KAC7BP,KAAKC,SAAS,CAAEJ,YAAaS,KAC7B,KAEFE,UAAY,KAER,QAAC,WAAc,WACb,eAAKC,UAAU,aAAY,WACzB,eAAKA,UAAU,YAAW,UACxB,QAAC,MAAU,CACTC,QAAM,EACNC,iBAAkBX,KAAKR,MAAMK,YAC7Be,SAAUZ,KAAKR,MAAMM,SACrBe,SAAU,EACVC,SAAUd,KAAKK,aAKfU,wBAAyB,CAAEL,QAAQ,QAGvC,eAAKD,UAAU,WAAU,UACvB,QAAC,KAAQ,CACPO,KAAMhB,KAAKR,MAAMI,QACjBqB,cAAejB,KAAKD,sBACpBmB,YAAalB,KAAKE,oBAClBT,SAAS,QAAC,EAAA0B,EAAO,IAAI,UAErB,QAAC,KAAI,CAACC,WAAYpB,KAAKR,MAAMK,YAAaJ,SAAS,QAAC,EAAA0B,EAAO,eA3DvEE,WACE,MAAMC,GAAmBC,EAAAA,EAAAA,GAAOvB,KAAKwB,MAAMC,KAAMzB,KAAKwB,MAAME,SAC5D1B,KAAKwB,MACFG,YAAYL,GACZM,MAAMC,IACL7B,KAAKC,SAAS,CAAEL,QAAS,CAAEkC,KAAMD,GAAmBpC,SAAS,OAE9DsC,OAAOrC,IACNM,KAAKC,SAAS,CAAEP,MAAOA,EAAOD,SAAS,OAI7CuC,oBACEhC,KAAKqB,WAGPY,mBAAmBC,GACblC,KAAKwB,MAAMC,OAASS,EAAUT,MAAQzB,KAAKwB,MAAME,UAAYQ,EAAUR,SACzE1B,KAAKqB,WAiDTc,SACE,OAAInC,KAAKR,MAAMC,SACN,eAAKgB,UAAU,4BAA2B,SAAC,eAEhDT,KAAKR,MAAME,OAEX,eAAKe,UAAU,0BAAyB,SAAC,+FAKpC,eAAKA,UAAU,sBAAqB,SAAET,KAAKQ,eAlGlDlB,EAeG8C,aAAe,CACpBT,YAAaU,EAAAA,IAuFjB,S","sources":["experiment-tracking/components/artifact-view-components/ShowArtifactPdfView.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getSrc } from './ShowArtifactPage';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport { Pagination, Spinner } from '@databricks/design-system';\nimport { getArtifactBytesContent } from '../../../common/utils/ArtifactUtils';\nimport './ShowArtifactPdfView.css';\nimport Utils from '../../../common/utils/Utils';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\n\n// See: https://github.com/wojtekmaj/react-pdf/blob/master/README.md#enable-pdfjs-worker for how\n// workerSrc is supposed to be specified.\npdfjs.GlobalWorkerOptions.workerSrc = `./static-files/pdf.worker.js`;\n\nclass ShowArtifactPdfView extends Component {\n  state = {\n    loading: true,\n    error: undefined,\n    pdfData: undefined,\n    currentPage: 1,\n    numPages: 1,\n  };\n\n  static propTypes = {\n    runUuid: PropTypes.string.isRequired,\n    path: PropTypes.string.isRequired,\n    getArtifact: PropTypes.func,\n  };\n\n  static defaultProps = {\n    getArtifact: getArtifactBytesContent,\n  };\n\n  /** Fetches artifacts and updates component state with the result */\n  fetchPdf() {\n    const artifactLocation = getSrc(this.props.path, this.props.runUuid);\n    this.props\n      .getArtifact(artifactLocation)\n      .then((artifactPdfData) => {\n        this.setState({ pdfData: { data: artifactPdfData }, loading: false });\n      })\n      .catch((error) => {\n        this.setState({ error: error, loading: false });\n      });\n  }\n\n  componentDidMount() {\n    this.fetchPdf();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.path !== prevProps.path || this.props.runUuid !== prevProps.runUuid) {\n      this.fetchPdf();\n    }\n  }\n\n  onDocumentLoadSuccess = ({ numPages }) => {\n    this.setState({ numPages });\n  };\n\n  onDocumentLoadError = (error) => {\n    Utils.logErrorAndNotifyUser(new ErrorWrapper(error));\n  };\n\n  onPageChange = (newPageNumber, itemsPerPage) => {\n    this.setState({ currentPage: newPageNumber });\n  };\n\n  renderPdf = () => {\n    return (\n      <React.Fragment>\n        <div className='pdf-viewer'>\n          <div className='paginator'>\n            <Pagination\n              simple\n              currentPageIndex={this.state.currentPage}\n              numTotal={this.state.numPages}\n              pageSize={1}\n              onChange={this.onPageChange}\n              /*\n               * Currently DuBois pagination does not natively support\n               * \"simple\" mode which is required here, hence `dangerouslySetAntdProps`\n               */\n              dangerouslySetAntdProps={{ simple: true }}\n            />\n          </div>\n          <div className='document'>\n            <Document\n              file={this.state.pdfData}\n              onLoadSuccess={this.onDocumentLoadSuccess}\n              onLoadError={this.onDocumentLoadError}\n              loading={<Spinner />}\n            >\n              <Page pageNumber={this.state.currentPage} loading={<Spinner />} />\n            </Document>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    if (this.state.loading) {\n      return <div className='artifact-pdf-view-loading'>Loading...</div>;\n    }\n    if (this.state.error) {\n      return (\n        <div className='artifact-pdf-view-error'>\n          Oops we couldn't load your file because of an error. Please reload the page to try again.\n        </div>\n      );\n    } else {\n      return <div className='pdf-outer-container'>{this.renderPdf()}</div>;\n    }\n  }\n}\n\nexport default ShowArtifactPdfView;\n"],"names":["pdfjs","ShowArtifactPdfView","Component","state","loading","error","undefined","pdfData","currentPage","numPages","onDocumentLoadSuccess","this","setState","onDocumentLoadError","Utils","ErrorWrapper","onPageChange","newPageNumber","itemsPerPage","renderPdf","className","simple","currentPageIndex","numTotal","pageSize","onChange","dangerouslySetAntdProps","file","onLoadSuccess","onLoadError","S","pageNumber","fetchPdf","artifactLocation","getSrc","props","path","runUuid","getArtifact","then","artifactPdfData","data","catch","componentDidMount","componentDidUpdate","prevProps","render","defaultProps","getArtifactBytesContent"],"sourceRoot":""}